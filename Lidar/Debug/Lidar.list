
Lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004ff0  08004ff0  00005ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005068  08005068  00006068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005070  08005070  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005078  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  2000006c  080050e4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080050e4  00007704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da3a  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002231  00000000  00000000  00014ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00016d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  00017810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b64  00000000  00000000  00018074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de1f  00000000  00000000  0001abd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b887a  00000000  00000000  000289f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  000e12b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e4488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000006c 	.word	0x2000006c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004fd8 	.word	0x08004fd8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000070 	.word	0x20000070
 8000214:	08004fd8 	.word	0x08004fd8

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800023c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000240:	f000 b96a 	b.w	8000518 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9d08      	ldr	r5, [sp, #32]
 8000262:	460c      	mov	r4, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14e      	bne.n	8000306 <__udivmoddi4+0xaa>
 8000268:	4694      	mov	ip, r2
 800026a:	458c      	cmp	ip, r1
 800026c:	4686      	mov	lr, r0
 800026e:	fab2 f282 	clz	r2, r2
 8000272:	d962      	bls.n	800033a <__udivmoddi4+0xde>
 8000274:	b14a      	cbz	r2, 800028a <__udivmoddi4+0x2e>
 8000276:	f1c2 0320 	rsb	r3, r2, #32
 800027a:	4091      	lsls	r1, r2
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	fa0c fc02 	lsl.w	ip, ip, r2
 8000284:	4319      	orrs	r1, r3
 8000286:	fa00 fe02 	lsl.w	lr, r0, r2
 800028a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	fbb1 f4f7 	udiv	r4, r1, r7
 8000296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029a:	fb07 1114 	mls	r1, r7, r4, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb04 f106 	mul.w	r1, r4, r6
 80002a6:	4299      	cmp	r1, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x64>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002b2:	f080 8112 	bcs.w	80004da <__udivmoddi4+0x27e>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 810f 	bls.w	80004da <__udivmoddi4+0x27e>
 80002bc:	3c02      	subs	r4, #2
 80002be:	4463      	add	r3, ip
 80002c0:	1a59      	subs	r1, r3, r1
 80002c2:	fa1f f38e 	uxth.w	r3, lr
 80002c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ca:	fb07 1110 	mls	r1, r7, r0, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb00 f606 	mul.w	r6, r0, r6
 80002d6:	429e      	cmp	r6, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x94>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002e2:	f080 80fc 	bcs.w	80004de <__udivmoddi4+0x282>
 80002e6:	429e      	cmp	r6, r3
 80002e8:	f240 80f9 	bls.w	80004de <__udivmoddi4+0x282>
 80002ec:	4463      	add	r3, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	1b9b      	subs	r3, r3, r6
 80002f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa6>
 80002fa:	40d3      	lsrs	r3, r2
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xba>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb4>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa6>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x150>
 800031e:	42a3      	cmp	r3, r4
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xcc>
 8000322:	4290      	cmp	r0, r2
 8000324:	f0c0 80f0 	bcc.w	8000508 <__udivmoddi4+0x2ac>
 8000328:	1a86      	subs	r6, r0, r2
 800032a:	eb64 0303 	sbc.w	r3, r4, r3
 800032e:	2001      	movs	r0, #1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e6      	beq.n	8000302 <__udivmoddi4+0xa6>
 8000334:	e9c5 6300 	strd	r6, r3, [r5]
 8000338:	e7e3      	b.n	8000302 <__udivmoddi4+0xa6>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x204>
 8000340:	eba1 040c 	sub.w	r4, r1, ip
 8000344:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000348:	fa1f f78c 	uxth.w	r7, ip
 800034c:	2101      	movs	r1, #1
 800034e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	fb08 4416 	mls	r4, r8, r6, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb07 f006 	mul.w	r0, r7, r6
 8000362:	4298      	cmp	r0, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x11c>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x11a>
 8000370:	4298      	cmp	r0, r3
 8000372:	f200 80cd 	bhi.w	8000510 <__udivmoddi4+0x2b4>
 8000376:	4626      	mov	r6, r4
 8000378:	1a1c      	subs	r4, r3, r0
 800037a:	fa1f f38e 	uxth.w	r3, lr
 800037e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000382:	fb08 4410 	mls	r4, r8, r0, r4
 8000386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038a:	fb00 f707 	mul.w	r7, r0, r7
 800038e:	429f      	cmp	r7, r3
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x148>
 8000392:	eb1c 0303 	adds.w	r3, ip, r3
 8000396:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x146>
 800039c:	429f      	cmp	r7, r3
 800039e:	f200 80b0 	bhi.w	8000502 <__udivmoddi4+0x2a6>
 80003a2:	4620      	mov	r0, r4
 80003a4:	1bdb      	subs	r3, r3, r7
 80003a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x9c>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003bc:	fa04 f301 	lsl.w	r3, r4, r1
 80003c0:	ea43 030c 	orr.w	r3, r3, ip
 80003c4:	40f4      	lsrs	r4, r6
 80003c6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ca:	0c38      	lsrs	r0, r7, #16
 80003cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d0:	fbb4 fef0 	udiv	lr, r4, r0
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	fb00 441e 	mls	r4, r0, lr, r4
 80003dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e0:	fb0e f90c 	mul.w	r9, lr, ip
 80003e4:	45a1      	cmp	r9, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x1a6>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003f2:	f080 8084 	bcs.w	80004fe <__udivmoddi4+0x2a2>
 80003f6:	45a1      	cmp	r9, r4
 80003f8:	f240 8081 	bls.w	80004fe <__udivmoddi4+0x2a2>
 80003fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000400:	443c      	add	r4, r7
 8000402:	eba4 0409 	sub.w	r4, r4, r9
 8000406:	fa1f f983 	uxth.w	r9, r3
 800040a:	fbb4 f3f0 	udiv	r3, r4, r0
 800040e:	fb00 4413 	mls	r4, r0, r3, r4
 8000412:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000416:	fb03 fc0c 	mul.w	ip, r3, ip
 800041a:	45a4      	cmp	ip, r4
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1d2>
 800041e:	193c      	adds	r4, r7, r4
 8000420:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000424:	d267      	bcs.n	80004f6 <__udivmoddi4+0x29a>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d965      	bls.n	80004f6 <__udivmoddi4+0x29a>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000432:	fba0 9302 	umull	r9, r3, r0, r2
 8000436:	eba4 040c 	sub.w	r4, r4, ip
 800043a:	429c      	cmp	r4, r3
 800043c:	46ce      	mov	lr, r9
 800043e:	469c      	mov	ip, r3
 8000440:	d351      	bcc.n	80004e6 <__udivmoddi4+0x28a>
 8000442:	d04e      	beq.n	80004e2 <__udivmoddi4+0x286>
 8000444:	b155      	cbz	r5, 800045c <__udivmoddi4+0x200>
 8000446:	ebb8 030e 	subs.w	r3, r8, lr
 800044a:	eb64 040c 	sbc.w	r4, r4, ip
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	40cb      	lsrs	r3, r1
 8000454:	431e      	orrs	r6, r3
 8000456:	40cc      	lsrs	r4, r1
 8000458:	e9c5 6400 	strd	r6, r4, [r5]
 800045c:	2100      	movs	r1, #0
 800045e:	e750      	b.n	8000302 <__udivmoddi4+0xa6>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f103 	lsr.w	r1, r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa24 f303 	lsr.w	r3, r4, r3
 8000470:	4094      	lsls	r4, r2
 8000472:	430c      	orrs	r4, r1
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	fa00 fe02 	lsl.w	lr, r0, r2
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	fbb3 f0f8 	udiv	r0, r3, r8
 8000484:	fb08 3110 	mls	r1, r8, r0, r3
 8000488:	0c23      	lsrs	r3, r4, #16
 800048a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048e:	fb00 f107 	mul.w	r1, r0, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x24c>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800049e:	d22c      	bcs.n	80004fa <__udivmoddi4+0x29e>
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d92a      	bls.n	80004fa <__udivmoddi4+0x29e>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b0:	fb08 3311 	mls	r3, r8, r1, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb01 f307 	mul.w	r3, r1, r7
 80004bc:	42a3      	cmp	r3, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x276>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004c8:	d213      	bcs.n	80004f2 <__udivmoddi4+0x296>
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d911      	bls.n	80004f2 <__udivmoddi4+0x296>
 80004ce:	3902      	subs	r1, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	1ae4      	subs	r4, r4, r3
 80004d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d8:	e739      	b.n	800034e <__udivmoddi4+0xf2>
 80004da:	4604      	mov	r4, r0
 80004dc:	e6f0      	b.n	80002c0 <__udivmoddi4+0x64>
 80004de:	4608      	mov	r0, r1
 80004e0:	e706      	b.n	80002f0 <__udivmoddi4+0x94>
 80004e2:	45c8      	cmp	r8, r9
 80004e4:	d2ae      	bcs.n	8000444 <__udivmoddi4+0x1e8>
 80004e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7a8      	b.n	8000444 <__udivmoddi4+0x1e8>
 80004f2:	4631      	mov	r1, r6
 80004f4:	e7ed      	b.n	80004d2 <__udivmoddi4+0x276>
 80004f6:	4603      	mov	r3, r0
 80004f8:	e799      	b.n	800042e <__udivmoddi4+0x1d2>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e7d4      	b.n	80004a8 <__udivmoddi4+0x24c>
 80004fe:	46d6      	mov	lr, sl
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1a6>
 8000502:	4463      	add	r3, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e74d      	b.n	80003a4 <__udivmoddi4+0x148>
 8000508:	4606      	mov	r6, r0
 800050a:	4623      	mov	r3, r4
 800050c:	4608      	mov	r0, r1
 800050e:	e70f      	b.n	8000330 <__udivmoddi4+0xd4>
 8000510:	3e02      	subs	r6, #2
 8000512:	4463      	add	r3, ip
 8000514:	e730      	b.n	8000378 <__udivmoddi4+0x11c>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053e:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a24      	ldr	r2, [pc, #144]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000550:	f043 0320 	orr.w	r3, r3, #32
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0320 	and.w	r3, r3, #32
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a1e      	ldr	r2, [pc, #120]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a18      	ldr	r2, [pc, #96]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_GPIO_Init+0xc4>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059a:	f000 ff6d 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800059e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_GPIO_Init+0xc8>)
 80005b6:	f000 fddd 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005ba:	2320      	movs	r3, #32
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f000 fdce 	bl	8001174 <HAL_GPIO_Init>

}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	@ 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000800 	.word	0x48000800

080005e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <__io_putchar+0x20>)
 80005fa:	f001 ff77 	bl	80024ec <HAL_UART_Transmit>
	return ch;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000520 	.word	0x20000520

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fb6f 	bl	8000cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f890 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f7ff ff80 	bl	800051c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800061c:	f000 fa54 	bl	8000ac8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000620:	f000 fa06 	bl	8000a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("=====Lidar=====\r\n");
 8000624:	4836      	ldr	r0, [pc, #216]	@ (8000700 <main+0xf4>)
 8000626:	f004 f943 	bl	80048b0 <puts>
  HAL_UART_Receive_IT(&huart1, uart_lidar_rx, 1); // Active la réception de données en mode interruption
 800062a:	2201      	movs	r2, #1
 800062c:	4935      	ldr	r1, [pc, #212]	@ (8000704 <main+0xf8>)
 800062e:	4836      	ldr	r0, [pc, #216]	@ (8000708 <main+0xfc>)
 8000630:	f001 ffea 	bl	8002608 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(it_rx_lidar){
 8000634:	4b35      	ldr	r3, [pc, #212]	@ (800070c <main+0x100>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0fb      	beq.n	8000634 <main+0x28>
		  printf("it_rx_lidar\r\n");
 800063c:	4834      	ldr	r0, [pc, #208]	@ (8000710 <main+0x104>)
 800063e:	f004 f937 	bl	80048b0 <puts>

		  if(data_ready == 1){
 8000642:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <main+0x108>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d105      	bne.n	8000656 <main+0x4a>
			  printf("data_ready\r\n");
 800064a:	4833      	ldr	r0, [pc, #204]	@ (8000718 <main+0x10c>)
 800064c:	f004 f930 	bl	80048b0 <puts>
			  data_ready = 0;
 8000650:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <main+0x108>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
		  }

		  if(uart_lidar_rx[0] == 10){
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0xf8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d107      	bne.n	800066e <main+0x62>
			  HAL_UART_Transmit(&huart2,ral, 2, 1000); // Permet d'interpréter le retour à la ligne ASCII si on en reçoit
 800065e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000662:	2202      	movs	r2, #2
 8000664:	492d      	ldr	r1, [pc, #180]	@ (800071c <main+0x110>)
 8000666:	482e      	ldr	r0, [pc, #184]	@ (8000720 <main+0x114>)
 8000668:	f001 ff40 	bl	80024ec <HAL_UART_Transmit>
 800066c:	e044      	b.n	80006f8 <main+0xec>
		  }

		  else{
			  uart_pc_tx[0] = uart_lidar_rx[0];
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <main+0xf8>)
 8000670:	781a      	ldrb	r2, [r3, #0]
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <main+0x118>)
 8000674:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, uart_pc_tx, 1, 1000); // On envoie sur l'uart2 (minicom) ce que le lidar nous envoie
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	2201      	movs	r2, #1
 800067c:	4929      	ldr	r1, [pc, #164]	@ (8000724 <main+0x118>)
 800067e:	4828      	ldr	r0, [pc, #160]	@ (8000720 <main+0x114>)
 8000680:	f001 ff34 	bl	80024ec <HAL_UART_Transmit>
		      trame[i] = uart_pc_tx[0]; // On copie ce qui sort du lidar dans notre "trame"
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <main+0x11c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a26      	ldr	r2, [pc, #152]	@ (8000724 <main+0x118>)
 800068a:	7811      	ldrb	r1, [r2, #0]
 800068c:	4a27      	ldr	r2, [pc, #156]	@ (800072c <main+0x120>)
 800068e:	54d1      	strb	r1, [r2, r3]

		      if(i >= 4){
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <main+0x11c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b03      	cmp	r3, #3
 8000696:	dd2a      	ble.n	80006ee <main+0xe2>
		    	  if(strncmp("55AA",&trame[i-4],5) == 0){
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <main+0x11c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b04      	subs	r3, #4
 800069e:	4a23      	ldr	r2, [pc, #140]	@ (800072c <main+0x120>)
 80006a0:	4413      	add	r3, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	4822      	ldr	r0, [pc, #136]	@ (8000730 <main+0x124>)
 80006a6:	f7ff fdb7 	bl	8000218 <strcmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10e      	bne.n	80006ce <main+0xc2>
		    		  i = 0; // Si on trouve notre flag de départ, on réinitialise i à 0 pour synchroniser notre trame
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <main+0x11c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]

		    		  if(first_data == 1){
 80006b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <main+0x128>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d103      	bne.n	80006c6 <main+0xba>
		    			  data_ready = 1; // Si la trame est initialisée, le premier caractère du tableau voulu est prêt et on peut donc passer au traitement de la trame
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <main+0x108>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	e018      	b.n	80006f8 <main+0xec>
		    		  }
		    		  else first_data = 1; // Permet d'enregistrer le tableau désiré
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <main+0x128>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	e014      	b.n	80006f8 <main+0xec>
		    	  }

		    	  else{
		    		  if(i == LIDAR_TRAME_SIZE - 1){
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <main+0x11c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d103      	bne.n	80006e2 <main+0xd6>
		    			  i = 0;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <main+0x11c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	e00a      	b.n	80006f8 <main+0xec>
		    		  }
		    		  else i++;
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <main+0x11c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <main+0x11c>)
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	e004      	b.n	80006f8 <main+0xec>
		    	  }
		      }
		      else i++;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <main+0x11c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <main+0x11c>)
 80006f6:	6013      	str	r3, [r2, #0]
		  }
		  it_rx_lidar = 0;
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <main+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	  if(it_rx_lidar){
 80006fe:	e799      	b.n	8000634 <main+0x28>
 8000700:	08004ff0 	.word	0x08004ff0
 8000704:	20000088 	.word	0x20000088
 8000708:	2000048c 	.word	0x2000048c
 800070c:	20000484 	.word	0x20000484
 8000710:	08005004 	.word	0x08005004
 8000714:	20000480 	.word	0x20000480
 8000718:	08005014 	.word	0x08005014
 800071c:	20000000 	.word	0x20000000
 8000720:	20000520 	.word	0x20000520
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000478 	.word	0x20000478
 800072c:	20000090 	.word	0x20000090
 8000730:	08005020 	.word	0x08005020
 8000734:	2000047c 	.word	0x2000047c

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	2238      	movs	r2, #56	@ 0x38
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f004 f992 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fea4 	bl	80014a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	2340      	movs	r3, #64	@ 0x40
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000776:	2304      	movs	r3, #4
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800077a:	2355      	movs	r3, #85	@ 0x55
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ff3e 	bl	8001610 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800079a:	f000 f82f 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2104      	movs	r1, #4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fa3c 	bl	8001c34 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007c2:	f000 f81b 	bl	80007fc <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	it_rx_lidar = 1;
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_UART_RxCpltCallback+0x20>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_lidar_rx, 1); // Reactive la reception en interruption sans quoi on ne capterait qu'un seul octet
 80007de:	2201      	movs	r2, #1
 80007e0:	4904      	ldr	r1, [pc, #16]	@ (80007f4 <HAL_UART_RxCpltCallback+0x24>)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <HAL_UART_RxCpltCallback+0x28>)
 80007e4:	f001 ff10 	bl	8002608 <HAL_UART_Receive_IT>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000484 	.word	0x20000484
 80007f4:	20000088 	.word	0x20000088
 80007f8:	2000048c 	.word	0x2000048c

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	@ 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083e:	f000 fed7 	bl	80015f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 fa77 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f001 fef3 	bl	80026a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000048c 	.word	0x2000048c

080008c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00a      	b.n	80008ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d6:	f3af 8000 	nop.w
 80008da:	4601      	mov	r1, r0
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf0      	blt.n	80008d6 <_read+0x12>
  }

  return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e009      	b.n	8000924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe65 	bl	80005e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf1      	blt.n	8000910 <_write+0x12>
  }
  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800095e:	605a      	str	r2, [r3, #4]
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_isatty>:

int _isatty(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	@ (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f004 f89c 	bl	8004b0c <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20008000 	.word	0x20008000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	20000488 	.word	0x20000488
 8000a08:	20000708 	.word	0x20000708

08000a0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	@ (8000ac4 <MX_USART1_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a7a:	f001 fce7 	bl	800244c <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f7ff feba 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a8c:	f003 fd2d 	bl	80044ea <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f7ff feb1 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000a9e:	f003 fd62 	bl	8004566 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f7ff fea8 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_USART1_UART_Init+0x90>)
 8000aae:	f003 fce3 	bl	8004478 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f7ff fea0 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000048c 	.word	0x2000048c
 8000ac4:	40013800 	.word	0x40013800

08000ac8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <MX_USART2_UART_Init+0x94>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b12:	f001 fc9b 	bl	800244c <HAL_UART_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f7ff fe6e 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b24:	f003 fce1 	bl	80044ea <HAL_UARTEx_SetTxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f7ff fe65 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b36:	f003 fd16 	bl	8004566 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f7ff fe5c 	bl	80007fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_USART2_UART_Init+0x90>)
 8000b46:	f003 fc97 	bl	8004478 <HAL_UARTEx_DisableFifoMode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f7ff fe54 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000520 	.word	0x20000520
 8000b5c:	40004400 	.word	0x40004400

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	@ 0x70
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	2244      	movs	r2, #68	@ 0x44
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 ff75 	bl	8004a70 <memset>
  if(uartHandle->Instance==USART1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a42      	ldr	r2, [pc, #264]	@ (8000c94 <HAL_UART_MspInit+0x134>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d140      	bne.n	8000c12 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 fa65 	bl	800206c <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba8:	f7ff fe28 	bl	80007fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb0:	4a39      	ldr	r2, [pc, #228]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 faba 	bl	8001174 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2025      	movs	r0, #37	@ 0x25
 8000c06:	f000 f9c0 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c0a:	2025      	movs	r0, #37	@ 0x25
 8000c0c:	f000 f9d7 	bl	8000fbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c10:	e03b      	b.n	8000c8a <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <HAL_UART_MspInit+0x13c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d136      	bne.n	8000c8a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fa1f 	bl	800206c <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000c34:	f7ff fde2 	bl	80007fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	4a10      	ldr	r2, [pc, #64]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <HAL_UART_MspInit+0x138>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c86:	f000 fa75 	bl	8001174 <HAL_GPIO_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3770      	adds	r7, #112	@ 0x70
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca0:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff feb2 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f003 ff23 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fc9b 	bl	800060c <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   r0, =_estack
 8000cd8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce4:	08005078 	.word	0x08005078
  ldr r2, =_sbss
 8000ce8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cec:	20000704 	.word	0x20000704

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>

08000cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f939 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f80e 	bl	8000d24 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff fd78 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]

}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_InitTick+0x68>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d022      	beq.n	8000d7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_InitTick+0x6c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_InitTick+0x68>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f944 	bl	8000fda <HAL_SYSTICK_Config>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10f      	bne.n	8000d78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d809      	bhi.n	8000d72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d66:	f000 f910 	bl	8000f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_InitTick+0x70>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e007      	b.n	8000d82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e004      	b.n	8000d82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e001      	b.n	8000d82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	20000004 	.word	0x20000004
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b05      	ldr	r3, [pc, #20]	@ (8000db8 <HAL_IncTick+0x20>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a03      	ldr	r2, [pc, #12]	@ (8000db4 <HAL_IncTick+0x1c>)
 8000da8:	6013      	str	r3, [r2, #0]
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	200005b4 	.word	0x200005b4
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200005b4 	.word	0x200005b4

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	@ (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	@ (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff29 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff40 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff90 	bl	8000ec8 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5f 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff33 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa4 	bl	8000f30 <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d005      	beq.n	8001016 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e037      	b.n	8001086 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020e 	bic.w	r2, r2, #14
 8001024:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001034:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	f003 021f 	and.w	r2, r3, #31
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001062:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00c      	beq.n	8001086 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800107a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001084:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d00d      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e047      	b.n	8001168 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 020e 	bic.w	r2, r2, #14
 80010e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001124:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00c      	beq.n	8001148 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800113c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001146:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
    }
  }
  return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001182:	e15a      	b.n	800143a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 814c 	beq.w	8001434 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80a6 	beq.w	8001434 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001458 <HAL_GPIO_Init+0x2e4>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001458 <HAL_GPIO_Init+0x2e4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012f4:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <HAL_GPIO_Init+0x2e4>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001300:	4a56      	ldr	r2, [pc, #344]	@ (800145c <HAL_GPIO_Init+0x2e8>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800132a:	d01f      	beq.n	800136c <HAL_GPIO_Init+0x1f8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4c      	ldr	r2, [pc, #304]	@ (8001460 <HAL_GPIO_Init+0x2ec>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d019      	beq.n	8001368 <HAL_GPIO_Init+0x1f4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4b      	ldr	r2, [pc, #300]	@ (8001464 <HAL_GPIO_Init+0x2f0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d013      	beq.n	8001364 <HAL_GPIO_Init+0x1f0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4a      	ldr	r2, [pc, #296]	@ (8001468 <HAL_GPIO_Init+0x2f4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00d      	beq.n	8001360 <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a49      	ldr	r2, [pc, #292]	@ (800146c <HAL_GPIO_Init+0x2f8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a48      	ldr	r2, [pc, #288]	@ (8001470 <HAL_GPIO_Init+0x2fc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_Init+0x1e4>
 8001354:	2305      	movs	r3, #5
 8001356:	e00a      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 8001358:	2306      	movs	r3, #6
 800135a:	e008      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 800135c:	2304      	movs	r3, #4
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 8001360:	2303      	movs	r3, #3
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1fa>
 800136c:	2300      	movs	r3, #0
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800137e:	4937      	ldr	r1, [pc, #220]	@ (800145c <HAL_GPIO_Init+0x2e8>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138c:	4b39      	ldr	r3, [pc, #228]	@ (8001474 <HAL_GPIO_Init+0x300>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b0:	4a30      	ldr	r2, [pc, #192]	@ (8001474 <HAL_GPIO_Init+0x300>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <HAL_GPIO_Init+0x300>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013da:	4a26      	ldr	r2, [pc, #152]	@ (8001474 <HAL_GPIO_Init+0x300>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_GPIO_Init+0x300>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001404:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <HAL_GPIO_Init+0x300>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_GPIO_Init+0x300>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800142e:	4a11      	ldr	r2, [pc, #68]	@ (8001474 <HAL_GPIO_Init+0x300>)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f ae9d 	bne.w	8001184 <HAL_GPIO_Init+0x10>
  }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	48001400 	.word	0x48001400
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d141      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b6:	4b4b      	ldr	r3, [pc, #300]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c2:	d131      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c4:	4b47      	ldr	r3, [pc, #284]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ca:	4a46      	ldr	r2, [pc, #280]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d4:	4b43      	ldr	r3, [pc, #268]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014dc:	4a41      	ldr	r2, [pc, #260]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e4:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2232      	movs	r2, #50	@ 0x32
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a3f      	ldr	r2, [pc, #252]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	0c9b      	lsrs	r3, r3, #18
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fa:	e002      	b.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150e:	d102      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f2      	bne.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001522:	d158      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e057      	b.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001528:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800152e:	4a2d      	ldr	r2, [pc, #180]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001538:	e04d      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001540:	d141      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001542:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154e:	d131      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001556:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001568:	4a1e      	ldr	r2, [pc, #120]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2232      	movs	r2, #50	@ 0x32
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001586:	e002      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3b01      	subs	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d102      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f2      	bne.n	8001588 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ae:	d112      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e011      	b.n	80015d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015c4:	e007      	b.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40007000 	.word	0x40007000
 80015e8:	20000004 	.word	0x20000004
 80015ec:	431bde83 	.word	0x431bde83

080015f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fe:	6093      	str	r3, [r2, #8]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e2fe      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d075      	beq.n	800171a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b97      	ldr	r3, [pc, #604]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001638:	4b94      	ldr	r3, [pc, #592]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x3e>
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d002      	beq.n	8001654 <HAL_RCC_OscConfig+0x44>
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b08      	cmp	r3, #8
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b8d      	ldr	r3, [pc, #564]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d05b      	beq.n	8001718 <HAL_RCC_OscConfig+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d157      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e2d9      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x74>
 8001676:	4b85      	ldr	r3, [pc, #532]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a84      	ldr	r2, [pc, #528]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b7f      	ldr	r3, [pc, #508]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7c      	ldr	r3, [pc, #496]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7b      	ldr	r2, [pc, #492]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 80016a8:	4b78      	ldr	r3, [pc, #480]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a77      	ldr	r2, [pc, #476]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b75      	ldr	r3, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a74      	ldr	r2, [pc, #464]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb78 	bl	8000dbc <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb74 	bl	8000dbc <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	@ 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e29e      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b6a      	ldr	r3, [pc, #424]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xc0>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb64 	bl	8000dbc <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb60 	bl	8000dbc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	@ 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e28a      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b60      	ldr	r3, [pc, #384]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xe8>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d075      	beq.n	8001812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b59      	ldr	r3, [pc, #356]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b56      	ldr	r3, [pc, #344]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b0c      	cmp	r3, #12
 800173e:	d102      	bne.n	8001746 <HAL_RCC_OscConfig+0x136>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x13c>
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d11f      	bne.n	800178c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b4f      	ldr	r3, [pc, #316]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x154>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e25d      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b49      	ldr	r3, [pc, #292]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4946      	ldr	r1, [pc, #280]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001778:	4b45      	ldr	r3, [pc, #276]	@ (8001890 <HAL_RCC_OscConfig+0x280>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fad1 	bl	8000d24 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d043      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e249      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d023      	beq.n	80017dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a3c      	ldr	r2, [pc, #240]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb0c 	bl	8000dbc <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fb08 	bl	8000dbc <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e232      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	492d      	ldr	r1, [pc, #180]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e01a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 80017e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fae8 	bl	8000dbc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fae4 	bl	8000dbc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20e      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e0>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d041      	beq.n	80018a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d01c      	beq.n	8001860 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182c:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fac1 	bl	8000dbc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fabd 	bl	8000dbc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1e7      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ef      	beq.n	800183e <HAL_RCC_OscConfig+0x22e>
 800185e:	e020      	b.n	80018a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff faa4 	bl	8000dbc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001876:	e00d      	b.n	8001894 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff faa0 	bl	8000dbc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d906      	bls.n	8001894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1ca      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ea      	bne.n	8001878 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80a6 	beq.w	80019fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b4:	4b84      	ldr	r3, [pc, #528]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2b4>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x2b6>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b79      	ldr	r3, [pc, #484]	@ (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f2:	4b76      	ldr	r3, [pc, #472]	@ (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	@ (8001acc <HAL_RCC_OscConfig+0x4bc>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa5d 	bl	8000dbc <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fa59 	bl	8000dbc <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e183      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <HAL_RCC_OscConfig+0x4bc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x32e>
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	4a65      	ldr	r2, [pc, #404]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800193c:	e024      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x358>
 8001946:	4b60      	ldr	r3, [pc, #384]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001956:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x378>
 8001968:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196e:	4a56      	ldr	r2, [pc, #344]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197e:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d016      	beq.n	80019be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff fa14 	bl	8000dbc <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7ff fa10 	bl	8000dbc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e138      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ed      	beq.n	8001998 <HAL_RCC_OscConfig+0x388>
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f9fd 	bl	8000dbc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff f9f9 	bl	8000dbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e121      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ed      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	7ffb      	ldrb	r3, [r7, #31]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03c      	beq.n	8001a82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff f9cc 	bl	8000dbc <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a28:	f7ff f9c8 	bl	8000dbc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0f2      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ef      	beq.n	8001a28 <HAL_RCC_OscConfig+0x418>
 8001a48:	e01b      	b.n	8001a82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9af 	bl	8000dbc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7ff f9ab 	bl	8000dbc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0d5      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a74:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ef      	bne.n	8001a62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80c9 	beq.w	8001c1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f000 8083 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d15e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f985 	bl	8000dbc <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f981 	bl	8000dbc <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d905      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0ab      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ec      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b52      	ldr	r3, [pc, #328]	@ (8001c2c <HAL_RCC_OscConfig+0x61c>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6a11      	ldr	r1, [r2, #32]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4311      	orrs	r1, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0552      	lsls	r2, r2, #21
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b0a:	0852      	lsrs	r2, r2, #1
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	0652      	lsls	r2, r2, #25
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b16:	06d2      	lsls	r2, r2, #27
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4943      	ldr	r1, [pc, #268]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a40      	ldr	r2, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f940 	bl	8000dbc <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f93c 	bl	8000dbc <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e066      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x530>
 8001b5e:	e05e      	b.n	8001c1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b31      	ldr	r3, [pc, #196]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f926 	bl	8000dbc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f922 	bl	8000dbc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e04c      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4924      	ldr	r1, [pc, #144]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <HAL_RCC_OscConfig+0x620>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]
 8001b9e:	e03e      	b.n	8001c1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e039      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <HAL_RCC_OscConfig+0x618>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d12c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d123      	bne.n	8001c1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d11b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d113      	bne.n	8001c1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	3b01      	subs	r3, #1
 8001c14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	019f800c 	.word	0x019f800c
 8001c30:	feeefffc 	.word	0xfeeefffc

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e11e      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b91      	ldr	r3, [pc, #580]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d910      	bls.n	8001c7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 020f 	bic.w	r2, r3, #15
 8001c62:	498c      	ldr	r1, [pc, #560]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e106      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d073      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d129      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c90:	4b81      	ldr	r3, [pc, #516]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0f4      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ca0:	f000 f99e 	bl	8001fe0 <RCC_GetSysClockFreqFromPLLSource>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4a7c      	ldr	r2, [pc, #496]	@ (8001e9c <HAL_RCC_ClockConfig+0x268>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d93f      	bls.n	8001d2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cae:	4b7a      	ldr	r3, [pc, #488]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d033      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12f      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cce:	4b72      	ldr	r3, [pc, #456]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cd6:	4a70      	ldr	r2, [pc, #448]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e024      	b.n	8001d2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cec:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0c6      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cfc:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0be      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d0c:	f000 f8ce 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a61      	ldr	r2, [pc, #388]	@ (8001e9c <HAL_RCC_ClockConfig+0x268>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d909      	bls.n	8001d2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d22:	4a5d      	ldr	r2, [pc, #372]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4957      	ldr	r1, [pc, #348]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d40:	f7ff f83c 	bl	8000dbc <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7ff f838 	bl	8000dbc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e095      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b43      	ldr	r3, [pc, #268]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001d8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001da0:	4b3d      	ldr	r3, [pc, #244]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001da8:	4a3b      	ldr	r2, [pc, #236]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001daa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4936      	ldr	r1, [pc, #216]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b80      	cmp	r3, #128	@ 0x80
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dca:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4a32      	ldr	r2, [pc, #200]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001dd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d21d      	bcs.n	8001e20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 020f 	bic.w	r2, r3, #15
 8001dec:	4929      	ldr	r1, [pc, #164]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df4:	f7fe ffe2 	bl	8000dbc <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe ffde 	bl	8000dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e03b      	b.n	8001e8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1ed      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4917      	ldr	r1, [pc, #92]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4a:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	490f      	ldr	r1, [pc, #60]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e5e:	f000 f825 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_RCC_ClockConfig+0x264>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490c      	ldr	r1, [pc, #48]	@ (8001ea0 <HAL_RCC_ClockConfig+0x26c>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <HAL_RCC_ClockConfig+0x270>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_RCC_ClockConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ff4e 	bl	8000d24 <HAL_InitTick>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	04c4b400 	.word	0x04c4b400
 8001ea0:	08005028 	.word	0x08005028
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d102      	bne.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e047      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e03e      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ed6:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d136      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f00:	4a1a      	ldr	r2, [pc, #104]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	4a16      	ldr	r2, [pc, #88]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0a:	68d2      	ldr	r2, [r2, #12]
 8001f0c:	0a12      	lsrs	r2, r2, #8
 8001f0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
      break;
 8001f18:	e00c      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f1a:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	0a12      	lsrs	r2, r2, #8
 8001f28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
      break;
 8001f32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0e5b      	lsrs	r3, r3, #25
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e001      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f54:	693b      	ldr	r3, [r7, #16]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	016e3600 	.word	0x016e3600

08001f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4904      	ldr	r1, [pc, #16]	@ (8001fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08005038 	.word	0x08005038

08001fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fb8:	f7ff ffda 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0adb      	lsrs	r3, r3, #11
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4904      	ldr	r1, [pc, #16]	@ (8001fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08005038 	.word	0x08005038

08001fe0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10c      	bne.n	800201e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800200e:	68d2      	ldr	r2, [r2, #12]
 8002010:	0a12      	lsrs	r2, r2, #8
 8002012:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
    break;
 800201c:	e00c      	b.n	8002038 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002028:	68d2      	ldr	r2, [r2, #12]
 800202a:	0a12      	lsrs	r2, r2, #8
 800202c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    break;
 8002036:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0e5b      	lsrs	r3, r3, #25
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40021000 	.word	0x40021000
 8002064:	016e3600 	.word	0x016e3600
 8002068:	00f42400 	.word	0x00f42400

0800206c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002074:	2300      	movs	r3, #0
 8002076:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002078:	2300      	movs	r3, #0
 800207a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8098 	beq.w	80021ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b43      	ldr	r3, [pc, #268]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b40      	ldr	r3, [pc, #256]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a3f      	ldr	r2, [pc, #252]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b6:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a39      	ldr	r2, [pc, #228]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fe7b 	bl	8000dbc <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c8:	e009      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fe77 	bl	8000dbc <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d902      	bls.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	74fb      	strb	r3, [r7, #19]
        break;
 80020dc:	e005      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020de:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ef      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d159      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020f0:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01e      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d019      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002118:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a1f      	ldr	r2, [pc, #124]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002138:	4a18      	ldr	r2, [pc, #96]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7fe fe37 	bl	8000dbc <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002150:	e00b      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fe33 	bl	8000dbc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d902      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	74fb      	strb	r3, [r7, #19]
            break;
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ec      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	4903      	ldr	r1, [pc, #12]	@ (800219c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002194:	e008      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	74bb      	strb	r3, [r7, #18]
 800219a:	e005      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a8:	7c7b      	ldrb	r3, [r7, #17]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4ba6      	ldr	r3, [pc, #664]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	4aa5      	ldr	r2, [pc, #660]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021cc:	f023 0203 	bic.w	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	499c      	ldr	r1, [pc, #624]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e8:	4b97      	ldr	r3, [pc, #604]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	f023 020c 	bic.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4994      	ldr	r1, [pc, #592]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800220a:	4b8f      	ldr	r3, [pc, #572]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002210:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	498b      	ldr	r1, [pc, #556]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800222c:	4b86      	ldr	r3, [pc, #536]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4983      	ldr	r1, [pc, #524]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224e:	4b7e      	ldr	r3, [pc, #504]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002254:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	497a      	ldr	r1, [pc, #488]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002270:	4b75      	ldr	r3, [pc, #468]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4972      	ldr	r1, [pc, #456]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002292:	4b6d      	ldr	r3, [pc, #436]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002298:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4969      	ldr	r1, [pc, #420]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b4:	4b64      	ldr	r3, [pc, #400]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4961      	ldr	r1, [pc, #388]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e4:	4958      	ldr	r1, [pc, #352]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f8:	4b53      	ldr	r3, [pc, #332]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	4950      	ldr	r1, [pc, #320]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002316:	d105      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002318:	4b4b      	ldr	r3, [pc, #300]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a4a      	ldr	r2, [pc, #296]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002322:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002330:	4b45      	ldr	r3, [pc, #276]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	4942      	ldr	r1, [pc, #264]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800234e:	d105      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002350:	4b3d      	ldr	r3, [pc, #244]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a3c      	ldr	r2, [pc, #240]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002368:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4934      	ldr	r1, [pc, #208]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002386:	d105      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b2f      	ldr	r3, [pc, #188]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a2e      	ldr	r2, [pc, #184]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	4926      	ldr	r1, [pc, #152]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c0:	4b21      	ldr	r3, [pc, #132]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a20      	ldr	r2, [pc, #128]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	4918      	ldr	r1, [pc, #96]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f6:	d105      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b13      	ldr	r3, [pc, #76]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	490a      	ldr	r1, [pc, #40]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242e:	d105      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800243c:	7cbb      	ldrb	r3, [r7, #18]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e042      	b.n	80024e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fe fb75 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2224      	movs	r2, #36	@ 0x24
 800247a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 ff30 	bl	80032fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fc61 	bl	8002d64 <UART_SetConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e01b      	b.n	80024e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 ffaf 	bl	8003440 <UART_CheckIdleState>
 80024e2:	4603      	mov	r3, r0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	2b20      	cmp	r3, #32
 8002504:	d17b      	bne.n	80025fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x26>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e074      	b.n	8002600 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2221      	movs	r2, #33	@ 0x21
 8002522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002526:	f7fe fc49 	bl	8000dbc <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Transmit+0x6c>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002560:	e030      	b.n	80025c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f001 f811 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e03d      	b.n	8002600 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002598:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	3302      	adds	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e007      	b.n	80025b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1c8      	bne.n	8002562 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2140      	movs	r1, #64	@ 0x40
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 ffda 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e006      	b.n	8002600 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800261c:	2b20      	cmp	r3, #32
 800261e:	d137      	bne.n	8002690 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Receive_IT+0x24>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e030      	b.n	8002692 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <HAL_UART_Receive_IT+0x94>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01f      	beq.n	8002680 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d018      	beq.n	8002680 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	613b      	str	r3, [r7, #16]
   return(result);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	69f9      	ldr	r1, [r7, #28]
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	61bb      	str	r3, [r7, #24]
   return(result);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e6      	bne.n	800264e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	461a      	mov	r2, r3
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fff2 	bl	8003670 <UART_Start_Receive_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	e000      	b.n	8002692 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40008000 	.word	0x40008000

080026a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0ba      	sub	sp, #232	@ 0xe8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80026ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80026ce:	4013      	ands	r3, r2
 80026d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80026d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11b      	bne.n	8002714 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d009      	beq.n	8002714 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8300 	beq.w	8002d0a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
      }
      return;
 8002712:	e2fa      	b.n	8002d0a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8123 	beq.w	8002964 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800271e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002722:	4b8d      	ldr	r3, [pc, #564]	@ (8002958 <HAL_UART_IRQHandler+0x2b8>)
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800272a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800272e:	4b8b      	ldr	r3, [pc, #556]	@ (800295c <HAL_UART_IRQHandler+0x2bc>)
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8116 	beq.w	8002964 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d011      	beq.n	8002768 <HAL_UART_IRQHandler+0xc8>
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <HAL_UART_IRQHandler+0xf8>
 8002774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2202      	movs	r2, #2
 8002786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d011      	beq.n	80027c8 <HAL_UART_IRQHandler+0x128>
 80027a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	f043 0202 	orr.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002958 <HAL_UART_IRQHandler+0x2b8>)
 80027e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fa:	f043 0208 	orr.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <HAL_UART_IRQHandler+0x196>
 8002810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00c      	beq.n	8002836 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8266 	beq.w	8002d0e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d013      	beq.n	8002876 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800284e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800285a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b40      	cmp	r3, #64	@ 0x40
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800288e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002892:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002896:	2b00      	cmp	r3, #0
 8002898:	d054      	beq.n	8002944 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f001 f80a 	bl	80038b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d146      	bne.n	800293c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3308      	adds	r3, #8
 80028b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3308      	adds	r3, #8
 80028d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1d9      	bne.n	80028ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002900:	2b00      	cmp	r3, #0
 8002902:	d017      	beq.n	8002934 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800290a:	4a15      	ldr	r2, [pc, #84]	@ (8002960 <HAL_UART_IRQHandler+0x2c0>)
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fbc5 	bl	80010a4 <HAL_DMA_Abort_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d019      	beq.n	8002954 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800292e:	4610      	mov	r0, r2
 8002930:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002932:	e00f      	b.n	8002954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9ff 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293a:	e00b      	b.n	8002954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f9fb 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002942:	e007      	b.n	8002954 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f9f7 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002952:	e1dc      	b.n	8002d0e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	bf00      	nop
    return;
 8002956:	e1da      	b.n	8002d0e <HAL_UART_IRQHandler+0x66e>
 8002958:	10000001 	.word	0x10000001
 800295c:	04000120 	.word	0x04000120
 8002960:	08003981 	.word	0x08003981

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 8170 	bne.w	8002c4e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8169 	beq.w	8002c4e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8162 	beq.w	8002c4e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	f040 80d8 	bne.w	8002b52 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80af 	beq.w	8002b18 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80029c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f080 80a7 	bcs.w	8002b18 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 8087 	bne.w	8002af6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1da      	bne.n	80029e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3308      	adds	r3, #8
 8002a38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3308      	adds	r3, #8
 8002a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e1      	bne.n	8002a32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3308      	adds	r3, #8
 8002a74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e3      	bne.n	8002a6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ac4:	f023 0310 	bic.w	r3, r3, #16
 8002ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e4      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fa7e 	bl	8000ff2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f91b 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002b16:	e0fc      	b.n	8002d12 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b22:	429a      	cmp	r2, r3
 8002b24:	f040 80f5 	bne.w	8002d12 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 80eb 	bne.w	8002d12 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8fe 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
      return;
 8002b50:	e0df      	b.n	8002d12 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80d1 	beq.w	8002d16 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80cc 	beq.w	8002d16 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ba8:	e841 2300 	strex	r3, r2, [r1]
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e4      	bne.n	8002b7e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3308      	adds	r3, #8
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002bdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e1      	bne.n	8002bb4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f023 0310 	bic.w	r3, r3, #16
 8002c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2a:	69b9      	ldr	r1, [r7, #24]
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	e841 2300 	strex	r3, r2, [r1]
 8002c32:	617b      	str	r3, [r7, #20]
   return(result);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1e4      	bne.n	8002c04 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f880 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c4c:	e063      	b.n	8002d16 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <HAL_UART_IRQHandler+0x5d8>
 8002c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f001 fbe3 	bl	800443c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c76:	e051      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d014      	beq.n	8002cae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d03a      	beq.n	8002d1a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
    }
    return;
 8002cac:	e035      	b.n	8002d1a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_UART_IRQHandler+0x62e>
 8002cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fe6c 	bl	80039a4 <UART_EndTransmit_IT>
    return;
 8002ccc:	e026      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_UART_IRQHandler+0x64e>
 8002cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f001 fbbc 	bl	8004464 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cec:	e016      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_UART_IRQHandler+0x67c>
 8002cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da0c      	bge.n	8002d1c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fba4 	bl	8004450 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d08:	e008      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002d0a:	bf00      	nop
 8002d0c:	e006      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
    return;
 8002d0e:	bf00      	nop
 8002d10:	e004      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002d12:	bf00      	nop
 8002d14:	e002      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
      return;
 8002d16:	bf00      	nop
 8002d18:	e000      	b.n	8002d1c <HAL_UART_IRQHandler+0x67c>
    return;
 8002d1a:	bf00      	nop
  }
}
 8002d1c:	37e8      	adds	r7, #232	@ 0xe8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b08c      	sub	sp, #48	@ 0x30
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4bab      	ldr	r3, [pc, #684]	@ (8003040 <UART_SetConfig+0x2dc>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4aa0      	ldr	r2, [pc, #640]	@ (8003044 <UART_SetConfig+0x2e0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002dda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	f023 010f 	bic.w	r1, r3, #15
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a91      	ldr	r2, [pc, #580]	@ (8003048 <UART_SetConfig+0x2e4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d125      	bne.n	8002e54 <UART_SetConfig+0xf0>
 8002e08:	4b90      	ldr	r3, [pc, #576]	@ (800304c <UART_SetConfig+0x2e8>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d81a      	bhi.n	8002e4c <UART_SetConfig+0xe8>
 8002e16:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <UART_SetConfig+0xb8>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e3d 	.word	0x08002e3d
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e0d6      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3a:	e0d2      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e42:	e0ce      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e4a:	e0ca      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e52:	e0c6      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7d      	ldr	r2, [pc, #500]	@ (8003050 <UART_SetConfig+0x2ec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d138      	bne.n	8002ed0 <UART_SetConfig+0x16c>
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800304c <UART_SetConfig+0x2e8>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d82d      	bhi.n	8002ec8 <UART_SetConfig+0x164>
 8002e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <UART_SetConfig+0x110>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ec9 	.word	0x08002ec9
 8002e7c:	08002ec9 	.word	0x08002ec9
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002ec9 	.word	0x08002ec9
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	08002ec9 	.word	0x08002ec9
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002ec9 	.word	0x08002ec9
 8002ea4:	08002ec1 	.word	0x08002ec1
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eae:	e098      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb6:	e094      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebe:	e090      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec6:	e08c      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ece:	e088      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a5f      	ldr	r2, [pc, #380]	@ (8003054 <UART_SetConfig+0x2f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d125      	bne.n	8002f26 <UART_SetConfig+0x1c2>
 8002eda:	4b5c      	ldr	r3, [pc, #368]	@ (800304c <UART_SetConfig+0x2e8>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ee4:	2b30      	cmp	r3, #48	@ 0x30
 8002ee6:	d016      	beq.n	8002f16 <UART_SetConfig+0x1b2>
 8002ee8:	2b30      	cmp	r3, #48	@ 0x30
 8002eea:	d818      	bhi.n	8002f1e <UART_SetConfig+0x1ba>
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d00a      	beq.n	8002f06 <UART_SetConfig+0x1a2>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d814      	bhi.n	8002f1e <UART_SetConfig+0x1ba>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <UART_SetConfig+0x19a>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d008      	beq.n	8002f0e <UART_SetConfig+0x1aa>
 8002efc:	e00f      	b.n	8002f1e <UART_SetConfig+0x1ba>
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f04:	e06d      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0c:	e069      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f14:	e065      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f16:	2308      	movs	r3, #8
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1c:	e061      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f1e:	2310      	movs	r3, #16
 8002f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f24:	e05d      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4b      	ldr	r2, [pc, #300]	@ (8003058 <UART_SetConfig+0x2f4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d125      	bne.n	8002f7c <UART_SetConfig+0x218>
 8002f30:	4b46      	ldr	r3, [pc, #280]	@ (800304c <UART_SetConfig+0x2e8>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f3c:	d016      	beq.n	8002f6c <UART_SetConfig+0x208>
 8002f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f40:	d818      	bhi.n	8002f74 <UART_SetConfig+0x210>
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d00a      	beq.n	8002f5c <UART_SetConfig+0x1f8>
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d814      	bhi.n	8002f74 <UART_SetConfig+0x210>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <UART_SetConfig+0x1f0>
 8002f4e:	2b40      	cmp	r3, #64	@ 0x40
 8002f50:	d008      	beq.n	8002f64 <UART_SetConfig+0x200>
 8002f52:	e00f      	b.n	8002f74 <UART_SetConfig+0x210>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e042      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f62:	e03e      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f64:	2304      	movs	r3, #4
 8002f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6a:	e03a      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f72:	e036      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f74:	2310      	movs	r3, #16
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f7a:	e032      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a30      	ldr	r2, [pc, #192]	@ (8003044 <UART_SetConfig+0x2e0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d12a      	bne.n	8002fdc <UART_SetConfig+0x278>
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <UART_SetConfig+0x2e8>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f94:	d01a      	beq.n	8002fcc <UART_SetConfig+0x268>
 8002f96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f9a:	d81b      	bhi.n	8002fd4 <UART_SetConfig+0x270>
 8002f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa0:	d00c      	beq.n	8002fbc <UART_SetConfig+0x258>
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa6:	d815      	bhi.n	8002fd4 <UART_SetConfig+0x270>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <UART_SetConfig+0x250>
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb0:	d008      	beq.n	8002fc4 <UART_SetConfig+0x260>
 8002fb2:	e00f      	b.n	8002fd4 <UART_SetConfig+0x270>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e012      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e00e      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e00a      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	e006      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e002      	b.n	8002fe2 <UART_SetConfig+0x27e>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <UART_SetConfig+0x2e0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	f040 80a8 	bne.w	800313e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d834      	bhi.n	8003060 <UART_SetConfig+0x2fc>
 8002ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <UART_SetConfig+0x298>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003061 	.word	0x08003061
 8003004:	08003029 	.word	0x08003029
 8003008:	08003061 	.word	0x08003061
 800300c:	0800302f 	.word	0x0800302f
 8003010:	08003061 	.word	0x08003061
 8003014:	08003061 	.word	0x08003061
 8003018:	08003061 	.word	0x08003061
 800301c:	08003037 	.word	0x08003037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7fe ffb2 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003026:	e021      	b.n	800306c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <UART_SetConfig+0x2f8>)
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800302c:	e01e      	b.n	800306c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800302e:	f7fe ff3d 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003032:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003034:	e01a      	b.n	800306c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800303c:	e016      	b.n	800306c <UART_SetConfig+0x308>
 800303e:	bf00      	nop
 8003040:	cfff69f3 	.word	0xcfff69f3
 8003044:	40008000 	.word	0x40008000
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	40004400 	.word	0x40004400
 8003054:	40004800 	.word	0x40004800
 8003058:	40004c00 	.word	0x40004c00
 800305c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800306a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 812a 	beq.w	80032c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	4a9e      	ldr	r2, [pc, #632]	@ (80032f4 <UART_SetConfig+0x590>)
 800307a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fbb3 f3f2 	udiv	r3, r3, r2
 8003086:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	429a      	cmp	r2, r3
 8003096:	d305      	bcc.n	80030a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d903      	bls.n	80030ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030aa:	e10d      	b.n	80032c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	2200      	movs	r2, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	4a8e      	ldr	r2, [pc, #568]	@ (80032f4 <UART_SetConfig+0x590>)
 80030ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ce:	f7fd f8ad 	bl	800022c <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4610      	mov	r0, r2
 80030d8:	4619      	mov	r1, r3
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	020b      	lsls	r3, r1, #8
 80030e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030e8:	0202      	lsls	r2, r0, #8
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	6849      	ldr	r1, [r1, #4]
 80030ee:	0849      	lsrs	r1, r1, #1
 80030f0:	2000      	movs	r0, #0
 80030f2:	460c      	mov	r4, r1
 80030f4:	4605      	mov	r5, r0
 80030f6:	eb12 0804 	adds.w	r8, r2, r4
 80030fa:	eb43 0905 	adc.w	r9, r3, r5
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	469a      	mov	sl, r3
 8003106:	4693      	mov	fp, r2
 8003108:	4652      	mov	r2, sl
 800310a:	465b      	mov	r3, fp
 800310c:	4640      	mov	r0, r8
 800310e:	4649      	mov	r1, r9
 8003110:	f7fd f88c 	bl	800022c <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003122:	d308      	bcc.n	8003136 <UART_SetConfig+0x3d2>
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800312a:	d204      	bcs.n	8003136 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	60da      	str	r2, [r3, #12]
 8003134:	e0c8      	b.n	80032c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800313c:	e0c4      	b.n	80032c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003146:	d167      	bne.n	8003218 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003148:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800314c:	2b08      	cmp	r3, #8
 800314e:	d828      	bhi.n	80031a2 <UART_SetConfig+0x43e>
 8003150:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <UART_SetConfig+0x3f4>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800317d 	.word	0x0800317d
 800315c:	08003185 	.word	0x08003185
 8003160:	0800318d 	.word	0x0800318d
 8003164:	080031a3 	.word	0x080031a3
 8003168:	08003193 	.word	0x08003193
 800316c:	080031a3 	.word	0x080031a3
 8003170:	080031a3 	.word	0x080031a3
 8003174:	080031a3 	.word	0x080031a3
 8003178:	0800319b 	.word	0x0800319b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe ff04 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003180:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003182:	e014      	b.n	80031ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003184:	f7fe ff16 	bl	8001fb4 <HAL_RCC_GetPCLK2Freq>
 8003188:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800318a:	e010      	b.n	80031ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b5a      	ldr	r3, [pc, #360]	@ (80032f8 <UART_SetConfig+0x594>)
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003190:	e00d      	b.n	80031ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fe8b 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003196:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003198:	e009      	b.n	80031ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031a0:	e005      	b.n	80031ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8089 	beq.w	80032c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	4a4e      	ldr	r2, [pc, #312]	@ (80032f4 <UART_SetConfig+0x590>)
 80031bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	441a      	add	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d916      	bls.n	8003210 <UART_SetConfig+0x4ac>
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d212      	bcs.n	8003210 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b29a      	uxth	r2, r3
 8003200:	8bfb      	ldrh	r3, [r7, #30]
 8003202:	4313      	orrs	r3, r2
 8003204:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	8bfa      	ldrh	r2, [r7, #30]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e05b      	b.n	80032c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003216:	e057      	b.n	80032c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003218:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800321c:	2b08      	cmp	r3, #8
 800321e:	d828      	bhi.n	8003272 <UART_SetConfig+0x50e>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <UART_SetConfig+0x4c4>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800324d 	.word	0x0800324d
 800322c:	08003255 	.word	0x08003255
 8003230:	0800325d 	.word	0x0800325d
 8003234:	08003273 	.word	0x08003273
 8003238:	08003263 	.word	0x08003263
 800323c:	08003273 	.word	0x08003273
 8003240:	08003273 	.word	0x08003273
 8003244:	08003273 	.word	0x08003273
 8003248:	0800326b 	.word	0x0800326b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fe9c 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003252:	e014      	b.n	800327e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7fe feae 	bl	8001fb4 <HAL_RCC_GetPCLK2Freq>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800325a:	e010      	b.n	800327e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <UART_SetConfig+0x594>)
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003260:	e00d      	b.n	800327e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003262:	f7fe fe23 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003268:	e009      	b.n	800327e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003270:	e005      	b.n	800327e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800327c:	bf00      	nop
    }

    if (pclk != 0U)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	4a1a      	ldr	r2, [pc, #104]	@ (80032f4 <UART_SetConfig+0x590>)
 800328a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328e:	461a      	mov	r2, r3
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	fbb3 f2f2 	udiv	r2, r3, r2
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	441a      	add	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d909      	bls.n	80032c2 <UART_SetConfig+0x55e>
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d205      	bcs.n	80032c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e002      	b.n	80032c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2200      	movs	r2, #0
 80032dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80032e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3730      	adds	r7, #48	@ 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	08005040 	.word	0x08005040
 80032f8:	00f42400 	.word	0x00f42400

080032fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01a      	beq.n	8003412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fa:	d10a      	bne.n	8003412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b098      	sub	sp, #96	@ 0x60
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003450:	f7fd fcb4 	bl	8000dbc <HAL_GetTick>
 8003454:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d12f      	bne.n	80034c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f88e 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d022      	beq.n	80034c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003492:	653b      	str	r3, [r7, #80]	@ 0x50
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800349c:	647b      	str	r3, [r7, #68]	@ 0x44
 800349e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e6      	bne.n	800347e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e063      	b.n	800358c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d149      	bne.n	8003566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034da:	2200      	movs	r2, #0
 80034dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f857 	bl	8003594 <UART_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03c      	beq.n	8003566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	623b      	str	r3, [r7, #32]
   return(result);
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
 800350c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e6      	bne.n	80034ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	60fb      	str	r3, [r7, #12]
   return(result);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800353e:	61fa      	str	r2, [r7, #28]
 8003540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	617b      	str	r3, [r7, #20]
   return(result);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e012      	b.n	800358c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3758      	adds	r7, #88	@ 0x58
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a4:	e04f      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ac:	d04b      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ae:	f7fd fc05 	bl	8000dbc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d302      	bcc.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e04e      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d037      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b80      	cmp	r3, #128	@ 0x80
 80035da:	d034      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d031      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d110      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f95b 	bl	80038b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2208      	movs	r2, #8
 8003602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e029      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d111      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f941 	bl	80038b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a0      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b0a3      	sub	sp, #140	@ 0x8c
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a2:	d10e      	bne.n	80036c2 <UART_Start_Receive_IT+0x52>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <UART_Start_Receive_IT+0x48>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80036b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036b6:	e02d      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036c0:	e028      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <UART_Start_Receive_IT+0x76>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d104      	bne.n	80036dc <UART_Start_Receive_IT+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	22ff      	movs	r2, #255	@ 0xff
 80036d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036da:	e01b      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	227f      	movs	r2, #127	@ 0x7f
 80036e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80036e4:	e016      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ee:	d10d      	bne.n	800370c <UART_Start_Receive_IT+0x9c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <UART_Start_Receive_IT+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	227f      	movs	r2, #127	@ 0x7f
 80036fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003700:	e008      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	223f      	movs	r2, #63	@ 0x3f
 8003706:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800370a:	e003      	b.n	8003714 <UART_Start_Receive_IT+0xa4>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	@ 0x22
 8003720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3308      	adds	r3, #8
 800372a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372e:	e853 3f00 	ldrex	r3, [r3]
 8003732:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003748:	673a      	str	r2, [r7, #112]	@ 0x70
 800374a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800374e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e3      	bne.n	8003724 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003764:	d14f      	bne.n	8003806 <UART_Start_Receive_IT+0x196>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	429a      	cmp	r2, r3
 8003770:	d349      	bcc.n	8003806 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377a:	d107      	bne.n	800378c <UART_Start_Receive_IT+0x11c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a47      	ldr	r2, [pc, #284]	@ (80038a4 <UART_Start_Receive_IT+0x234>)
 8003788:	675a      	str	r2, [r3, #116]	@ 0x74
 800378a:	e002      	b.n	8003792 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a46      	ldr	r2, [pc, #280]	@ (80038a8 <UART_Start_Receive_IT+0x238>)
 8003790:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01a      	beq.n	80037d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80037a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80037ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e4      	bne.n	800379a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80037f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80037f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80037fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <UART_Start_Receive_IT+0x160>
 8003804:	e046      	b.n	8003894 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380e:	d107      	bne.n	8003820 <UART_Start_Receive_IT+0x1b0>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a24      	ldr	r2, [pc, #144]	@ (80038ac <UART_Start_Receive_IT+0x23c>)
 800381c:	675a      	str	r2, [r3, #116]	@ 0x74
 800381e:	e002      	b.n	8003826 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <UART_Start_Receive_IT+0x240>)
 8003824:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d019      	beq.n	8003862 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003842:	677b      	str	r3, [r7, #116]	@ 0x74
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
 800384e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003852:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_Start_Receive_IT+0x1be>
 8003860:	e018      	b.n	8003894 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	613b      	str	r3, [r7, #16]
   return(result);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f043 0320 	orr.w	r3, r3, #32
 8003876:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	6a3a      	ldr	r2, [r7, #32]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	61bb      	str	r3, [r7, #24]
   return(result);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e6      	bne.n	8003862 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	378c      	adds	r7, #140	@ 0x8c
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	080040d1 	.word	0x080040d1
 80038a8:	08003d6d 	.word	0x08003d6d
 80038ac:	08003bb5 	.word	0x08003bb5
 80038b0:	080039fd 	.word	0x080039fd

080038b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b095      	sub	sp, #84	@ 0x54
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038da:	643b      	str	r3, [r7, #64]	@ 0x40
 80038dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e6      	bne.n	80038bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d118      	bne.n	8003960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	60bb      	str	r3, [r7, #8]
   return(result);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	647b      	str	r3, [r7, #68]	@ 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	613b      	str	r3, [r7, #16]
   return(result);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e6      	bne.n	800392e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003974:	bf00      	nop
 8003976:	3754      	adds	r7, #84	@ 0x54
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff f9ce 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	61bb      	str	r3, [r7, #24]
 80039cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	613b      	str	r3, [r7, #16]
   return(result);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e6      	bne.n	80039ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff f999 	bl	8002d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f2:	bf00      	nop
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b09c      	sub	sp, #112	@ 0x70
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a14:	2b22      	cmp	r3, #34	@ 0x22
 8003a16:	f040 80be 	bne.w	8003b96 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a28:	b2d9      	uxtb	r1, r3
 8003a2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	400a      	ands	r2, r1
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 80a1 	bne.w	8003ba6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a33      	ldr	r2, [pc, #204]	@ (8003bb0 <UART_RxISR_8BIT+0x1b4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01f      	beq.n	8003b28 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	623b      	str	r3, [r7, #32]
   return(result);
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d12e      	bne.n	8003b8e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	617b      	str	r3, [r7, #20]
   return(result);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d103      	bne.n	8003b7e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff f8e0 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b8c:	e00b      	b.n	8003ba6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fc fe1e 	bl	80007d0 <HAL_UART_RxCpltCallback>
}
 8003b94:	e007      	b.n	8003ba6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0208 	orr.w	r2, r2, #8
 8003ba4:	619a      	str	r2, [r3, #24]
}
 8003ba6:	bf00      	nop
 8003ba8:	3770      	adds	r7, #112	@ 0x70
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40008000 	.word	0x40008000

08003bb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b09c      	sub	sp, #112	@ 0x70
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003bc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bcc:	2b22      	cmp	r3, #34	@ 0x22
 8003bce:	f040 80be 	bne.w	8003d4e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003be2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003be6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003bea:	4013      	ands	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	1c9a      	adds	r2, r3, #2
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 80a1 	bne.w	8003d5e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c30:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c3c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e6      	bne.n	8003c1c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a33      	ldr	r2, [pc, #204]	@ (8003d68 <UART_RxISR_16BIT+0x1b4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01f      	beq.n	8003ce0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d018      	beq.n	8003ce0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d12e      	bne.n	8003d46 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6979      	ldr	r1, [r7, #20]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e6      	bne.n	8003cee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d103      	bne.n	8003d36 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2210      	movs	r2, #16
 8003d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff f804 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d44:	e00b      	b.n	8003d5e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc fd42 	bl	80007d0 <HAL_UART_RxCpltCallback>
}
 8003d4c:	e007      	b.n	8003d5e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699a      	ldr	r2, [r3, #24]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0208 	orr.w	r2, r2, #8
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	3770      	adds	r7, #112	@ 0x70
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40008000 	.word	0x40008000

08003d6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b0ac      	sub	sp, #176	@ 0xb0
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003d7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da2:	2b22      	cmp	r3, #34	@ 0x22
 8003da4:	f040 8183 	bne.w	80040ae <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003dae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003db2:	e126      	b.n	8004002 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	400a      	ands	r2, r1
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d053      	beq.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f043 0201 	orr.w	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d011      	beq.n	8003e66 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2202      	movs	r2, #2
 8003e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d011      	beq.n	8003e96 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2204      	movs	r2, #4
 8003e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	f043 0202 	orr.w	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fe ff49 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 80a3 	bne.w	8004002 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ee0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003ee4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e4      	bne.n	8003ebc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f1a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003f1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003f20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e1      	bne.n	8003ef2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a60      	ldr	r2, [pc, #384]	@ (80040c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d021      	beq.n	8003f90 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01a      	beq.n	8003f90 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f7e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e4      	bne.n	8003f5a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d130      	bne.n	8003ffa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	f023 0310 	bic.w	r3, r3, #16
 8003fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e4      	bne.n	8003f9e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d103      	bne.n	8003fea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fe feaa 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003ff8:	e00e      	b.n	8004018 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fbe8 	bl	80007d0 <HAL_UART_RxCpltCallback>
        break;
 8004000:	e00a      	b.n	8004018 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004002:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800400a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	f47f aece 	bne.w	8003db4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800401e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004022:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004026:	2b00      	cmp	r3, #0
 8004028:	d049      	beq.n	80040be <UART_RxISR_8BIT_FIFOEN+0x352>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004030:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004034:	429a      	cmp	r2, r3
 8004036:	d242      	bcs.n	80040be <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	61fb      	str	r3, [r7, #28]
   return(result);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800405c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e3      	bne.n	8004038 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004074:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	60bb      	str	r3, [r7, #8]
   return(result);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f043 0320 	orr.w	r3, r3, #32
 800408a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e4      	bne.n	8004076 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040ac:	e007      	b.n	80040be <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	619a      	str	r2, [r3, #24]
}
 80040be:	bf00      	nop
 80040c0:	37b0      	adds	r7, #176	@ 0xb0
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40008000 	.word	0x40008000
 80040cc:	080039fd 	.word	0x080039fd

080040d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b0ae      	sub	sp, #184	@ 0xb8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80040de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004106:	2b22      	cmp	r3, #34	@ 0x22
 8004108:	f040 8187 	bne.w	800441a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004112:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004116:	e12a      	b.n	800436e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800412a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800412e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004132:	4013      	ands	r3, r2
 8004134:	b29a      	uxth	r2, r3
 8004136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800413a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	2b00      	cmp	r3, #0
 800416c:	d053      	beq.n	8004216 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800416e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <UART_RxISR_16BIT_FIFOEN+0xce>
 800417a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800419e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80041aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2202      	movs	r2, #2
 80041bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f043 0204 	orr.w	r2, r3, #4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d011      	beq.n	80041fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80041da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2204      	movs	r2, #4
 80041ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f4:	f043 0202 	orr.w	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fd95 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 80a5 	bne.w	800436e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800424a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800424e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e2      	bne.n	8004224 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800426e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004286:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004288:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800428c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e1      	bne.n	800425e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a60      	ldr	r2, [pc, #384]	@ (8004434 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d021      	beq.n	80042fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e4      	bne.n	80042c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d130      	bne.n	8004366 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
 800432e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e4      	bne.n	800430a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d103      	bne.n	8004356 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2210      	movs	r2, #16
 8004354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe fcf4 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004364:	e00e      	b.n	8004384 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc fa32 	bl	80007d0 <HAL_UART_RxCpltCallback>
        break;
 800436c:	e00a      	b.n	8004384 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800436e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8004376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	f47f aeca 	bne.w	8004118 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800438a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800438e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004392:	2b00      	cmp	r3, #0
 8004394:	d049      	beq.n	800442a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800439c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d242      	bcs.n	800442a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	623b      	str	r3, [r7, #32]
   return(result);
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80043c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e3      	bne.n	80043a4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a16      	ldr	r2, [pc, #88]	@ (8004438 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80043e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	617b      	str	r3, [r7, #20]
   return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e4      	bne.n	80043e2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004418:	e007      	b.n	800442a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0208 	orr.w	r2, r2, #8
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	37b8      	adds	r7, #184	@ 0xb8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40008000 	.word	0x40008000
 8004438:	08003bb5 	.word	0x08003bb5

0800443c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_UARTEx_DisableFifoMode+0x16>
 800448a:	2302      	movs	r3, #2
 800448c:	e027      	b.n	80044de <HAL_UARTEx_DisableFifoMode+0x66>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2224      	movs	r2, #36	@ 0x24
 800449a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80044bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044fe:	2302      	movs	r3, #2
 8004500:	e02d      	b.n	800455e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2224      	movs	r2, #36	@ 0x24
 800450e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f850 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800457a:	2302      	movs	r3, #2
 800457c:	e02d      	b.n	80045da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	@ 0x24
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f812 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004604:	e031      	b.n	800466a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004606:	2308      	movs	r3, #8
 8004608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800460a:	2308      	movs	r3, #8
 800460c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	0e5b      	lsrs	r3, r3, #25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	0f5b      	lsrs	r3, r3, #29
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	7b3a      	ldrb	r2, [r7, #12]
 8004632:	4911      	ldr	r1, [pc, #68]	@ (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004634:	5c8a      	ldrb	r2, [r1, r2]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800463a:	7b3a      	ldrb	r2, [r7, #12]
 800463c:	490f      	ldr	r1, [pc, #60]	@ (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800463e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004640:	fb93 f3f2 	sdiv	r3, r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	7b7a      	ldrb	r2, [r7, #13]
 8004650:	4909      	ldr	r1, [pc, #36]	@ (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004652:	5c8a      	ldrb	r2, [r1, r2]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004658:	7b7a      	ldrb	r2, [r7, #13]
 800465a:	4908      	ldr	r1, [pc, #32]	@ (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800465c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800465e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	08005058 	.word	0x08005058
 800467c:	08005060 	.word	0x08005060

08004680 <std>:
 8004680:	2300      	movs	r3, #0
 8004682:	b510      	push	{r4, lr}
 8004684:	4604      	mov	r4, r0
 8004686:	e9c0 3300 	strd	r3, r3, [r0]
 800468a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800468e:	6083      	str	r3, [r0, #8]
 8004690:	8181      	strh	r1, [r0, #12]
 8004692:	6643      	str	r3, [r0, #100]	@ 0x64
 8004694:	81c2      	strh	r2, [r0, #14]
 8004696:	6183      	str	r3, [r0, #24]
 8004698:	4619      	mov	r1, r3
 800469a:	2208      	movs	r2, #8
 800469c:	305c      	adds	r0, #92	@ 0x5c
 800469e:	f000 f9e7 	bl	8004a70 <memset>
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <std+0x58>)
 80046a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <std+0x5c>)
 80046a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <std+0x60>)
 80046ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <std+0x64>)
 80046b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <std+0x68>)
 80046b4:	6224      	str	r4, [r4, #32]
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d006      	beq.n	80046c8 <std+0x48>
 80046ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046be:	4294      	cmp	r4, r2
 80046c0:	d002      	beq.n	80046c8 <std+0x48>
 80046c2:	33d0      	adds	r3, #208	@ 0xd0
 80046c4:	429c      	cmp	r4, r3
 80046c6:	d105      	bne.n	80046d4 <std+0x54>
 80046c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d0:	f000 ba46 	b.w	8004b60 <__retarget_lock_init_recursive>
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	bf00      	nop
 80046d8:	080048c1 	.word	0x080048c1
 80046dc:	080048e3 	.word	0x080048e3
 80046e0:	0800491b 	.word	0x0800491b
 80046e4:	0800493f 	.word	0x0800493f
 80046e8:	200005b8 	.word	0x200005b8

080046ec <stdio_exit_handler>:
 80046ec:	4a02      	ldr	r2, [pc, #8]	@ (80046f8 <stdio_exit_handler+0xc>)
 80046ee:	4903      	ldr	r1, [pc, #12]	@ (80046fc <stdio_exit_handler+0x10>)
 80046f0:	4803      	ldr	r0, [pc, #12]	@ (8004700 <stdio_exit_handler+0x14>)
 80046f2:	f000 b869 	b.w	80047c8 <_fwalk_sglue>
 80046f6:	bf00      	nop
 80046f8:	20000010 	.word	0x20000010
 80046fc:	08004e61 	.word	0x08004e61
 8004700:	20000020 	.word	0x20000020

08004704 <cleanup_stdio>:
 8004704:	6841      	ldr	r1, [r0, #4]
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <cleanup_stdio+0x34>)
 8004708:	4299      	cmp	r1, r3
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	d001      	beq.n	8004714 <cleanup_stdio+0x10>
 8004710:	f000 fba6 	bl	8004e60 <_fflush_r>
 8004714:	68a1      	ldr	r1, [r4, #8]
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <cleanup_stdio+0x38>)
 8004718:	4299      	cmp	r1, r3
 800471a:	d002      	beq.n	8004722 <cleanup_stdio+0x1e>
 800471c:	4620      	mov	r0, r4
 800471e:	f000 fb9f 	bl	8004e60 <_fflush_r>
 8004722:	68e1      	ldr	r1, [r4, #12]
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <cleanup_stdio+0x3c>)
 8004726:	4299      	cmp	r1, r3
 8004728:	d004      	beq.n	8004734 <cleanup_stdio+0x30>
 800472a:	4620      	mov	r0, r4
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004730:	f000 bb96 	b.w	8004e60 <_fflush_r>
 8004734:	bd10      	pop	{r4, pc}
 8004736:	bf00      	nop
 8004738:	200005b8 	.word	0x200005b8
 800473c:	20000620 	.word	0x20000620
 8004740:	20000688 	.word	0x20000688

08004744 <global_stdio_init.part.0>:
 8004744:	b510      	push	{r4, lr}
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <global_stdio_init.part.0+0x30>)
 8004748:	4c0b      	ldr	r4, [pc, #44]	@ (8004778 <global_stdio_init.part.0+0x34>)
 800474a:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <global_stdio_init.part.0+0x38>)
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	4620      	mov	r0, r4
 8004750:	2200      	movs	r2, #0
 8004752:	2104      	movs	r1, #4
 8004754:	f7ff ff94 	bl	8004680 <std>
 8004758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800475c:	2201      	movs	r2, #1
 800475e:	2109      	movs	r1, #9
 8004760:	f7ff ff8e 	bl	8004680 <std>
 8004764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004768:	2202      	movs	r2, #2
 800476a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800476e:	2112      	movs	r1, #18
 8004770:	f7ff bf86 	b.w	8004680 <std>
 8004774:	200006f0 	.word	0x200006f0
 8004778:	200005b8 	.word	0x200005b8
 800477c:	080046ed 	.word	0x080046ed

08004780 <__sfp_lock_acquire>:
 8004780:	4801      	ldr	r0, [pc, #4]	@ (8004788 <__sfp_lock_acquire+0x8>)
 8004782:	f000 b9ee 	b.w	8004b62 <__retarget_lock_acquire_recursive>
 8004786:	bf00      	nop
 8004788:	200006f9 	.word	0x200006f9

0800478c <__sfp_lock_release>:
 800478c:	4801      	ldr	r0, [pc, #4]	@ (8004794 <__sfp_lock_release+0x8>)
 800478e:	f000 b9e9 	b.w	8004b64 <__retarget_lock_release_recursive>
 8004792:	bf00      	nop
 8004794:	200006f9 	.word	0x200006f9

08004798 <__sinit>:
 8004798:	b510      	push	{r4, lr}
 800479a:	4604      	mov	r4, r0
 800479c:	f7ff fff0 	bl	8004780 <__sfp_lock_acquire>
 80047a0:	6a23      	ldr	r3, [r4, #32]
 80047a2:	b11b      	cbz	r3, 80047ac <__sinit+0x14>
 80047a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a8:	f7ff bff0 	b.w	800478c <__sfp_lock_release>
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <__sinit+0x28>)
 80047ae:	6223      	str	r3, [r4, #32]
 80047b0:	4b04      	ldr	r3, [pc, #16]	@ (80047c4 <__sinit+0x2c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f5      	bne.n	80047a4 <__sinit+0xc>
 80047b8:	f7ff ffc4 	bl	8004744 <global_stdio_init.part.0>
 80047bc:	e7f2      	b.n	80047a4 <__sinit+0xc>
 80047be:	bf00      	nop
 80047c0:	08004705 	.word	0x08004705
 80047c4:	200006f0 	.word	0x200006f0

080047c8 <_fwalk_sglue>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	4607      	mov	r7, r0
 80047ce:	4688      	mov	r8, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	2600      	movs	r6, #0
 80047d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047d8:	f1b9 0901 	subs.w	r9, r9, #1
 80047dc:	d505      	bpl.n	80047ea <_fwalk_sglue+0x22>
 80047de:	6824      	ldr	r4, [r4, #0]
 80047e0:	2c00      	cmp	r4, #0
 80047e2:	d1f7      	bne.n	80047d4 <_fwalk_sglue+0xc>
 80047e4:	4630      	mov	r0, r6
 80047e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ea:	89ab      	ldrh	r3, [r5, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d907      	bls.n	8004800 <_fwalk_sglue+0x38>
 80047f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047f4:	3301      	adds	r3, #1
 80047f6:	d003      	beq.n	8004800 <_fwalk_sglue+0x38>
 80047f8:	4629      	mov	r1, r5
 80047fa:	4638      	mov	r0, r7
 80047fc:	47c0      	blx	r8
 80047fe:	4306      	orrs	r6, r0
 8004800:	3568      	adds	r5, #104	@ 0x68
 8004802:	e7e9      	b.n	80047d8 <_fwalk_sglue+0x10>

08004804 <_puts_r>:
 8004804:	6a03      	ldr	r3, [r0, #32]
 8004806:	b570      	push	{r4, r5, r6, lr}
 8004808:	6884      	ldr	r4, [r0, #8]
 800480a:	4605      	mov	r5, r0
 800480c:	460e      	mov	r6, r1
 800480e:	b90b      	cbnz	r3, 8004814 <_puts_r+0x10>
 8004810:	f7ff ffc2 	bl	8004798 <__sinit>
 8004814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004816:	07db      	lsls	r3, r3, #31
 8004818:	d405      	bmi.n	8004826 <_puts_r+0x22>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	0598      	lsls	r0, r3, #22
 800481e:	d402      	bmi.n	8004826 <_puts_r+0x22>
 8004820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004822:	f000 f99e 	bl	8004b62 <__retarget_lock_acquire_recursive>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	0719      	lsls	r1, r3, #28
 800482a:	d502      	bpl.n	8004832 <_puts_r+0x2e>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d135      	bne.n	800489e <_puts_r+0x9a>
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f8c5 	bl	80049c4 <__swsetup_r>
 800483a:	b380      	cbz	r0, 800489e <_puts_r+0x9a>
 800483c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004840:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004842:	07da      	lsls	r2, r3, #31
 8004844:	d405      	bmi.n	8004852 <_puts_r+0x4e>
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	059b      	lsls	r3, r3, #22
 800484a:	d402      	bmi.n	8004852 <_puts_r+0x4e>
 800484c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800484e:	f000 f989 	bl	8004b64 <__retarget_lock_release_recursive>
 8004852:	4628      	mov	r0, r5
 8004854:	bd70      	pop	{r4, r5, r6, pc}
 8004856:	2b00      	cmp	r3, #0
 8004858:	da04      	bge.n	8004864 <_puts_r+0x60>
 800485a:	69a2      	ldr	r2, [r4, #24]
 800485c:	429a      	cmp	r2, r3
 800485e:	dc17      	bgt.n	8004890 <_puts_r+0x8c>
 8004860:	290a      	cmp	r1, #10
 8004862:	d015      	beq.n	8004890 <_puts_r+0x8c>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	7019      	strb	r1, [r3, #0]
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004872:	3b01      	subs	r3, #1
 8004874:	60a3      	str	r3, [r4, #8]
 8004876:	2900      	cmp	r1, #0
 8004878:	d1ed      	bne.n	8004856 <_puts_r+0x52>
 800487a:	2b00      	cmp	r3, #0
 800487c:	da11      	bge.n	80048a2 <_puts_r+0x9e>
 800487e:	4622      	mov	r2, r4
 8004880:	210a      	movs	r1, #10
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f85f 	bl	8004946 <__swbuf_r>
 8004888:	3001      	adds	r0, #1
 800488a:	d0d7      	beq.n	800483c <_puts_r+0x38>
 800488c:	250a      	movs	r5, #10
 800488e:	e7d7      	b.n	8004840 <_puts_r+0x3c>
 8004890:	4622      	mov	r2, r4
 8004892:	4628      	mov	r0, r5
 8004894:	f000 f857 	bl	8004946 <__swbuf_r>
 8004898:	3001      	adds	r0, #1
 800489a:	d1e7      	bne.n	800486c <_puts_r+0x68>
 800489c:	e7ce      	b.n	800483c <_puts_r+0x38>
 800489e:	3e01      	subs	r6, #1
 80048a0:	e7e4      	b.n	800486c <_puts_r+0x68>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	220a      	movs	r2, #10
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	e7ee      	b.n	800488c <_puts_r+0x88>
	...

080048b0 <puts>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	@ (80048bc <puts+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7ff bfa5 	b.w	8004804 <_puts_r>
 80048ba:	bf00      	nop
 80048bc:	2000001c 	.word	0x2000001c

080048c0 <__sread>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	460c      	mov	r4, r1
 80048c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c8:	f000 f8fc 	bl	8004ac4 <_read_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	bfab      	itete	ge
 80048d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048d2:	89a3      	ldrhlt	r3, [r4, #12]
 80048d4:	181b      	addge	r3, r3, r0
 80048d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048da:	bfac      	ite	ge
 80048dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048de:	81a3      	strhlt	r3, [r4, #12]
 80048e0:	bd10      	pop	{r4, pc}

080048e2 <__swrite>:
 80048e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	461f      	mov	r7, r3
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	05db      	lsls	r3, r3, #23
 80048ec:	4605      	mov	r5, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4616      	mov	r6, r2
 80048f2:	d505      	bpl.n	8004900 <__swrite+0x1e>
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	2302      	movs	r3, #2
 80048fa:	2200      	movs	r2, #0
 80048fc:	f000 f8d0 	bl	8004aa0 <_lseek_r>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	4632      	mov	r2, r6
 800490e:	463b      	mov	r3, r7
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	f000 b8e7 	b.w	8004ae8 <_write_r>

0800491a <__sseek>:
 800491a:	b510      	push	{r4, lr}
 800491c:	460c      	mov	r4, r1
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 f8bd 	bl	8004aa0 <_lseek_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	bf15      	itete	ne
 800492c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800492e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004936:	81a3      	strheq	r3, [r4, #12]
 8004938:	bf18      	it	ne
 800493a:	81a3      	strhne	r3, [r4, #12]
 800493c:	bd10      	pop	{r4, pc}

0800493e <__sclose>:
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 b89d 	b.w	8004a80 <_close_r>

08004946 <__swbuf_r>:
 8004946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004948:	460e      	mov	r6, r1
 800494a:	4614      	mov	r4, r2
 800494c:	4605      	mov	r5, r0
 800494e:	b118      	cbz	r0, 8004958 <__swbuf_r+0x12>
 8004950:	6a03      	ldr	r3, [r0, #32]
 8004952:	b90b      	cbnz	r3, 8004958 <__swbuf_r+0x12>
 8004954:	f7ff ff20 	bl	8004798 <__sinit>
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	071a      	lsls	r2, r3, #28
 8004960:	d501      	bpl.n	8004966 <__swbuf_r+0x20>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	b943      	cbnz	r3, 8004978 <__swbuf_r+0x32>
 8004966:	4621      	mov	r1, r4
 8004968:	4628      	mov	r0, r5
 800496a:	f000 f82b 	bl	80049c4 <__swsetup_r>
 800496e:	b118      	cbz	r0, 8004978 <__swbuf_r+0x32>
 8004970:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004974:	4638      	mov	r0, r7
 8004976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	6922      	ldr	r2, [r4, #16]
 800497c:	1a98      	subs	r0, r3, r2
 800497e:	6963      	ldr	r3, [r4, #20]
 8004980:	b2f6      	uxtb	r6, r6
 8004982:	4283      	cmp	r3, r0
 8004984:	4637      	mov	r7, r6
 8004986:	dc05      	bgt.n	8004994 <__swbuf_r+0x4e>
 8004988:	4621      	mov	r1, r4
 800498a:	4628      	mov	r0, r5
 800498c:	f000 fa68 	bl	8004e60 <_fflush_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	d1ed      	bne.n	8004970 <__swbuf_r+0x2a>
 8004994:	68a3      	ldr	r3, [r4, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	60a3      	str	r3, [r4, #8]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	701e      	strb	r6, [r3, #0]
 80049a2:	6962      	ldr	r2, [r4, #20]
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d004      	beq.n	80049b4 <__swbuf_r+0x6e>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	07db      	lsls	r3, r3, #31
 80049ae:	d5e1      	bpl.n	8004974 <__swbuf_r+0x2e>
 80049b0:	2e0a      	cmp	r6, #10
 80049b2:	d1df      	bne.n	8004974 <__swbuf_r+0x2e>
 80049b4:	4621      	mov	r1, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	f000 fa52 	bl	8004e60 <_fflush_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	d0d9      	beq.n	8004974 <__swbuf_r+0x2e>
 80049c0:	e7d6      	b.n	8004970 <__swbuf_r+0x2a>
	...

080049c4 <__swsetup_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4b29      	ldr	r3, [pc, #164]	@ (8004a6c <__swsetup_r+0xa8>)
 80049c8:	4605      	mov	r5, r0
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	460c      	mov	r4, r1
 80049ce:	b118      	cbz	r0, 80049d8 <__swsetup_r+0x14>
 80049d0:	6a03      	ldr	r3, [r0, #32]
 80049d2:	b90b      	cbnz	r3, 80049d8 <__swsetup_r+0x14>
 80049d4:	f7ff fee0 	bl	8004798 <__sinit>
 80049d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049dc:	0719      	lsls	r1, r3, #28
 80049de:	d422      	bmi.n	8004a26 <__swsetup_r+0x62>
 80049e0:	06da      	lsls	r2, r3, #27
 80049e2:	d407      	bmi.n	80049f4 <__swsetup_r+0x30>
 80049e4:	2209      	movs	r2, #9
 80049e6:	602a      	str	r2, [r5, #0]
 80049e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049f2:	e033      	b.n	8004a5c <__swsetup_r+0x98>
 80049f4:	0758      	lsls	r0, r3, #29
 80049f6:	d512      	bpl.n	8004a1e <__swsetup_r+0x5a>
 80049f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049fa:	b141      	cbz	r1, 8004a0e <__swsetup_r+0x4a>
 80049fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a00:	4299      	cmp	r1, r3
 8004a02:	d002      	beq.n	8004a0a <__swsetup_r+0x46>
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f8af 	bl	8004b68 <_free_r>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	2300      	movs	r3, #0
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	b94b      	cbnz	r3, 8004a3e <__swsetup_r+0x7a>
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a34:	d003      	beq.n	8004a3e <__swsetup_r+0x7a>
 8004a36:	4621      	mov	r1, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 fa5f 	bl	8004efc <__smakebuf_r>
 8004a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a42:	f013 0201 	ands.w	r2, r3, #1
 8004a46:	d00a      	beq.n	8004a5e <__swsetup_r+0x9a>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	60a2      	str	r2, [r4, #8]
 8004a4c:	6962      	ldr	r2, [r4, #20]
 8004a4e:	4252      	negs	r2, r2
 8004a50:	61a2      	str	r2, [r4, #24]
 8004a52:	6922      	ldr	r2, [r4, #16]
 8004a54:	b942      	cbnz	r2, 8004a68 <__swsetup_r+0xa4>
 8004a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a5a:	d1c5      	bne.n	80049e8 <__swsetup_r+0x24>
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
 8004a5e:	0799      	lsls	r1, r3, #30
 8004a60:	bf58      	it	pl
 8004a62:	6962      	ldrpl	r2, [r4, #20]
 8004a64:	60a2      	str	r2, [r4, #8]
 8004a66:	e7f4      	b.n	8004a52 <__swsetup_r+0x8e>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7f7      	b.n	8004a5c <__swsetup_r+0x98>
 8004a6c:	2000001c 	.word	0x2000001c

08004a70 <memset>:
 8004a70:	4402      	add	r2, r0
 8004a72:	4603      	mov	r3, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <_close_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d06      	ldr	r5, [pc, #24]	@ (8004a9c <_close_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	f7fb ff53 	bl	8000936 <_close>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_close_r+0x1a>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_close_r+0x1a>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	200006f4 	.word	0x200006f4

08004aa0 <_lseek_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	@ (8004ac0 <_lseek_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fb ff68 	bl	8000984 <_lseek>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_lseek_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_lseek_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	200006f4 	.word	0x200006f4

08004ac4 <_read_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	@ (8004ae4 <_read_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7fb fef6 	bl	80008c4 <_read>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_read_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_read_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	200006f4 	.word	0x200006f4

08004ae8 <_write_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	4d07      	ldr	r5, [pc, #28]	@ (8004b08 <_write_r+0x20>)
 8004aec:	4604      	mov	r4, r0
 8004aee:	4608      	mov	r0, r1
 8004af0:	4611      	mov	r1, r2
 8004af2:	2200      	movs	r2, #0
 8004af4:	602a      	str	r2, [r5, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f7fb ff01 	bl	80008fe <_write>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_write_r+0x1e>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_write_r+0x1e>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	200006f4 	.word	0x200006f4

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	@ (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000001c 	.word	0x2000001c

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	@ (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fa54 	bl	8004fd8 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08005070 	.word	0x08005070
 8004b54:	08005070 	.word	0x08005070
 8004b58:	08005070 	.word	0x08005070
 8004b5c:	08005074 	.word	0x08005074

08004b60 <__retarget_lock_init_recursive>:
 8004b60:	4770      	bx	lr

08004b62 <__retarget_lock_acquire_recursive>:
 8004b62:	4770      	bx	lr

08004b64 <__retarget_lock_release_recursive>:
 8004b64:	4770      	bx	lr
	...

08004b68 <_free_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	d041      	beq.n	8004bf4 <_free_r+0x8c>
 8004b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b74:	1f0c      	subs	r4, r1, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfb8      	it	lt
 8004b7a:	18e4      	addlt	r4, r4, r3
 8004b7c:	f000 f8e0 	bl	8004d40 <__malloc_lock>
 8004b80:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <_free_r+0x90>)
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	b933      	cbnz	r3, 8004b94 <_free_r+0x2c>
 8004b86:	6063      	str	r3, [r4, #4]
 8004b88:	6014      	str	r4, [r2, #0]
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b90:	f000 b8dc 	b.w	8004d4c <__malloc_unlock>
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	d908      	bls.n	8004baa <_free_r+0x42>
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	1821      	adds	r1, r4, r0
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	bf01      	itttt	eq
 8004ba0:	6819      	ldreq	r1, [r3, #0]
 8004ba2:	685b      	ldreq	r3, [r3, #4]
 8004ba4:	1809      	addeq	r1, r1, r0
 8004ba6:	6021      	streq	r1, [r4, #0]
 8004ba8:	e7ed      	b.n	8004b86 <_free_r+0x1e>
 8004baa:	461a      	mov	r2, r3
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b10b      	cbz	r3, 8004bb4 <_free_r+0x4c>
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d9fa      	bls.n	8004baa <_free_r+0x42>
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	1850      	adds	r0, r2, r1
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d10b      	bne.n	8004bd4 <_free_r+0x6c>
 8004bbc:	6820      	ldr	r0, [r4, #0]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	1850      	adds	r0, r2, r1
 8004bc2:	4283      	cmp	r3, r0
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	d1e0      	bne.n	8004b8a <_free_r+0x22>
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	6053      	str	r3, [r2, #4]
 8004bce:	4408      	add	r0, r1
 8004bd0:	6010      	str	r0, [r2, #0]
 8004bd2:	e7da      	b.n	8004b8a <_free_r+0x22>
 8004bd4:	d902      	bls.n	8004bdc <_free_r+0x74>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	e7d6      	b.n	8004b8a <_free_r+0x22>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf04      	itt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	bf04      	itt	eq
 8004bec:	1809      	addeq	r1, r1, r0
 8004bee:	6021      	streq	r1, [r4, #0]
 8004bf0:	6054      	str	r4, [r2, #4]
 8004bf2:	e7ca      	b.n	8004b8a <_free_r+0x22>
 8004bf4:	bd38      	pop	{r3, r4, r5, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000700 	.word	0x20000700

08004bfc <sbrk_aligned>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004c3c <sbrk_aligned+0x40>)
 8004c00:	460c      	mov	r4, r1
 8004c02:	6831      	ldr	r1, [r6, #0]
 8004c04:	4605      	mov	r5, r0
 8004c06:	b911      	cbnz	r1, 8004c0e <sbrk_aligned+0x12>
 8004c08:	f000 f9d6 	bl	8004fb8 <_sbrk_r>
 8004c0c:	6030      	str	r0, [r6, #0]
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 f9d1 	bl	8004fb8 <_sbrk_r>
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	d103      	bne.n	8004c22 <sbrk_aligned+0x26>
 8004c1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c1e:	4620      	mov	r0, r4
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	1cc4      	adds	r4, r0, #3
 8004c24:	f024 0403 	bic.w	r4, r4, #3
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d0f8      	beq.n	8004c1e <sbrk_aligned+0x22>
 8004c2c:	1a21      	subs	r1, r4, r0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 f9c2 	bl	8004fb8 <_sbrk_r>
 8004c34:	3001      	adds	r0, #1
 8004c36:	d1f2      	bne.n	8004c1e <sbrk_aligned+0x22>
 8004c38:	e7ef      	b.n	8004c1a <sbrk_aligned+0x1e>
 8004c3a:	bf00      	nop
 8004c3c:	200006fc 	.word	0x200006fc

08004c40 <_malloc_r>:
 8004c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c44:	1ccd      	adds	r5, r1, #3
 8004c46:	f025 0503 	bic.w	r5, r5, #3
 8004c4a:	3508      	adds	r5, #8
 8004c4c:	2d0c      	cmp	r5, #12
 8004c4e:	bf38      	it	cc
 8004c50:	250c      	movcc	r5, #12
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	4606      	mov	r6, r0
 8004c56:	db01      	blt.n	8004c5c <_malloc_r+0x1c>
 8004c58:	42a9      	cmp	r1, r5
 8004c5a:	d904      	bls.n	8004c66 <_malloc_r+0x26>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	2000      	movs	r0, #0
 8004c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d3c <_malloc_r+0xfc>
 8004c6a:	f000 f869 	bl	8004d40 <__malloc_lock>
 8004c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c72:	461c      	mov	r4, r3
 8004c74:	bb44      	cbnz	r4, 8004cc8 <_malloc_r+0x88>
 8004c76:	4629      	mov	r1, r5
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f7ff ffbf 	bl	8004bfc <sbrk_aligned>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	4604      	mov	r4, r0
 8004c82:	d158      	bne.n	8004d36 <_malloc_r+0xf6>
 8004c84:	f8d8 4000 	ldr.w	r4, [r8]
 8004c88:	4627      	mov	r7, r4
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d143      	bne.n	8004d16 <_malloc_r+0xd6>
 8004c8e:	2c00      	cmp	r4, #0
 8004c90:	d04b      	beq.n	8004d2a <_malloc_r+0xea>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	4639      	mov	r1, r7
 8004c96:	4630      	mov	r0, r6
 8004c98:	eb04 0903 	add.w	r9, r4, r3
 8004c9c:	f000 f98c 	bl	8004fb8 <_sbrk_r>
 8004ca0:	4581      	cmp	r9, r0
 8004ca2:	d142      	bne.n	8004d2a <_malloc_r+0xea>
 8004ca4:	6821      	ldr	r1, [r4, #0]
 8004ca6:	1a6d      	subs	r5, r5, r1
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4630      	mov	r0, r6
 8004cac:	f7ff ffa6 	bl	8004bfc <sbrk_aligned>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d03a      	beq.n	8004d2a <_malloc_r+0xea>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	442b      	add	r3, r5
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	f8d8 3000 	ldr.w	r3, [r8]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	bb62      	cbnz	r2, 8004d1c <_malloc_r+0xdc>
 8004cc2:	f8c8 7000 	str.w	r7, [r8]
 8004cc6:	e00f      	b.n	8004ce8 <_malloc_r+0xa8>
 8004cc8:	6822      	ldr	r2, [r4, #0]
 8004cca:	1b52      	subs	r2, r2, r5
 8004ccc:	d420      	bmi.n	8004d10 <_malloc_r+0xd0>
 8004cce:	2a0b      	cmp	r2, #11
 8004cd0:	d917      	bls.n	8004d02 <_malloc_r+0xc2>
 8004cd2:	1961      	adds	r1, r4, r5
 8004cd4:	42a3      	cmp	r3, r4
 8004cd6:	6025      	str	r5, [r4, #0]
 8004cd8:	bf18      	it	ne
 8004cda:	6059      	strne	r1, [r3, #4]
 8004cdc:	6863      	ldr	r3, [r4, #4]
 8004cde:	bf08      	it	eq
 8004ce0:	f8c8 1000 	streq.w	r1, [r8]
 8004ce4:	5162      	str	r2, [r4, r5]
 8004ce6:	604b      	str	r3, [r1, #4]
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f82f 	bl	8004d4c <__malloc_unlock>
 8004cee:	f104 000b 	add.w	r0, r4, #11
 8004cf2:	1d23      	adds	r3, r4, #4
 8004cf4:	f020 0007 	bic.w	r0, r0, #7
 8004cf8:	1ac2      	subs	r2, r0, r3
 8004cfa:	bf1c      	itt	ne
 8004cfc:	1a1b      	subne	r3, r3, r0
 8004cfe:	50a3      	strne	r3, [r4, r2]
 8004d00:	e7af      	b.n	8004c62 <_malloc_r+0x22>
 8004d02:	6862      	ldr	r2, [r4, #4]
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	bf0c      	ite	eq
 8004d08:	f8c8 2000 	streq.w	r2, [r8]
 8004d0c:	605a      	strne	r2, [r3, #4]
 8004d0e:	e7eb      	b.n	8004ce8 <_malloc_r+0xa8>
 8004d10:	4623      	mov	r3, r4
 8004d12:	6864      	ldr	r4, [r4, #4]
 8004d14:	e7ae      	b.n	8004c74 <_malloc_r+0x34>
 8004d16:	463c      	mov	r4, r7
 8004d18:	687f      	ldr	r7, [r7, #4]
 8004d1a:	e7b6      	b.n	8004c8a <_malloc_r+0x4a>
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d1fb      	bne.n	8004d1c <_malloc_r+0xdc>
 8004d24:	2300      	movs	r3, #0
 8004d26:	6053      	str	r3, [r2, #4]
 8004d28:	e7de      	b.n	8004ce8 <_malloc_r+0xa8>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6033      	str	r3, [r6, #0]
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f000 f80c 	bl	8004d4c <__malloc_unlock>
 8004d34:	e794      	b.n	8004c60 <_malloc_r+0x20>
 8004d36:	6005      	str	r5, [r0, #0]
 8004d38:	e7d6      	b.n	8004ce8 <_malloc_r+0xa8>
 8004d3a:	bf00      	nop
 8004d3c:	20000700 	.word	0x20000700

08004d40 <__malloc_lock>:
 8004d40:	4801      	ldr	r0, [pc, #4]	@ (8004d48 <__malloc_lock+0x8>)
 8004d42:	f7ff bf0e 	b.w	8004b62 <__retarget_lock_acquire_recursive>
 8004d46:	bf00      	nop
 8004d48:	200006f8 	.word	0x200006f8

08004d4c <__malloc_unlock>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	@ (8004d54 <__malloc_unlock+0x8>)
 8004d4e:	f7ff bf09 	b.w	8004b64 <__retarget_lock_release_recursive>
 8004d52:	bf00      	nop
 8004d54:	200006f8 	.word	0x200006f8

08004d58 <__sflush_r>:
 8004d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d60:	0716      	lsls	r6, r2, #28
 8004d62:	4605      	mov	r5, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	d454      	bmi.n	8004e12 <__sflush_r+0xba>
 8004d68:	684b      	ldr	r3, [r1, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dc02      	bgt.n	8004d74 <__sflush_r+0x1c>
 8004d6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dd48      	ble.n	8004e06 <__sflush_r+0xae>
 8004d74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d045      	beq.n	8004e06 <__sflush_r+0xae>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d80:	682f      	ldr	r7, [r5, #0]
 8004d82:	6a21      	ldr	r1, [r4, #32]
 8004d84:	602b      	str	r3, [r5, #0]
 8004d86:	d030      	beq.n	8004dea <__sflush_r+0x92>
 8004d88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	0759      	lsls	r1, r3, #29
 8004d8e:	d505      	bpl.n	8004d9c <__sflush_r+0x44>
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d96:	b10b      	cbz	r3, 8004d9c <__sflush_r+0x44>
 8004d98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004da0:	6a21      	ldr	r1, [r4, #32]
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b0      	blx	r6
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	d106      	bne.n	8004dba <__sflush_r+0x62>
 8004dac:	6829      	ldr	r1, [r5, #0]
 8004dae:	291d      	cmp	r1, #29
 8004db0:	d82b      	bhi.n	8004e0a <__sflush_r+0xb2>
 8004db2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <__sflush_r+0x104>)
 8004db4:	410a      	asrs	r2, r1
 8004db6:	07d6      	lsls	r6, r2, #31
 8004db8:	d427      	bmi.n	8004e0a <__sflush_r+0xb2>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	6062      	str	r2, [r4, #4]
 8004dbe:	04d9      	lsls	r1, r3, #19
 8004dc0:	6922      	ldr	r2, [r4, #16]
 8004dc2:	6022      	str	r2, [r4, #0]
 8004dc4:	d504      	bpl.n	8004dd0 <__sflush_r+0x78>
 8004dc6:	1c42      	adds	r2, r0, #1
 8004dc8:	d101      	bne.n	8004dce <__sflush_r+0x76>
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	b903      	cbnz	r3, 8004dd0 <__sflush_r+0x78>
 8004dce:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dd2:	602f      	str	r7, [r5, #0]
 8004dd4:	b1b9      	cbz	r1, 8004e06 <__sflush_r+0xae>
 8004dd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	d002      	beq.n	8004de4 <__sflush_r+0x8c>
 8004dde:	4628      	mov	r0, r5
 8004de0:	f7ff fec2 	bl	8004b68 <_free_r>
 8004de4:	2300      	movs	r3, #0
 8004de6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004de8:	e00d      	b.n	8004e06 <__sflush_r+0xae>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b0      	blx	r6
 8004df0:	4602      	mov	r2, r0
 8004df2:	1c50      	adds	r0, r2, #1
 8004df4:	d1c9      	bne.n	8004d8a <__sflush_r+0x32>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0c6      	beq.n	8004d8a <__sflush_r+0x32>
 8004dfc:	2b1d      	cmp	r3, #29
 8004dfe:	d001      	beq.n	8004e04 <__sflush_r+0xac>
 8004e00:	2b16      	cmp	r3, #22
 8004e02:	d11e      	bne.n	8004e42 <__sflush_r+0xea>
 8004e04:	602f      	str	r7, [r5, #0]
 8004e06:	2000      	movs	r0, #0
 8004e08:	e022      	b.n	8004e50 <__sflush_r+0xf8>
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e0e:	b21b      	sxth	r3, r3
 8004e10:	e01b      	b.n	8004e4a <__sflush_r+0xf2>
 8004e12:	690f      	ldr	r7, [r1, #16]
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	d0f6      	beq.n	8004e06 <__sflush_r+0xae>
 8004e18:	0793      	lsls	r3, r2, #30
 8004e1a:	680e      	ldr	r6, [r1, #0]
 8004e1c:	bf08      	it	eq
 8004e1e:	694b      	ldreq	r3, [r1, #20]
 8004e20:	600f      	str	r7, [r1, #0]
 8004e22:	bf18      	it	ne
 8004e24:	2300      	movne	r3, #0
 8004e26:	eba6 0807 	sub.w	r8, r6, r7
 8004e2a:	608b      	str	r3, [r1, #8]
 8004e2c:	f1b8 0f00 	cmp.w	r8, #0
 8004e30:	dde9      	ble.n	8004e06 <__sflush_r+0xae>
 8004e32:	6a21      	ldr	r1, [r4, #32]
 8004e34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e36:	4643      	mov	r3, r8
 8004e38:	463a      	mov	r2, r7
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b0      	blx	r6
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	dc08      	bgt.n	8004e54 <__sflush_r+0xfc>
 8004e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e54:	4407      	add	r7, r0
 8004e56:	eba8 0800 	sub.w	r8, r8, r0
 8004e5a:	e7e7      	b.n	8004e2c <__sflush_r+0xd4>
 8004e5c:	dfbffffe 	.word	0xdfbffffe

08004e60 <_fflush_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	690b      	ldr	r3, [r1, #16]
 8004e64:	4605      	mov	r5, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	b913      	cbnz	r3, 8004e70 <_fflush_r+0x10>
 8004e6a:	2500      	movs	r5, #0
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	b118      	cbz	r0, 8004e7a <_fflush_r+0x1a>
 8004e72:	6a03      	ldr	r3, [r0, #32]
 8004e74:	b90b      	cbnz	r3, 8004e7a <_fflush_r+0x1a>
 8004e76:	f7ff fc8f 	bl	8004798 <__sinit>
 8004e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f3      	beq.n	8004e6a <_fflush_r+0xa>
 8004e82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e84:	07d0      	lsls	r0, r2, #31
 8004e86:	d404      	bmi.n	8004e92 <_fflush_r+0x32>
 8004e88:	0599      	lsls	r1, r3, #22
 8004e8a:	d402      	bmi.n	8004e92 <_fflush_r+0x32>
 8004e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e8e:	f7ff fe68 	bl	8004b62 <__retarget_lock_acquire_recursive>
 8004e92:	4628      	mov	r0, r5
 8004e94:	4621      	mov	r1, r4
 8004e96:	f7ff ff5f 	bl	8004d58 <__sflush_r>
 8004e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e9c:	07da      	lsls	r2, r3, #31
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	d4e4      	bmi.n	8004e6c <_fflush_r+0xc>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	059b      	lsls	r3, r3, #22
 8004ea6:	d4e1      	bmi.n	8004e6c <_fflush_r+0xc>
 8004ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eaa:	f7ff fe5b 	bl	8004b64 <__retarget_lock_release_recursive>
 8004eae:	e7dd      	b.n	8004e6c <_fflush_r+0xc>

08004eb0 <__swhatbuf_r>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	b096      	sub	sp, #88	@ 0x58
 8004ebc:	4615      	mov	r5, r2
 8004ebe:	461e      	mov	r6, r3
 8004ec0:	da0d      	bge.n	8004ede <__swhatbuf_r+0x2e>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	bf14      	ite	ne
 8004ece:	2340      	movne	r3, #64	@ 0x40
 8004ed0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	6031      	str	r1, [r6, #0]
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	b016      	add	sp, #88	@ 0x58
 8004edc:	bd70      	pop	{r4, r5, r6, pc}
 8004ede:	466a      	mov	r2, sp
 8004ee0:	f000 f848 	bl	8004f74 <_fstat_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	dbec      	blt.n	8004ec2 <__swhatbuf_r+0x12>
 8004ee8:	9901      	ldr	r1, [sp, #4]
 8004eea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004eee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ef2:	4259      	negs	r1, r3
 8004ef4:	4159      	adcs	r1, r3
 8004ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004efa:	e7eb      	b.n	8004ed4 <__swhatbuf_r+0x24>

08004efc <__smakebuf_r>:
 8004efc:	898b      	ldrh	r3, [r1, #12]
 8004efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f00:	079d      	lsls	r5, r3, #30
 8004f02:	4606      	mov	r6, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	d507      	bpl.n	8004f18 <__smakebuf_r+0x1c>
 8004f08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	2301      	movs	r3, #1
 8004f12:	6163      	str	r3, [r4, #20]
 8004f14:	b003      	add	sp, #12
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f18:	ab01      	add	r3, sp, #4
 8004f1a:	466a      	mov	r2, sp
 8004f1c:	f7ff ffc8 	bl	8004eb0 <__swhatbuf_r>
 8004f20:	9f00      	ldr	r7, [sp, #0]
 8004f22:	4605      	mov	r5, r0
 8004f24:	4639      	mov	r1, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff fe8a 	bl	8004c40 <_malloc_r>
 8004f2c:	b948      	cbnz	r0, 8004f42 <__smakebuf_r+0x46>
 8004f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f32:	059a      	lsls	r2, r3, #22
 8004f34:	d4ee      	bmi.n	8004f14 <__smakebuf_r+0x18>
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	f043 0302 	orr.w	r3, r3, #2
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	e7e2      	b.n	8004f08 <__smakebuf_r+0xc>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	6020      	str	r0, [r4, #0]
 8004f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f52:	b15b      	cbz	r3, 8004f6c <__smakebuf_r+0x70>
 8004f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 f81d 	bl	8004f98 <_isatty_r>
 8004f5e:	b128      	cbz	r0, 8004f6c <__smakebuf_r+0x70>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	431d      	orrs	r5, r3
 8004f70:	81a5      	strh	r5, [r4, #12]
 8004f72:	e7cf      	b.n	8004f14 <__smakebuf_r+0x18>

08004f74 <_fstat_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	@ (8004f94 <_fstat_r+0x20>)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	f7fb fce4 	bl	800094e <_fstat>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d102      	bne.n	8004f90 <_fstat_r+0x1c>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	b103      	cbz	r3, 8004f90 <_fstat_r+0x1c>
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	bf00      	nop
 8004f94:	200006f4 	.word	0x200006f4

08004f98 <_isatty_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d06      	ldr	r5, [pc, #24]	@ (8004fb4 <_isatty_r+0x1c>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	602b      	str	r3, [r5, #0]
 8004fa4:	f7fb fce3 	bl	800096e <_isatty>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_isatty_r+0x1a>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_isatty_r+0x1a>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	200006f4 	.word	0x200006f4

08004fb8 <_sbrk_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d06      	ldr	r5, [pc, #24]	@ (8004fd4 <_sbrk_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	f7fb fcec 	bl	80009a0 <_sbrk>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_sbrk_r+0x1a>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_sbrk_r+0x1a>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	200006f4 	.word	0x200006f4

08004fd8 <_init>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr

08004fe4 <_fini>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr
