
Lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005648  08005648  00006648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005704  08005704  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005704  08005704  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800570c  0800570c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800570c  0800570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005714  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000068  0800577c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800577c  00007520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da88  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224c  00000000  00000000  00014b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00016d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  00017878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ba8  00000000  00000000  000180dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de56  00000000  00000000  0001ac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b88bb  00000000  00000000  00028ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003328  00000000  00000000  000e13d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e4700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005630 	.word	0x08005630

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005630 	.word	0x08005630

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a33      	ldr	r2, [pc, #204]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b31      	ldr	r3, [pc, #196]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <MX_GPIO_Init+0xe8>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_GPIO_Init+0xe8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xe8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xe8>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xe8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f000 ff6d 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000638:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4814      	ldr	r0, [pc, #80]	@ (800069c <MX_GPIO_Init+0xec>)
 800064a:	f000 fddd 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800064e:	2320      	movs	r3, #32
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 fdce 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800066c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800067e:	2307      	movs	r3, #7
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f000 fdbc 	bl	8001208 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	@ 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800

080006a0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ae:	2201      	movs	r2, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <__io_putchar+0x20>)
 80006b2:	f001 ff65 	bl	8002580 <HAL_UART_Transmit>
	return ch;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200002a8 	.word	0x200002a8

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fb5d 	bl	8000d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f82e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f7ff ff6e 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d4:	f000 f9f6 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006d8:	f000 fa40 	bl	8000b5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, uart_lidar_rx, 1); // Active la réception de données en mode interruption
 80006dc:	2201      	movs	r2, #1
 80006de:	490e      	ldr	r1, [pc, #56]	@ (8000718 <main+0x54>)
 80006e0:	480e      	ldr	r0, [pc, #56]	@ (800071c <main+0x58>)
 80006e2:	f001 ffdb 	bl	800269c <HAL_UART_Receive_IT>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(it_rx_lidar){
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main+0x5c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0fb      	beq.n	80006e6 <main+0x22>

		  // Traitement de texte
		  if (i < LIDAR_TRAME_SIZE){
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <main+0x60>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f240 2209 	movw	r2, #521	@ 0x209
 80006f6:	4293      	cmp	r3, r2
 80006f8:	dc0a      	bgt.n	8000710 <main+0x4c>
			  trame[i] = uart_lidar_rx[0];
 80006fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <main+0x60>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <main+0x54>)
 8000700:	7811      	ldrb	r1, [r2, #0]
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <main+0x64>)
 8000704:	54d1      	strb	r1, [r2, r3]
			  i++;
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <main+0x60>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <main+0x60>)
 800070e:	6013      	str	r3, [r2, #0]
		  }
		  else {

		  }
		  it_rx_lidar = 0; // reinitialise notre reception
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <main+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	  if(it_rx_lidar){
 8000716:	e7e6      	b.n	80006e6 <main+0x22>
 8000718:	20000088 	.word	0x20000088
 800071c:	2000033c 	.word	0x2000033c
 8000720:	200002a0 	.word	0x200002a0
 8000724:	2000029c 	.word	0x2000029c
 8000728:	20000090 	.word	0x20000090

0800072c <SystemClock_Config>:

  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2238      	movs	r2, #56	@ 0x38
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 f9f4 	bl	8004b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fef4 	bl	800153c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	2340      	movs	r3, #64	@ 0x40
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800076e:	2355      	movs	r3, #85	@ 0x55
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff8e 	bl	80016a4 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800078e:	f000 f87f 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fa8c 	bl	8001cc8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007b6:	f000 f86b 	bl	8000890 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	@ 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <HAL_UART_RxCpltCallback+0xa8>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d147      	bne.n	8000864 <HAL_UART_RxCpltCallback+0xa0>

		switch (lidar_state){
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d01f      	beq.n	800081c <HAL_UART_RxCpltCallback+0x58>
 80007dc:	2b02      	cmp	r3, #2
 80007de:	dc3c      	bgt.n	800085a <HAL_UART_RxCpltCallback+0x96>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <HAL_UART_RxCpltCallback+0x26>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d00b      	beq.n	8000800 <HAL_UART_RxCpltCallback+0x3c>
 80007e8:	e037      	b.n	800085a <HAL_UART_RxCpltCallback+0x96>

			case WAIT_SYNC1:
				printf("WAIT_SYNC1\r\n");
 80007ea:	4822      	ldr	r0, [pc, #136]	@ (8000874 <HAL_UART_RxCpltCallback+0xb0>)
 80007ec:	f004 f8bc 	bl	8004968 <puts>
				if(uart_lidar_rx[0] == 0xAA){
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2baa      	cmp	r3, #170	@ 0xaa
 80007f6:	d12d      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x90>
					lidar_state = WAIT_SYNC2;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80007fe:	e029      	b.n	8000854 <HAL_UART_RxCpltCallback+0x90>

			case WAIT_SYNC2:
				printf("WAIT_SYNC2\r\n");
 8000800:	481e      	ldr	r0, [pc, #120]	@ (800087c <HAL_UART_RxCpltCallback+0xb8>)
 8000802:	f004 f8b1 	bl	8004968 <puts>
				if(uart_lidar_rx[0] == 0x55){
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b55      	cmp	r3, #85	@ 0x55
 800080c:	d124      	bne.n	8000858 <HAL_UART_RxCpltCallback+0x94>
					printf("Trame synchronisée!\r\n");
 800080e:	481c      	ldr	r0, [pc, #112]	@ (8000880 <HAL_UART_RxCpltCallback+0xbc>)
 8000810:	f004 f8aa 	bl	8004968 <puts>
					lidar_state = RECEIVE_DATA;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 8000816:	2202      	movs	r2, #2
 8000818:	701a      	strb	r2, [r3, #0]
				}
				break;
 800081a:	e01d      	b.n	8000858 <HAL_UART_RxCpltCallback+0x94>

			case RECEIVE_DATA:
				if (i < LIDAR_TRAME_SIZE){
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_UART_RxCpltCallback+0xc0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f240 2209 	movw	r2, #521	@ 0x209
 8000824:	4293      	cmp	r3, r2
 8000826:	dc11      	bgt.n	800084c <HAL_UART_RxCpltCallback+0x88>
					uart_pc_tx[0] = uart_lidar_rx[0];
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <HAL_UART_RxCpltCallback+0xc4>)
 800082e:	701a      	strb	r2, [r3, #0]

					if(uart_lidar_rx[0] == 0xAA){
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2baa      	cmp	r3, #170	@ 0xaa
 8000836:	d102      	bne.n	800083e <HAL_UART_RxCpltCallback+0x7a>

						lidar_state = WAIT_SYNC2;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
					}

					printf("Octet reçu : 0x%X\r\n", uart_pc_tx[0]);
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_UART_RxCpltCallback+0xc4>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	4811      	ldr	r0, [pc, #68]	@ (800088c <HAL_UART_RxCpltCallback+0xc8>)
 8000846:	f004 f827 	bl	8004898 <iprintf>
				}
				else{
					lidar_state = WAIT_SYNC1;
				}
				break;
 800084a:	e006      	b.n	800085a <HAL_UART_RxCpltCallback+0x96>
					lidar_state = WAIT_SYNC1;
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_UART_RxCpltCallback+0xac>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
				break;
 8000852:	e002      	b.n	800085a <HAL_UART_RxCpltCallback+0x96>
				break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <HAL_UART_RxCpltCallback+0x96>
				break;
 8000858:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart3, uart_lidar_rx, 1); // Reactive la reception en interruption sans quoi on ne capterait qu'un seul octet
 800085a:	2201      	movs	r2, #1
 800085c:	4906      	ldr	r1, [pc, #24]	@ (8000878 <HAL_UART_RxCpltCallback+0xb4>)
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <HAL_UART_RxCpltCallback+0xa8>)
 8000860:	f001 ff1c 	bl	800269c <HAL_UART_Receive_IT>

	}
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000033c 	.word	0x2000033c
 8000870:	20000084 	.word	0x20000084
 8000874:	08005648 	.word	0x08005648
 8000878:	20000088 	.word	0x20000088
 800087c:	08005654 	.word	0x08005654
 8000880:	08005660 	.word	0x08005660
 8000884:	2000029c 	.word	0x2000029c
 8000888:	2000008c 	.word	0x2000008c
 800088c:	08005678 	.word	0x08005678

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a6:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008d2:	f000 fed7 	bl	8001684 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 fa77 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000948:	4802      	ldr	r0, [pc, #8]	@ (8000954 <USART3_IRQHandler+0x10>)
 800094a:	f001 fef3 	bl	8002734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000033c 	.word	0x2000033c

08000958 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00a      	b.n	8000980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800096a:	f3af 8000 	nop.w
 800096e:	4601      	mov	r1, r0
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	60ba      	str	r2, [r7, #8]
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf0      	blt.n	800096a <_read+0x12>
  }

  return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e009      	b.n	80009b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe77 	bl	80006a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbf1      	blt.n	80009a4 <_write+0x12>
  }
  return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_close>:

int _close(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009f2:	605a      	str	r2, [r3, #4]
  return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_isatty>:

int _isatty(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a3c:	4a14      	ldr	r2, [pc, #80]	@ (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a48:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a64:	f004 f8ae 	bl	8004bc4 <__errno>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <_sbrk+0x64>)
 8000a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20008000 	.word	0x20008000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	200002a4 	.word	0x200002a4
 8000a9c:	20000520 	.word	0x20000520

08000aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <MX_USART2_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f001 fce7 	bl	80024e0 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f7ff feba 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b20:	f003 fd2d 	bl	800457e <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f7ff feb1 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b32:	f003 fd62 	bl	80045fa <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f7ff fea8 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b42:	f003 fce3 	bl	800450c <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f7ff fea0 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200002a8 	.word	0x200002a8
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <MX_USART3_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba6:	f001 fc9b 	bl	80024e0 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f7ff fe6e 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bb8:	f003 fce1 	bl	800457e <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f7ff fe65 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bca:	f003 fd16 	bl	80045fa <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f7ff fe5c 	bl	8000890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bda:	f003 fc97 	bl	800450c <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f7ff fe54 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000033c 	.word	0x2000033c
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	@ 0x70
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	2244      	movs	r2, #68	@ 0x44
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 ff87 	bl	8004b28 <memset>
  if(uartHandle->Instance==USART2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a41      	ldr	r2, [pc, #260]	@ (8000d24 <HAL_UART_MspInit+0x130>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d137      	bne.n	8000c94 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fa65 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c3c:	f7ff fe28 	bl	8000890 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c44:	4a38      	ldr	r2, [pc, #224]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c4c:	4b36      	ldr	r3, [pc, #216]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c64:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c80:	2307      	movs	r3, #7
 8000c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8e:	f000 fabb 	bl	8001208 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c92:	e043      	b.n	8000d1c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <HAL_UART_MspInit+0x138>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d13e      	bne.n	8000d1c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	f107 0318 	add.w	r3, r7, #24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fa28 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000cb6:	f7ff fdeb 	bl	8000890 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_UART_MspInit+0x134>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d04:	4619      	mov	r1, r3
 8000d06:	480a      	ldr	r0, [pc, #40]	@ (8000d30 <HAL_UART_MspInit+0x13c>)
 8000d08:	f000 fa7e 	bl	8001208 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2027      	movs	r0, #39	@ 0x27
 8000d12:	f000 f984 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d16:	2027      	movs	r0, #39	@ 0x27
 8000d18:	f000 f99b 	bl	8001052 <HAL_NVIC_EnableIRQ>
}
 8000d1c:	bf00      	nop
 8000d1e:	3770      	adds	r7, #112	@ 0x70
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40004800 	.word	0x40004800
 8000d30:	48000400 	.word	0x48000400

08000d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff feb2 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f003 ff35 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d66:	f7ff fcad 	bl	80006c4 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   r0, =_estack
 8000d6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d78:	08005714 	.word	0x08005714
  ldr r2, =_sbss
 8000d7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d80:	20000520 	.word	0x20000520

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>

08000d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f939 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f80e 	bl	8000db8 <HAL_InitTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
 8000da6:	e001      	b.n	8000dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da8:	f7ff fd78 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dac:	79fb      	ldrb	r3, [r7, #7]

}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_InitTick+0x68>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d022      	beq.n	8000e12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_InitTick+0x6c>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_InitTick+0x68>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f944 	bl	800106e <HAL_SYSTICK_Config>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d10f      	bne.n	8000e0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d809      	bhi.n	8000e06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df2:	2200      	movs	r2, #0
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfa:	f000 f910 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_InitTick+0x70>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e007      	b.n	8000e16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e004      	b.n	8000e16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e001      	b.n	8000e16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x1c>)
 8000e3c:	6013      	str	r3, [r2, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	200003d0 	.word	0x200003d0
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200003d0 	.word	0x200003d0

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff40 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff33 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa4 	bl	8000fc4 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d005      	beq.n	80010aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2204      	movs	r2, #4
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e037      	b.n	800111a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020e 	bic.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0201 	bic.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f003 021f 	and.w	r2, r3, #31
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800110a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800110e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001118:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d00d      	beq.n	800116c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e047      	b.n	80011fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 020e 	bic.w	r2, r2, #14
 800117a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001196:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800119a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00c      	beq.n	80011dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
    }
  }
  return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001216:	e15a      	b.n	80014ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 814c 	beq.w	80014c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80a6 	beq.w	80014c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ec <HAL_GPIO_Init+0x2e4>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001380:	4a5a      	ldr	r2, [pc, #360]	@ (80014ec <HAL_GPIO_Init+0x2e4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6613      	str	r3, [r2, #96]	@ 0x60
 8001388:	4b58      	ldr	r3, [pc, #352]	@ (80014ec <HAL_GPIO_Init+0x2e4>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001394:	4a56      	ldr	r2, [pc, #344]	@ (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013be:	d01f      	beq.n	8001400 <HAL_GPIO_Init+0x1f8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <HAL_GPIO_Init+0x2ec>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d019      	beq.n	80013fc <HAL_GPIO_Init+0x1f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_GPIO_Init+0x2f0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x1f0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_GPIO_Init+0x2f4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1ec>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_GPIO_Init+0x2f8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1e8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a48      	ldr	r2, [pc, #288]	@ (8001504 <HAL_GPIO_Init+0x2fc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1e4>
 80013e8:	2305      	movs	r3, #5
 80013ea:	e00a      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013ec:	2306      	movs	r3, #6
 80013ee:	e008      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013f0:	2304      	movs	r3, #4
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_Init+0x1fa>
 8001400:	2300      	movs	r3, #0
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001412:	4937      	ldr	r1, [pc, #220]	@ (80014f0 <HAL_GPIO_Init+0x2e8>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001444:	4a30      	ldr	r2, [pc, #192]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144a:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <HAL_GPIO_Init+0x300>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146e:	4a26      	ldr	r2, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <HAL_GPIO_Init+0x300>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800149e:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <HAL_GPIO_Init+0x300>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c2:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <HAL_GPIO_Init+0x300>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f ae9d 	bne.w	8001218 <HAL_GPIO_Init+0x10>
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	48001400 	.word	0x48001400
 8001508:	40010400 	.word	0x40010400

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d141      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	4b4b      	ldr	r3, [pc, #300]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001556:	d131      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001558:	4b47      	ldr	r3, [pc, #284]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155e:	4a46      	ldr	r2, [pc, #280]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	4b43      	ldr	r3, [pc, #268]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001570:	4a41      	ldr	r2, [pc, #260]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001578:	4b40      	ldr	r3, [pc, #256]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2232      	movs	r2, #50	@ 0x32
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a3f      	ldr	r2, [pc, #252]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158e:	e002      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a2:	d102      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f2      	bne.n	8001590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015aa:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b6:	d158      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e057      	b.n	800166c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015cc:	e04d      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015d4:	d141      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e2:	d131      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ea:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2232      	movs	r2, #50	@ 0x32
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4a1c      	ldr	r2, [pc, #112]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161a:	e002      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3b01      	subs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162e:	d102      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f2      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001642:	d112      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e011      	b.n	800166c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001658:	e007      	b.n	800166a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001668:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40007000 	.word	0x40007000
 800167c:	20000000 	.word	0x20000000
 8001680:	431bde83 	.word	0x431bde83

08001684 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800168e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001692:	6093      	str	r3, [r2, #8]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000

080016a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e2fe      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d075      	beq.n	80017ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c2:	4b97      	ldr	r3, [pc, #604]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016cc:	4b94      	ldr	r3, [pc, #592]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d102      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3e>
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_OscConfig+0x44>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d05b      	beq.n	80017ac <HAL_RCC_OscConfig+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d157      	bne.n	80017ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e2d9      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001708:	d106      	bne.n	8001718 <HAL_RCC_OscConfig+0x74>
 800170a:	4b85      	ldr	r3, [pc, #532]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a84      	ldr	r2, [pc, #528]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e01d      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x98>
 8001722:	4b7f      	ldr	r3, [pc, #508]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a7e      	ldr	r2, [pc, #504]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b7c      	ldr	r3, [pc, #496]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7b      	ldr	r2, [pc, #492]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xb0>
 800173c:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a77      	ldr	r2, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b75      	ldr	r3, [pc, #468]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a74      	ldr	r2, [pc, #464]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fb78 	bl	8000e50 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fb74 	bl	8000e50 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e29e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0xc0>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fb64 	bl	8000e50 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fb60 	bl	8000e50 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e28a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	4b60      	ldr	r3, [pc, #384]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0xe8>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d075      	beq.n	80018a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c4:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d102      	bne.n	80017da <HAL_RCC_OscConfig+0x136>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_OscConfig+0x13c>
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d11f      	bne.n	8001820 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x154>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e25d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4946      	ldr	r1, [pc, #280]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800180c:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fad1 	bl	8000db8 <HAL_InitTick>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d043      	beq.n	80018a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e249      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001828:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fb0c 	bl	8000e50 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fb08 	bl	8000e50 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e232      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184e:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	061b      	lsls	r3, r3, #24
 8001868:	492d      	ldr	r1, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
 800186e:	e01a      	b.n	80018a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001876:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800187a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fae8 	bl	8000e50 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fae4 	bl	8000e50 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e20e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001896:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1e0>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d041      	beq.n	8001936 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c0:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fac1 	bl	8000e50 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff fabd 	bl	8000e50 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e1e7      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ef      	beq.n	80018d2 <HAL_RCC_OscConfig+0x22e>
 80018f2:	e020      	b.n	8001936 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff faa4 	bl	8000e50 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190a:	e00d      	b.n	8001928 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff faa0 	bl	8000e50 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d906      	bls.n	8001928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1ca      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001928:	4b8c      	ldr	r3, [pc, #560]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ea      	bne.n	800190c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a6 	beq.w	8001a90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001948:	4b84      	ldr	r3, [pc, #528]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x2b4>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x2b6>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00d      	beq.n	800197a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	4a7e      	ldr	r2, [pc, #504]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	@ 0x58
 800196a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	4b79      	ldr	r3, [pc, #484]	@ (8001b60 <HAL_RCC_OscConfig+0x4bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001986:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <HAL_RCC_OscConfig+0x4bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a75      	ldr	r2, [pc, #468]	@ (8001b60 <HAL_RCC_OscConfig+0x4bc>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff fa5d 	bl	8000e50 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff fa59 	bl	8000e50 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e183      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001b60 <HAL_RCC_OscConfig+0x4bc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_RCC_OscConfig+0x32e>
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a65      	ldr	r2, [pc, #404]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d0:	e024      	b.n	8001a1c <HAL_RCC_OscConfig+0x378>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d110      	bne.n	80019fc <HAL_RCC_OscConfig+0x358>
 80019da:	4b60      	ldr	r3, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e0:	4a5e      	ldr	r2, [pc, #376]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f0:	4a5a      	ldr	r2, [pc, #360]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fa:	e00f      	b.n	8001a1c <HAL_RCC_OscConfig+0x378>
 80019fc:	4b57      	ldr	r3, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a02:	4a56      	ldr	r2, [pc, #344]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a12:	4a52      	ldr	r2, [pc, #328]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d016      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fa14 	bl	8000e50 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fa10 	bl	8000e50 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e138      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a42:	4b46      	ldr	r3, [pc, #280]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ed      	beq.n	8001a2c <HAL_RCC_OscConfig+0x388>
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff f9fd 	bl	8000e50 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff f9f9 	bl	8000e50 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e121      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a70:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ed      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b35      	ldr	r3, [pc, #212]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01c      	beq.n	8001ade <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f9cc 	bl	8000e50 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001abc:	f7ff f9c8 	bl	8000e50 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0f2      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ace:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ef      	beq.n	8001abc <HAL_RCC_OscConfig+0x418>
 8001adc:	e01b      	b.n	8001b16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff f9af 	bl	8000e50 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001af6:	f7ff f9ab 	bl	8000e50 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0d5      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b08:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ef      	bne.n	8001af6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80c9 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b20:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b0c      	cmp	r3, #12
 8001b2a:	f000 8083 	beq.w	8001c34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d15e      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	@ (8001b5c <HAL_RCC_OscConfig+0x4b8>)
 8001b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f985 	bl	8000e50 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	e00c      	b.n	8001b64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7ff f981 	bl	8000e50 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d905      	bls.n	8001b64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0ab      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b55      	ldr	r3, [pc, #340]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ec      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b70:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4b52      	ldr	r3, [pc, #328]	@ (8001cc0 <HAL_RCC_OscConfig+0x61c>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6a11      	ldr	r1, [r2, #32]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001b8a:	0212      	lsls	r2, r2, #8
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b92:	0852      	lsrs	r2, r2, #1
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0552      	lsls	r2, r2, #21
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b9e:	0852      	lsrs	r2, r2, #1
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	0652      	lsls	r2, r2, #25
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001baa:	06d2      	lsls	r2, r2, #27
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4943      	ldr	r1, [pc, #268]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a40      	ldr	r2, [pc, #256]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f940 	bl	8000e50 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f93c 	bl	8000e50 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e066      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x530>
 8001bf2:	e05e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a30      	ldr	r2, [pc, #192]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f926 	bl	8000e50 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f922 	bl	8000e50 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e04c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c26:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4924      	ldr	r1, [pc, #144]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c2c:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60cb      	str	r3, [r1, #12]
 8001c32:	e03e      	b.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e039      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c40:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <HAL_RCC_OscConfig+0x618>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d12c      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d123      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d11b      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d113      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	019f800c 	.word	0x019f800c
 8001cc4:	feeefffc 	.word	0xfeeefffc

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e11e      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b91      	ldr	r3, [pc, #580]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b8e      	ldr	r3, [pc, #568]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 020f 	bic.w	r2, r3, #15
 8001cf6:	498c      	ldr	r1, [pc, #560]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b8a      	ldr	r3, [pc, #552]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e106      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d073      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d129      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d24:	4b81      	ldr	r3, [pc, #516]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0f4      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d34:	f000 f99e 	bl	8002074 <RCC_GetSysClockFreqFromPLLSource>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4a7c      	ldr	r2, [pc, #496]	@ (8001f30 <HAL_RCC_ClockConfig+0x268>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d93f      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d42:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d033      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12f      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d62:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d6a:	4a70      	ldr	r2, [pc, #448]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e024      	b.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d80:	4b6a      	ldr	r3, [pc, #424]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0c6      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b66      	ldr	r3, [pc, #408]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0be      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001da0:	f000 f8ce 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4a61      	ldr	r2, [pc, #388]	@ (8001f30 <HAL_RCC_ClockConfig+0x268>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d909      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dae:	4b5f      	ldr	r3, [pc, #380]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001db6:	4a5d      	ldr	r2, [pc, #372]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4957      	ldr	r1, [pc, #348]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd4:	f7ff f83c 	bl	8000e50 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff f838 	bl	8000e50 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e095      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 020c 	and.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d1eb      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a42      	ldr	r2, [pc, #264]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e34:	4b3d      	ldr	r3, [pc, #244]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4936      	ldr	r1, [pc, #216]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b80      	cmp	r3, #128	@ 0x80
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e5e:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d21d      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 020f 	bic.w	r2, r3, #15
 8001e80:	4929      	ldr	r1, [pc, #164]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e88:	f7fe ffe2 	bl	8000e50 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7fe ffde 	bl	8000e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e03b      	b.n	8001f1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1ed      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4917      	ldr	r1, [pc, #92]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490f      	ldr	r1, [pc, #60]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef2:	f000 f825 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_RCC_ClockConfig+0x264>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <HAL_RCC_ClockConfig+0x26c>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_RCC_ClockConfig+0x270>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <HAL_RCC_ClockConfig+0x274>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ff4e 	bl	8000db8 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	04c4b400 	.word	0x04c4b400
 8001f34:	08005690 	.word	0x08005690
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e047      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e03e      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d136      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f94:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f9e:	68d2      	ldr	r2, [r2, #12]
 8001fa0:	0a12      	lsrs	r2, r2, #8
 8001fa2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
      break;
 8001fac:	e00c      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fae:	4a13      	ldr	r2, [pc, #76]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb8:	68d2      	ldr	r2, [r2, #12]
 8001fba:	0a12      	lsrs	r2, r2, #8
 8001fbc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
      break;
 8001fc6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0e5b      	lsrs	r3, r3, #25
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fe8:	693b      	ldr	r3, [r7, #16]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	016e3600 	.word	0x016e3600

08002004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_RCC_GetHCLKFreq+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000000 	.word	0x20000000

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002020:	f7ff fff0 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4904      	ldr	r1, [pc, #16]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	080056a0 	.word	0x080056a0

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800204c:	f7ff ffda 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0adb      	lsrs	r3, r3, #11
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4904      	ldr	r1, [pc, #16]	@ (8002070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	080056a0 	.word	0x080056a0

08002074 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d10c      	bne.n	80020b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002098:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a2:	68d2      	ldr	r2, [r2, #12]
 80020a4:	0a12      	lsrs	r2, r2, #8
 80020a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
    break;
 80020b0:	e00c      	b.n	80020cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4a0e      	ldr	r2, [pc, #56]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020bc:	68d2      	ldr	r2, [r2, #12]
 80020be:	0a12      	lsrs	r2, r2, #8
 80020c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    break;
 80020ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0e5b      	lsrs	r3, r3, #25
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	3301      	adds	r3, #1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40021000 	.word	0x40021000
 80020f8:	016e3600 	.word	0x016e3600
 80020fc:	00f42400 	.word	0x00f42400

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2300      	movs	r3, #0
 800210e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8098 	beq.w	800224e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	4a3f      	ldr	r2, [pc, #252]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	@ 0x58
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002146:	2301      	movs	r3, #1
 8002148:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214a:	4b3a      	ldr	r3, [pc, #232]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002156:	f7fe fe7b 	bl	8000e50 <HAL_GetTick>
 800215a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800215c:	e009      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7fe fe77 	bl	8000e50 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d902      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	74fb      	strb	r3, [r7, #19]
        break;
 8002170:	e005      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002172:	4b30      	ldr	r3, [pc, #192]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ef      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d159      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002184:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01e      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	d019      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021a0:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021cc:	4a18      	ldr	r2, [pc, #96]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fe37 	bl	8000e50 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e4:	e00b      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7fe fe33 	bl	8000e50 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d902      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	74fb      	strb	r3, [r7, #19]
            break;
 80021fc:	e006      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ec      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10b      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	4903      	ldr	r1, [pc, #12]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002228:	e008      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	74bb      	strb	r3, [r7, #18]
 800222e:	e005      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223c:	7c7b      	ldrb	r3, [r7, #17]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4ba6      	ldr	r3, [pc, #664]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4aa5      	ldr	r2, [pc, #660]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4ba0      	ldr	r3, [pc, #640]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	499c      	ldr	r1, [pc, #624]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227c:	4b97      	ldr	r3, [pc, #604]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4994      	ldr	r1, [pc, #592]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229e:	4b8f      	ldr	r3, [pc, #572]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	498b      	ldr	r1, [pc, #556]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	4b86      	ldr	r3, [pc, #536]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	4983      	ldr	r1, [pc, #524]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e2:	4b7e      	ldr	r3, [pc, #504]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	497a      	ldr	r1, [pc, #488]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002304:	4b75      	ldr	r3, [pc, #468]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	4972      	ldr	r1, [pc, #456]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002326:	4b6d      	ldr	r3, [pc, #436]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	4969      	ldr	r1, [pc, #420]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002348:	4b64      	ldr	r3, [pc, #400]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4961      	ldr	r1, [pc, #388]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002370:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	4958      	ldr	r1, [pc, #352]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	4950      	ldr	r1, [pc, #320]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023c4:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	4942      	ldr	r1, [pc, #264]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e4:	4b3d      	ldr	r3, [pc, #244]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a3c      	ldr	r2, [pc, #240]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80023fc:	4b37      	ldr	r3, [pc, #220]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4934      	ldr	r1, [pc, #208]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b2f      	ldr	r3, [pc, #188]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a2e      	ldr	r2, [pc, #184]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002442:	4926      	ldr	r1, [pc, #152]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002452:	d105      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002454:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a20      	ldr	r2, [pc, #128]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800245e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	4918      	ldr	r1, [pc, #96]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800248a:	d105      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002496:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024a4:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	490a      	ldr	r1, [pc, #40]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024c2:	d105      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80024d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e042      	b.n	8002578 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fb75 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2224      	movs	r2, #36	@ 0x24
 800250e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 ff30 	bl	8003390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fc61 	bl	8002df8 <UART_SetConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e01b      	b.n	8002578 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800254e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800255e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 ffaf 	bl	80034d4 <UART_CheckIdleState>
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	2b20      	cmp	r3, #32
 8002598:	d17b      	bne.n	8002692 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_UART_Transmit+0x26>
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e074      	b.n	8002694 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2221      	movs	r2, #33	@ 0x21
 80025b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ba:	f7fe fc49 	bl	8000e50 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x6c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f4:	e030      	b.n	8002658 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2180      	movs	r1, #128	@ 0x80
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f001 f811 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03d      	b.n	8002694 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3302      	adds	r3, #2
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	e007      	b.n	8002646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1c8      	bne.n	80025f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2200      	movs	r2, #0
 800266c:	2140      	movs	r1, #64	@ 0x40
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 ffda 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e006      	b.n	8002694 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d137      	bne.n	8002724 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_UART_Receive_IT+0x24>
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e030      	b.n	8002726 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <HAL_UART_Receive_IT+0x94>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01f      	beq.n	8002714 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	613b      	str	r3, [r7, #16]
   return(result);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	69f9      	ldr	r1, [r7, #28]
 8002706:	6a3a      	ldr	r2, [r7, #32]
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	61bb      	str	r3, [r7, #24]
   return(result);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e6      	bne.n	80026e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	461a      	mov	r2, r3
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fff2 	bl	8003704 <UART_Start_Receive_IT>
 8002720:	4603      	mov	r3, r0
 8002722:	e000      	b.n	8002726 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40008000 	.word	0x40008000

08002734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0ba      	sub	sp, #232	@ 0xe8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800275a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800275e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002762:	4013      	ands	r3, r2
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11b      	bne.n	80027a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800277c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8300 	beq.w	8002d9e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
      }
      return;
 80027a6:	e2fa      	b.n	8002d9e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8123 	beq.w	80029f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80027b6:	4b8d      	ldr	r3, [pc, #564]	@ (80029ec <HAL_UART_IRQHandler+0x2b8>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80027c2:	4b8b      	ldr	r3, [pc, #556]	@ (80029f0 <HAL_UART_IRQHandler+0x2bc>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8116 	beq.w	80029f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d011      	beq.n	80027fc <HAL_UART_IRQHandler+0xc8>
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2201      	movs	r2, #1
 80027ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d011      	beq.n	800282c <HAL_UART_IRQHandler+0xf8>
 8002808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800282c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d011      	beq.n	800285c <HAL_UART_IRQHandler+0x128>
 8002838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2204      	movs	r2, #4
 800284a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002878:	4b5c      	ldr	r3, [pc, #368]	@ (80029ec <HAL_UART_IRQHandler+0x2b8>)
 800287a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2208      	movs	r2, #8
 8002886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f043 0208 	orr.w	r2, r3, #8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d012      	beq.n	80028ca <HAL_UART_IRQHandler+0x196>
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8266 	beq.w	8002da2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291e:	2b40      	cmp	r3, #64	@ 0x40
 8002920:	d005      	beq.n	800292e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002926:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800292a:	2b00      	cmp	r3, #0
 800292c:	d054      	beq.n	80029d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f001 f80a 	bl	8003948 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	d146      	bne.n	80029d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3308      	adds	r3, #8
 8002948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800295c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800296e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800297a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1d9      	bne.n	8002942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d017      	beq.n	80029c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800299e:	4a15      	ldr	r2, [pc, #84]	@ (80029f4 <HAL_UART_IRQHandler+0x2c0>)
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fbc5 	bl	8001138 <HAL_DMA_Abort_IT>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d019      	beq.n	80029e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80029c2:	4610      	mov	r0, r2
 80029c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	e00f      	b.n	80029e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f9ff 	bl	8002dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ce:	e00b      	b.n	80029e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f9fb 	bl	8002dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d6:	e007      	b.n	80029e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9f7 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80029e6:	e1dc      	b.n	8002da2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	bf00      	nop
    return;
 80029ea:	e1da      	b.n	8002da2 <HAL_UART_IRQHandler+0x66e>
 80029ec:	10000001 	.word	0x10000001
 80029f0:	04000120 	.word	0x04000120
 80029f4:	08003a15 	.word	0x08003a15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 8170 	bne.w	8002ce2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8169 	beq.w	8002ce2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8162 	beq.w	8002ce2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2210      	movs	r2, #16
 8002a24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a30:	2b40      	cmp	r3, #64	@ 0x40
 8002a32:	f040 80d8 	bne.w	8002be6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80af 	beq.w	8002bac <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f080 80a7 	bcs.w	8002bac <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 8087 	bne.w	8002b8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1da      	bne.n	8002a7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3308      	adds	r3, #8
 8002acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e1      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3308      	adds	r3, #8
 8002b08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e3      	bne.n	8002b02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b58:	f023 0310 	bic.w	r3, r3, #16
 8002b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e4      	bne.n	8002b48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fa7e 	bl	8001086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f91b 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002baa:	e0fc      	b.n	8002da6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f040 80f5 	bne.w	8002da6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	f040 80eb 	bne.w	8002da6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8fe 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
      return;
 8002be4:	e0df      	b.n	8002da6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d1 	beq.w	8002daa <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80cc 	beq.w	8002daa <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e4      	bne.n	8002c12 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	623b      	str	r3, [r7, #32]
   return(result);
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e1      	bne.n	8002c48 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0310 	bic.w	r3, r3, #16
 8002cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e4      	bne.n	8002c98 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f880 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ce0:	e063      	b.n	8002daa <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <HAL_UART_IRQHandler+0x5d8>
 8002cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f001 fbe3 	bl	80044d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d0a:	e051      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d014      	beq.n	8002d42 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d03a      	beq.n	8002dae <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
    }
    return;
 8002d40:	e035      	b.n	8002dae <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_UART_IRQHandler+0x62e>
 8002d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fe6c 	bl	8003a38 <UART_EndTransmit_IT>
    return;
 8002d60:	e026      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_UART_IRQHandler+0x64e>
 8002d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f001 fbbc 	bl	80044f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d80:	e016      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_UART_IRQHandler+0x67c>
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0c      	bge.n	8002db0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f001 fba4 	bl	80044e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d9c:	e008      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002d9e:	bf00      	nop
 8002da0:	e006      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
    return;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_UART_IRQHandler+0x67c>
    return;
 8002dae:	bf00      	nop
  }
}
 8002db0:	37e8      	adds	r7, #232	@ 0xe8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b08c      	sub	sp, #48	@ 0x30
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4bab      	ldr	r3, [pc, #684]	@ (80030d4 <UART_SetConfig+0x2dc>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4aa0      	ldr	r2, [pc, #640]	@ (80030d8 <UART_SetConfig+0x2e0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e60:	4313      	orrs	r3, r2
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002e6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f023 010f 	bic.w	r1, r3, #15
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a91      	ldr	r2, [pc, #580]	@ (80030dc <UART_SetConfig+0x2e4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d125      	bne.n	8002ee8 <UART_SetConfig+0xf0>
 8002e9c:	4b90      	ldr	r3, [pc, #576]	@ (80030e0 <UART_SetConfig+0x2e8>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d81a      	bhi.n	8002ee0 <UART_SetConfig+0xe8>
 8002eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <UART_SetConfig+0xb8>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08002ed1 	.word	0x08002ed1
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed9 	.word	0x08002ed9
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ec6:	e0d6      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ece:	e0d2      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed6:	e0ce      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ede:	e0ca      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ee6:	e0c6      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a7d      	ldr	r2, [pc, #500]	@ (80030e4 <UART_SetConfig+0x2ec>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d138      	bne.n	8002f64 <UART_SetConfig+0x16c>
 8002ef2:	4b7b      	ldr	r3, [pc, #492]	@ (80030e0 <UART_SetConfig+0x2e8>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d82d      	bhi.n	8002f5c <UART_SetConfig+0x164>
 8002f00:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <UART_SetConfig+0x110>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f5d 	.word	0x08002f5d
 8002f10:	08002f5d 	.word	0x08002f5d
 8002f14:	08002f5d 	.word	0x08002f5d
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f5d 	.word	0x08002f5d
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f5d 	.word	0x08002f5d
 8002f30:	08002f5d 	.word	0x08002f5d
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f55 	.word	0x08002f55
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f42:	e098      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e094      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f52:	e090      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f54:	2308      	movs	r3, #8
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e08c      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f62:	e088      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5f      	ldr	r2, [pc, #380]	@ (80030e8 <UART_SetConfig+0x2f0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d125      	bne.n	8002fba <UART_SetConfig+0x1c2>
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80030e0 <UART_SetConfig+0x2e8>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f78:	2b30      	cmp	r3, #48	@ 0x30
 8002f7a:	d016      	beq.n	8002faa <UART_SetConfig+0x1b2>
 8002f7c:	2b30      	cmp	r3, #48	@ 0x30
 8002f7e:	d818      	bhi.n	8002fb2 <UART_SetConfig+0x1ba>
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d00a      	beq.n	8002f9a <UART_SetConfig+0x1a2>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d814      	bhi.n	8002fb2 <UART_SetConfig+0x1ba>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <UART_SetConfig+0x19a>
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d008      	beq.n	8002fa2 <UART_SetConfig+0x1aa>
 8002f90:	e00f      	b.n	8002fb2 <UART_SetConfig+0x1ba>
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f98:	e06d      	b.n	8003076 <UART_SetConfig+0x27e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa0:	e069      	b.n	8003076 <UART_SetConfig+0x27e>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa8:	e065      	b.n	8003076 <UART_SetConfig+0x27e>
 8002faa:	2308      	movs	r3, #8
 8002fac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb0:	e061      	b.n	8003076 <UART_SetConfig+0x27e>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb8:	e05d      	b.n	8003076 <UART_SetConfig+0x27e>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4b      	ldr	r2, [pc, #300]	@ (80030ec <UART_SetConfig+0x2f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d125      	bne.n	8003010 <UART_SetConfig+0x218>
 8002fc4:	4b46      	ldr	r3, [pc, #280]	@ (80030e0 <UART_SetConfig+0x2e8>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fd0:	d016      	beq.n	8003000 <UART_SetConfig+0x208>
 8002fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fd4:	d818      	bhi.n	8003008 <UART_SetConfig+0x210>
 8002fd6:	2b80      	cmp	r3, #128	@ 0x80
 8002fd8:	d00a      	beq.n	8002ff0 <UART_SetConfig+0x1f8>
 8002fda:	2b80      	cmp	r3, #128	@ 0x80
 8002fdc:	d814      	bhi.n	8003008 <UART_SetConfig+0x210>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <UART_SetConfig+0x1f0>
 8002fe2:	2b40      	cmp	r3, #64	@ 0x40
 8002fe4:	d008      	beq.n	8002ff8 <UART_SetConfig+0x200>
 8002fe6:	e00f      	b.n	8003008 <UART_SetConfig+0x210>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fee:	e042      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff6:	e03e      	b.n	8003076 <UART_SetConfig+0x27e>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ffe:	e03a      	b.n	8003076 <UART_SetConfig+0x27e>
 8003000:	2308      	movs	r3, #8
 8003002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003006:	e036      	b.n	8003076 <UART_SetConfig+0x27e>
 8003008:	2310      	movs	r3, #16
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800300e:	e032      	b.n	8003076 <UART_SetConfig+0x27e>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a30      	ldr	r2, [pc, #192]	@ (80030d8 <UART_SetConfig+0x2e0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12a      	bne.n	8003070 <UART_SetConfig+0x278>
 800301a:	4b31      	ldr	r3, [pc, #196]	@ (80030e0 <UART_SetConfig+0x2e8>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003020:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003024:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003028:	d01a      	beq.n	8003060 <UART_SetConfig+0x268>
 800302a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800302e:	d81b      	bhi.n	8003068 <UART_SetConfig+0x270>
 8003030:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003034:	d00c      	beq.n	8003050 <UART_SetConfig+0x258>
 8003036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800303a:	d815      	bhi.n	8003068 <UART_SetConfig+0x270>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <UART_SetConfig+0x250>
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d008      	beq.n	8003058 <UART_SetConfig+0x260>
 8003046:	e00f      	b.n	8003068 <UART_SetConfig+0x270>
 8003048:	2300      	movs	r3, #0
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304e:	e012      	b.n	8003076 <UART_SetConfig+0x27e>
 8003050:	2302      	movs	r3, #2
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003056:	e00e      	b.n	8003076 <UART_SetConfig+0x27e>
 8003058:	2304      	movs	r3, #4
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305e:	e00a      	b.n	8003076 <UART_SetConfig+0x27e>
 8003060:	2308      	movs	r3, #8
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003066:	e006      	b.n	8003076 <UART_SetConfig+0x27e>
 8003068:	2310      	movs	r3, #16
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800306e:	e002      	b.n	8003076 <UART_SetConfig+0x27e>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <UART_SetConfig+0x2e0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f040 80a8 	bne.w	80031d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003082:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003086:	2b08      	cmp	r3, #8
 8003088:	d834      	bhi.n	80030f4 <UART_SetConfig+0x2fc>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x298>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030f5 	.word	0x080030f5
 8003098:	080030bd 	.word	0x080030bd
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	080030c3 	.word	0x080030c3
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	080030f5 	.word	0x080030f5
 80030ac:	080030f5 	.word	0x080030f5
 80030b0:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7fe ffb2 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80030b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030ba:	e021      	b.n	8003100 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <UART_SetConfig+0x2f8>)
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030c0:	e01e      	b.n	8003100 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe ff3d 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80030c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030c8:	e01a      	b.n	8003100 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030d0:	e016      	b.n	8003100 <UART_SetConfig+0x308>
 80030d2:	bf00      	nop
 80030d4:	cfff69f3 	.word	0xcfff69f3
 80030d8:	40008000 	.word	0x40008000
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40004800 	.word	0x40004800
 80030ec:	40004c00 	.word	0x40004c00
 80030f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 812a 	beq.w	800335c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	4a9e      	ldr	r2, [pc, #632]	@ (8003388 <UART_SetConfig+0x590>)
 800310e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003112:	461a      	mov	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	fbb3 f3f2 	udiv	r3, r3, r2
 800311a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	429a      	cmp	r2, r3
 800312a:	d305      	bcc.n	8003138 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	429a      	cmp	r2, r3
 8003136:	d903      	bls.n	8003140 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800313e:	e10d      	b.n	800335c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	2200      	movs	r2, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	4a8e      	ldr	r2, [pc, #568]	@ (8003388 <UART_SetConfig+0x590>)
 800314e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003152:	b29b      	uxth	r3, r3
 8003154:	2200      	movs	r2, #0
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800315e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003162:	f7fd f8ad 	bl	80002c0 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	020b      	lsls	r3, r1, #8
 8003178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800317c:	0202      	lsls	r2, r0, #8
 800317e:	6979      	ldr	r1, [r7, #20]
 8003180:	6849      	ldr	r1, [r1, #4]
 8003182:	0849      	lsrs	r1, r1, #1
 8003184:	2000      	movs	r0, #0
 8003186:	460c      	mov	r4, r1
 8003188:	4605      	mov	r5, r0
 800318a:	eb12 0804 	adds.w	r8, r2, r4
 800318e:	eb43 0905 	adc.w	r9, r3, r5
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	469a      	mov	sl, r3
 800319a:	4693      	mov	fp, r2
 800319c:	4652      	mov	r2, sl
 800319e:	465b      	mov	r3, fp
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	f7fd f88c 	bl	80002c0 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4613      	mov	r3, r2
 80031ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031b6:	d308      	bcc.n	80031ca <UART_SetConfig+0x3d2>
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031be:	d204      	bcs.n	80031ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	e0c8      	b.n	800335c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031d0:	e0c4      	b.n	800335c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031da:	d167      	bne.n	80032ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80031dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d828      	bhi.n	8003236 <UART_SetConfig+0x43e>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <UART_SetConfig+0x3f4>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7fe ff04 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8003214:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003216:	e014      	b.n	8003242 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7fe ff16 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 800321c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800321e:	e010      	b.n	8003242 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <UART_SetConfig+0x594>)
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003224:	e00d      	b.n	8003242 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fe8b 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 800322a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800322c:	e009      	b.n	8003242 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003234:	e005      	b.n	8003242 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8089 	beq.w	800335c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	4a4e      	ldr	r2, [pc, #312]	@ (8003388 <UART_SetConfig+0x590>)
 8003250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003254:	461a      	mov	r2, r3
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	fbb3 f3f2 	udiv	r3, r3, r2
 800325c:	005a      	lsls	r2, r3, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	441a      	add	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	d916      	bls.n	80032a4 <UART_SetConfig+0x4ac>
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800327c:	d212      	bcs.n	80032a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f023 030f 	bic.w	r3, r3, #15
 8003286:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	b29a      	uxth	r2, r3
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	4313      	orrs	r3, r2
 8003298:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	8bfa      	ldrh	r2, [r7, #30]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e05b      	b.n	800335c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032aa:	e057      	b.n	800335c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d828      	bhi.n	8003306 <UART_SetConfig+0x50e>
 80032b4:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <UART_SetConfig+0x4c4>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	08003307 	.word	0x08003307
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003307 	.word	0x08003307
 80032dc:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe fe9c 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80032e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032e6:	e014      	b.n	8003312 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe feae 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 80032ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ee:	e010      	b.n	8003312 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b26      	ldr	r3, [pc, #152]	@ (800338c <UART_SetConfig+0x594>)
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032f4:	e00d      	b.n	8003312 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fe23 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 80032fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032fc:	e009      	b.n	8003312 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003304:	e005      	b.n	8003312 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003310:	bf00      	nop
    }

    if (pclk != 0U)
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d021      	beq.n	800335c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <UART_SetConfig+0x590>)
 800331e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003322:	461a      	mov	r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	fbb3 f2f2 	udiv	r2, r3, r2
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	441a      	add	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	d909      	bls.n	8003356 <UART_SetConfig+0x55e>
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003348:	d205      	bcs.n	8003356 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	b29a      	uxth	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	e002      	b.n	800335c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2201      	movs	r2, #1
 8003360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2201      	movs	r2, #1
 8003368:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2200      	movs	r2, #0
 8003370:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003378:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800337c:	4618      	mov	r0, r3
 800337e:	3730      	adds	r7, #48	@ 0x30
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	080056a8 	.word	0x080056a8
 800338c:	00f42400 	.word	0x00f42400

08003390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800348e:	d10a      	bne.n	80034a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b098      	sub	sp, #96	@ 0x60
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e4:	f7fd fcb4 	bl	8000e50 <HAL_GetTick>
 80034e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d12f      	bne.n	8003558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f88e 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d022      	beq.n	8003558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003526:	653b      	str	r3, [r7, #80]	@ 0x50
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003530:	647b      	str	r3, [r7, #68]	@ 0x44
 8003532:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800353e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e6      	bne.n	8003512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e063      	b.n	8003620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d149      	bne.n	80035fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	2200      	movs	r2, #0
 8003570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f857 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03c      	beq.n	80035fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	623b      	str	r3, [r7, #32]
   return(result);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e6      	bne.n	8003580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3308      	adds	r3, #8
 80035b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3308      	adds	r3, #8
 80035d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	617b      	str	r3, [r7, #20]
   return(result);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e012      	b.n	8003620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3758      	adds	r7, #88	@ 0x58
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	e04f      	b.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003640:	d04b      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fd fc05 	bl	8000e50 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <UART_WaitOnFlagUntilTimeout+0x30>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e04e      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	d037      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b80      	cmp	r3, #128	@ 0x80
 800366e:	d034      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d031      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b08      	cmp	r3, #8
 8003682:	d110      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2208      	movs	r2, #8
 800368a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f95b 	bl	8003948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2208      	movs	r2, #8
 8003696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e029      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b4:	d111      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f941 	bl	8003948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00f      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d0a0      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003704:	b480      	push	{r7}
 8003706:	b0a3      	sub	sp, #140	@ 0x8c
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003736:	d10e      	bne.n	8003756 <UART_Start_Receive_IT+0x52>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <UART_Start_Receive_IT+0x48>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003746:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800374a:	e02d      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	@ 0xff
 8003750:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003754:	e028      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10d      	bne.n	800377a <UART_Start_Receive_IT+0x76>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <UART_Start_Receive_IT+0x6c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	@ 0xff
 800376a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800376e:	e01b      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	227f      	movs	r2, #127	@ 0x7f
 8003774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003778:	e016      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003782:	d10d      	bne.n	80037a0 <UART_Start_Receive_IT+0x9c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <UART_Start_Receive_IT+0x92>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	227f      	movs	r2, #127	@ 0x7f
 8003790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003794:	e008      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	223f      	movs	r2, #63	@ 0x3f
 800379a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800379e:	e003      	b.n	80037a8 <UART_Start_Receive_IT+0xa4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2222      	movs	r2, #34	@ 0x22
 80037b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80037c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80037dc:	673a      	str	r2, [r7, #112]	@ 0x70
 80037de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80037e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80037ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e3      	bne.n	80037b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f8:	d14f      	bne.n	800389a <UART_Start_Receive_IT+0x196>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003800:	88fa      	ldrh	r2, [r7, #6]
 8003802:	429a      	cmp	r2, r3
 8003804:	d349      	bcc.n	800389a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380e:	d107      	bne.n	8003820 <UART_Start_Receive_IT+0x11c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a47      	ldr	r2, [pc, #284]	@ (8003938 <UART_Start_Receive_IT+0x234>)
 800381c:	675a      	str	r2, [r3, #116]	@ 0x74
 800381e:	e002      	b.n	8003826 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a46      	ldr	r2, [pc, #280]	@ (800393c <UART_Start_Receive_IT+0x238>)
 8003824:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01a      	beq.n	8003864 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800383c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003852:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003856:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e4      	bne.n	800382e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003884:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800388a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_Start_Receive_IT+0x160>
 8003898:	e046      	b.n	8003928 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d107      	bne.n	80038b4 <UART_Start_Receive_IT+0x1b0>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <UART_Start_Receive_IT+0x23c>)
 80038b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80038b2:	e002      	b.n	80038ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a23      	ldr	r2, [pc, #140]	@ (8003944 <UART_Start_Receive_IT+0x240>)
 80038b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d019      	beq.n	80038f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80038d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_Start_Receive_IT+0x1be>
 80038f4:	e018      	b.n	8003928 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f043 0320 	orr.w	r3, r3, #32
 800390a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	61bb      	str	r3, [r7, #24]
   return(result);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	378c      	adds	r7, #140	@ 0x8c
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	08004165 	.word	0x08004165
 800393c:	08003e01 	.word	0x08003e01
 8003940:	08003c49 	.word	0x08003c49
 8003944:	08003a91 	.word	0x08003a91

08003948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003948:	b480      	push	{r7}
 800394a:	b095      	sub	sp, #84	@ 0x54
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003970:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e6      	bne.n	8003950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3308      	adds	r3, #8
 8003988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	61fb      	str	r3, [r7, #28]
   return(result);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3308      	adds	r3, #8
 80039a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e3      	bne.n	8003982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d118      	bne.n	80039f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 0310 	bic.w	r3, r3, #16
 80039d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6979      	ldr	r1, [r7, #20]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e6      	bne.n	80039c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a08:	bf00      	nop
 8003a0a:	3754      	adds	r7, #84	@ 0x54
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f7ff f9ce 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e6      	bne.n	8003a40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff f999 	bl	8002db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b09c      	sub	sp, #112	@ 0x70
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003a9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa8:	2b22      	cmp	r3, #34	@ 0x22
 8003aaa:	f040 80be 	bne.w	8003c2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ab8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003abc:	b2d9      	uxtb	r1, r3
 8003abe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	400a      	ands	r2, r1
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 80a1 	bne.w	8003c3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <UART_RxISR_8BIT+0x1b4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01f      	beq.n	8003bbc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d018      	beq.n	8003bbc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	623b      	str	r3, [r7, #32]
   return(result);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003baa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e6      	bne.n	8003b8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d12e      	bne.n	8003c22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0310 	bic.w	r3, r3, #16
 8003bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d103      	bne.n	8003c12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2210      	movs	r2, #16
 8003c10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff f8e0 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c20:	e00b      	b.n	8003c3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc fdce 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 8003c28:	e007      	b.n	8003c3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0208 	orr.w	r2, r2, #8
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	3770      	adds	r7, #112	@ 0x70
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40008000 	.word	0x40008000

08003c48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b09c      	sub	sp, #112	@ 0x70
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003c56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c60:	2b22      	cmp	r3, #34	@ 0x22
 8003c62:	f040 80be 	bne.w	8003de2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	1c9a      	adds	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f040 80a1 	bne.w	8003df2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e6      	bne.n	8003cb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d02:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d0a:	e841 2300 	strex	r3, r2, [r1]
 8003d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e5      	bne.n	8003ce2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <UART_RxISR_16BIT+0x1b4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d01f      	beq.n	8003d74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d12e      	bne.n	8003dda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d103      	bne.n	8003dca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f804 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd8:	e00b      	b.n	8003df2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fc fcf2 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 8003de0:	e007      	b.n	8003df2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	3770      	adds	r7, #112	@ 0x70
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40008000 	.word	0x40008000

08003e00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b0ac      	sub	sp, #176	@ 0xb0
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003e0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e36:	2b22      	cmp	r3, #34	@ 0x22
 8003e38:	f040 8183 	bne.w	8004142 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003e42:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e46:	e126      	b.n	8004096 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003e56:	b2d9      	uxtb	r1, r3
 8003e58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	400a      	ands	r2, r1
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d053      	beq.n	8003f42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d011      	beq.n	8003eca <UART_RxISR_8BIT_FIFOEN+0xca>
 8003ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d011      	beq.n	8003f2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2204      	movs	r2, #4
 8003f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f20:	f043 0202 	orr.w	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fe ff49 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 80a3 	bne.w	8004096 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f74:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003f78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003f80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e4      	bne.n	8003f50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3308      	adds	r3, #8
 8003faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fae:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003fb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003fb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003fbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e1      	bne.n	8003f86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a60      	ldr	r2, [pc, #384]	@ (800415c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d021      	beq.n	8004024 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01a      	beq.n	8004024 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ffe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004010:	657b      	str	r3, [r7, #84]	@ 0x54
 8004012:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004016:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e4      	bne.n	8003fee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d130      	bne.n	800408e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004054:	643b      	str	r3, [r7, #64]	@ 0x40
 8004056:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800405a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e4      	bne.n	8004032 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d103      	bne.n	800407e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004084:	4619      	mov	r1, r3
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe feaa 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800408c:	e00e      	b.n	80040ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fc fb98 	bl	80007c4 <HAL_UART_RxCpltCallback>
        break;
 8004094:	e00a      	b.n	80040ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004096:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800409e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f47f aece 	bne.w	8003e48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80040b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80040b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d049      	beq.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x352>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80040c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d242      	bcs.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3308      	adds	r3, #8
 80040d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	61fb      	str	r3, [r7, #28]
   return(result);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3308      	adds	r3, #8
 80040ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80040f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e3      	bne.n	80040cc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004108:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	60bb      	str	r3, [r7, #8]
   return(result);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f043 0320 	orr.w	r3, r3, #32
 800411e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e4      	bne.n	800410a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004140:	e007      	b.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	bf00      	nop
 8004154:	37b0      	adds	r7, #176	@ 0xb0
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40008000 	.word	0x40008000
 8004160:	08003a91 	.word	0x08003a91

08004164 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0ae      	sub	sp, #184	@ 0xb8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004172:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800419a:	2b22      	cmp	r3, #34	@ 0x22
 800419c:	f040 8187 	bne.w	80044ae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80041a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041aa:	e12a      	b.n	8004402 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80041be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80041c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80041c6:	4013      	ands	r3, r2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	1c9a      	adds	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d053      	beq.n	80042aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d011      	beq.n	8004232 <UART_RxISR_16BIT_FIFOEN+0xce>
 800420e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800423e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d011      	beq.n	8004292 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800426e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	f043 0202 	orr.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fe fd95 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80a5 	bne.w	8004402 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e2      	bne.n	80042b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800431a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004320:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e1      	bne.n	80042f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a60      	ldr	r2, [pc, #384]	@ (80044c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d021      	beq.n	8004390 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01a      	beq.n	8004390 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800436e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800437c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800437e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800438a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e4      	bne.n	800435a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d130      	bne.n	80043fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e4      	bne.n	800439e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d103      	bne.n	80043ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2210      	movs	r2, #16
 80043e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fe fcf4 	bl	8002de0 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80043f8:	e00e      	b.n	8004418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc f9e2 	bl	80007c4 <HAL_UART_RxCpltCallback>
        break;
 8004400:	e00a      	b.n	8004418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004402:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800440a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	f47f aeca 	bne.w	80041ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800441e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004422:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004426:	2b00      	cmp	r3, #0
 8004428:	d049      	beq.n	80044be <UART_RxISR_16BIT_FIFOEN+0x35a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004430:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004434:	429a      	cmp	r2, r3
 8004436:	d242      	bcs.n	80044be <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	623b      	str	r3, [r7, #32]
   return(result);
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800445c:	633a      	str	r2, [r7, #48]	@ 0x30
 800445e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e3      	bne.n	8004438 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	@ (80044cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004474:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f043 0320 	orr.w	r3, r3, #32
 800448a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	617b      	str	r3, [r7, #20]
   return(result);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e4      	bne.n	8004476 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044ac:	e007      	b.n	80044be <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	619a      	str	r2, [r3, #24]
}
 80044be:	bf00      	nop
 80044c0:	37b8      	adds	r7, #184	@ 0xb8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40008000 	.word	0x40008000
 80044cc:	08003c49 	.word	0x08003c49

080044d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_UARTEx_DisableFifoMode+0x16>
 800451e:	2302      	movs	r3, #2
 8004520:	e027      	b.n	8004572 <HAL_UARTEx_DisableFifoMode+0x66>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2224      	movs	r2, #36	@ 0x24
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004592:	2302      	movs	r3, #2
 8004594:	e02d      	b.n	80045f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2224      	movs	r2, #36	@ 0x24
 80045a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f850 	bl	8004678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800460e:	2302      	movs	r3, #2
 8004610:	e02d      	b.n	800466e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2224      	movs	r2, #36	@ 0x24
 800461e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f812 	bl	8004678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004698:	e031      	b.n	80046fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800469a:	2308      	movs	r3, #8
 800469c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800469e:	2308      	movs	r3, #8
 80046a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	0e5b      	lsrs	r3, r3, #25
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	0f5b      	lsrs	r3, r3, #29
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
 80046c4:	7b3a      	ldrb	r2, [r7, #12]
 80046c6:	4911      	ldr	r1, [pc, #68]	@ (800470c <UARTEx_SetNbDataToProcess+0x94>)
 80046c8:	5c8a      	ldrb	r2, [r1, r2]
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046ce:	7b3a      	ldrb	r2, [r7, #12]
 80046d0:	490f      	ldr	r1, [pc, #60]	@ (8004710 <UARTEx_SetNbDataToProcess+0x98>)
 80046d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	7b7a      	ldrb	r2, [r7, #13]
 80046e4:	4909      	ldr	r1, [pc, #36]	@ (800470c <UARTEx_SetNbDataToProcess+0x94>)
 80046e6:	5c8a      	ldrb	r2, [r1, r2]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80046ec:	7b7a      	ldrb	r2, [r7, #13]
 80046ee:	4908      	ldr	r1, [pc, #32]	@ (8004710 <UARTEx_SetNbDataToProcess+0x98>)
 80046f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	080056c0 	.word	0x080056c0
 8004710:	080056c8 	.word	0x080056c8

08004714 <std>:
 8004714:	2300      	movs	r3, #0
 8004716:	b510      	push	{r4, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	e9c0 3300 	strd	r3, r3, [r0]
 800471e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004722:	6083      	str	r3, [r0, #8]
 8004724:	8181      	strh	r1, [r0, #12]
 8004726:	6643      	str	r3, [r0, #100]	@ 0x64
 8004728:	81c2      	strh	r2, [r0, #14]
 800472a:	6183      	str	r3, [r0, #24]
 800472c:	4619      	mov	r1, r3
 800472e:	2208      	movs	r2, #8
 8004730:	305c      	adds	r0, #92	@ 0x5c
 8004732:	f000 f9f9 	bl	8004b28 <memset>
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <std+0x58>)
 8004738:	6263      	str	r3, [r4, #36]	@ 0x24
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <std+0x5c>)
 800473c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <std+0x60>)
 8004740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <std+0x64>)
 8004744:	6323      	str	r3, [r4, #48]	@ 0x30
 8004746:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <std+0x68>)
 8004748:	6224      	str	r4, [r4, #32]
 800474a:	429c      	cmp	r4, r3
 800474c:	d006      	beq.n	800475c <std+0x48>
 800474e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004752:	4294      	cmp	r4, r2
 8004754:	d002      	beq.n	800475c <std+0x48>
 8004756:	33d0      	adds	r3, #208	@ 0xd0
 8004758:	429c      	cmp	r4, r3
 800475a:	d105      	bne.n	8004768 <std+0x54>
 800475c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	f000 ba58 	b.w	8004c18 <__retarget_lock_init_recursive>
 8004768:	bd10      	pop	{r4, pc}
 800476a:	bf00      	nop
 800476c:	08004979 	.word	0x08004979
 8004770:	0800499b 	.word	0x0800499b
 8004774:	080049d3 	.word	0x080049d3
 8004778:	080049f7 	.word	0x080049f7
 800477c:	200003d4 	.word	0x200003d4

08004780 <stdio_exit_handler>:
 8004780:	4a02      	ldr	r2, [pc, #8]	@ (800478c <stdio_exit_handler+0xc>)
 8004782:	4903      	ldr	r1, [pc, #12]	@ (8004790 <stdio_exit_handler+0x10>)
 8004784:	4803      	ldr	r0, [pc, #12]	@ (8004794 <stdio_exit_handler+0x14>)
 8004786:	f000 b869 	b.w	800485c <_fwalk_sglue>
 800478a:	bf00      	nop
 800478c:	2000000c 	.word	0x2000000c
 8004790:	080054b9 	.word	0x080054b9
 8004794:	2000001c 	.word	0x2000001c

08004798 <cleanup_stdio>:
 8004798:	6841      	ldr	r1, [r0, #4]
 800479a:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <cleanup_stdio+0x34>)
 800479c:	4299      	cmp	r1, r3
 800479e:	b510      	push	{r4, lr}
 80047a0:	4604      	mov	r4, r0
 80047a2:	d001      	beq.n	80047a8 <cleanup_stdio+0x10>
 80047a4:	f000 fe88 	bl	80054b8 <_fflush_r>
 80047a8:	68a1      	ldr	r1, [r4, #8]
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <cleanup_stdio+0x38>)
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d002      	beq.n	80047b6 <cleanup_stdio+0x1e>
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 fe81 	bl	80054b8 <_fflush_r>
 80047b6:	68e1      	ldr	r1, [r4, #12]
 80047b8:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <cleanup_stdio+0x3c>)
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d004      	beq.n	80047c8 <cleanup_stdio+0x30>
 80047be:	4620      	mov	r0, r4
 80047c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c4:	f000 be78 	b.w	80054b8 <_fflush_r>
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	bf00      	nop
 80047cc:	200003d4 	.word	0x200003d4
 80047d0:	2000043c 	.word	0x2000043c
 80047d4:	200004a4 	.word	0x200004a4

080047d8 <global_stdio_init.part.0>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <global_stdio_init.part.0+0x30>)
 80047dc:	4c0b      	ldr	r4, [pc, #44]	@ (800480c <global_stdio_init.part.0+0x34>)
 80047de:	4a0c      	ldr	r2, [pc, #48]	@ (8004810 <global_stdio_init.part.0+0x38>)
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	4620      	mov	r0, r4
 80047e4:	2200      	movs	r2, #0
 80047e6:	2104      	movs	r1, #4
 80047e8:	f7ff ff94 	bl	8004714 <std>
 80047ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047f0:	2201      	movs	r2, #1
 80047f2:	2109      	movs	r1, #9
 80047f4:	f7ff ff8e 	bl	8004714 <std>
 80047f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047fc:	2202      	movs	r2, #2
 80047fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004802:	2112      	movs	r1, #18
 8004804:	f7ff bf86 	b.w	8004714 <std>
 8004808:	2000050c 	.word	0x2000050c
 800480c:	200003d4 	.word	0x200003d4
 8004810:	08004781 	.word	0x08004781

08004814 <__sfp_lock_acquire>:
 8004814:	4801      	ldr	r0, [pc, #4]	@ (800481c <__sfp_lock_acquire+0x8>)
 8004816:	f000 ba00 	b.w	8004c1a <__retarget_lock_acquire_recursive>
 800481a:	bf00      	nop
 800481c:	20000515 	.word	0x20000515

08004820 <__sfp_lock_release>:
 8004820:	4801      	ldr	r0, [pc, #4]	@ (8004828 <__sfp_lock_release+0x8>)
 8004822:	f000 b9fb 	b.w	8004c1c <__retarget_lock_release_recursive>
 8004826:	bf00      	nop
 8004828:	20000515 	.word	0x20000515

0800482c <__sinit>:
 800482c:	b510      	push	{r4, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	f7ff fff0 	bl	8004814 <__sfp_lock_acquire>
 8004834:	6a23      	ldr	r3, [r4, #32]
 8004836:	b11b      	cbz	r3, 8004840 <__sinit+0x14>
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	f7ff bff0 	b.w	8004820 <__sfp_lock_release>
 8004840:	4b04      	ldr	r3, [pc, #16]	@ (8004854 <__sinit+0x28>)
 8004842:	6223      	str	r3, [r4, #32]
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <__sinit+0x2c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f5      	bne.n	8004838 <__sinit+0xc>
 800484c:	f7ff ffc4 	bl	80047d8 <global_stdio_init.part.0>
 8004850:	e7f2      	b.n	8004838 <__sinit+0xc>
 8004852:	bf00      	nop
 8004854:	08004799 	.word	0x08004799
 8004858:	2000050c 	.word	0x2000050c

0800485c <_fwalk_sglue>:
 800485c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004860:	4607      	mov	r7, r0
 8004862:	4688      	mov	r8, r1
 8004864:	4614      	mov	r4, r2
 8004866:	2600      	movs	r6, #0
 8004868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800486c:	f1b9 0901 	subs.w	r9, r9, #1
 8004870:	d505      	bpl.n	800487e <_fwalk_sglue+0x22>
 8004872:	6824      	ldr	r4, [r4, #0]
 8004874:	2c00      	cmp	r4, #0
 8004876:	d1f7      	bne.n	8004868 <_fwalk_sglue+0xc>
 8004878:	4630      	mov	r0, r6
 800487a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d907      	bls.n	8004894 <_fwalk_sglue+0x38>
 8004884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004888:	3301      	adds	r3, #1
 800488a:	d003      	beq.n	8004894 <_fwalk_sglue+0x38>
 800488c:	4629      	mov	r1, r5
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	4306      	orrs	r6, r0
 8004894:	3568      	adds	r5, #104	@ 0x68
 8004896:	e7e9      	b.n	800486c <_fwalk_sglue+0x10>

08004898 <iprintf>:
 8004898:	b40f      	push	{r0, r1, r2, r3}
 800489a:	b507      	push	{r0, r1, r2, lr}
 800489c:	4906      	ldr	r1, [pc, #24]	@ (80048b8 <iprintf+0x20>)
 800489e:	ab04      	add	r3, sp, #16
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a6:	6881      	ldr	r1, [r0, #8]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	f000 fadb 	bl	8004e64 <_vfiprintf_r>
 80048ae:	b003      	add	sp, #12
 80048b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b4:	b004      	add	sp, #16
 80048b6:	4770      	bx	lr
 80048b8:	20000018 	.word	0x20000018

080048bc <_puts_r>:
 80048bc:	6a03      	ldr	r3, [r0, #32]
 80048be:	b570      	push	{r4, r5, r6, lr}
 80048c0:	6884      	ldr	r4, [r0, #8]
 80048c2:	4605      	mov	r5, r0
 80048c4:	460e      	mov	r6, r1
 80048c6:	b90b      	cbnz	r3, 80048cc <_puts_r+0x10>
 80048c8:	f7ff ffb0 	bl	800482c <__sinit>
 80048cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048ce:	07db      	lsls	r3, r3, #31
 80048d0:	d405      	bmi.n	80048de <_puts_r+0x22>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	0598      	lsls	r0, r3, #22
 80048d6:	d402      	bmi.n	80048de <_puts_r+0x22>
 80048d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048da:	f000 f99e 	bl	8004c1a <__retarget_lock_acquire_recursive>
 80048de:	89a3      	ldrh	r3, [r4, #12]
 80048e0:	0719      	lsls	r1, r3, #28
 80048e2:	d502      	bpl.n	80048ea <_puts_r+0x2e>
 80048e4:	6923      	ldr	r3, [r4, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d135      	bne.n	8004956 <_puts_r+0x9a>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f8c5 	bl	8004a7c <__swsetup_r>
 80048f2:	b380      	cbz	r0, 8004956 <_puts_r+0x9a>
 80048f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80048f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048fa:	07da      	lsls	r2, r3, #31
 80048fc:	d405      	bmi.n	800490a <_puts_r+0x4e>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	059b      	lsls	r3, r3, #22
 8004902:	d402      	bmi.n	800490a <_puts_r+0x4e>
 8004904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004906:	f000 f989 	bl	8004c1c <__retarget_lock_release_recursive>
 800490a:	4628      	mov	r0, r5
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	2b00      	cmp	r3, #0
 8004910:	da04      	bge.n	800491c <_puts_r+0x60>
 8004912:	69a2      	ldr	r2, [r4, #24]
 8004914:	429a      	cmp	r2, r3
 8004916:	dc17      	bgt.n	8004948 <_puts_r+0x8c>
 8004918:	290a      	cmp	r1, #10
 800491a:	d015      	beq.n	8004948 <_puts_r+0x8c>
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	7019      	strb	r1, [r3, #0]
 8004924:	68a3      	ldr	r3, [r4, #8]
 8004926:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800492a:	3b01      	subs	r3, #1
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	2900      	cmp	r1, #0
 8004930:	d1ed      	bne.n	800490e <_puts_r+0x52>
 8004932:	2b00      	cmp	r3, #0
 8004934:	da11      	bge.n	800495a <_puts_r+0x9e>
 8004936:	4622      	mov	r2, r4
 8004938:	210a      	movs	r1, #10
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f85f 	bl	80049fe <__swbuf_r>
 8004940:	3001      	adds	r0, #1
 8004942:	d0d7      	beq.n	80048f4 <_puts_r+0x38>
 8004944:	250a      	movs	r5, #10
 8004946:	e7d7      	b.n	80048f8 <_puts_r+0x3c>
 8004948:	4622      	mov	r2, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f857 	bl	80049fe <__swbuf_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d1e7      	bne.n	8004924 <_puts_r+0x68>
 8004954:	e7ce      	b.n	80048f4 <_puts_r+0x38>
 8004956:	3e01      	subs	r6, #1
 8004958:	e7e4      	b.n	8004924 <_puts_r+0x68>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	6022      	str	r2, [r4, #0]
 8004960:	220a      	movs	r2, #10
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e7ee      	b.n	8004944 <_puts_r+0x88>
	...

08004968 <puts>:
 8004968:	4b02      	ldr	r3, [pc, #8]	@ (8004974 <puts+0xc>)
 800496a:	4601      	mov	r1, r0
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f7ff bfa5 	b.w	80048bc <_puts_r>
 8004972:	bf00      	nop
 8004974:	20000018 	.word	0x20000018

08004978 <__sread>:
 8004978:	b510      	push	{r4, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	f000 f8fc 	bl	8004b7c <_read_r>
 8004984:	2800      	cmp	r0, #0
 8004986:	bfab      	itete	ge
 8004988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800498a:	89a3      	ldrhlt	r3, [r4, #12]
 800498c:	181b      	addge	r3, r3, r0
 800498e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004992:	bfac      	ite	ge
 8004994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004996:	81a3      	strhlt	r3, [r4, #12]
 8004998:	bd10      	pop	{r4, pc}

0800499a <__swrite>:
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	461f      	mov	r7, r3
 80049a0:	898b      	ldrh	r3, [r1, #12]
 80049a2:	05db      	lsls	r3, r3, #23
 80049a4:	4605      	mov	r5, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	4616      	mov	r6, r2
 80049aa:	d505      	bpl.n	80049b8 <__swrite+0x1e>
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	2302      	movs	r3, #2
 80049b2:	2200      	movs	r2, #0
 80049b4:	f000 f8d0 	bl	8004b58 <_lseek_r>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	4632      	mov	r2, r6
 80049c6:	463b      	mov	r3, r7
 80049c8:	4628      	mov	r0, r5
 80049ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	f000 b8e7 	b.w	8004ba0 <_write_r>

080049d2 <__sseek>:
 80049d2:	b510      	push	{r4, lr}
 80049d4:	460c      	mov	r4, r1
 80049d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049da:	f000 f8bd 	bl	8004b58 <_lseek_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	bf15      	itete	ne
 80049e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049ee:	81a3      	strheq	r3, [r4, #12]
 80049f0:	bf18      	it	ne
 80049f2:	81a3      	strhne	r3, [r4, #12]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__sclose>:
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 b89d 	b.w	8004b38 <_close_r>

080049fe <__swbuf_r>:
 80049fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a00:	460e      	mov	r6, r1
 8004a02:	4614      	mov	r4, r2
 8004a04:	4605      	mov	r5, r0
 8004a06:	b118      	cbz	r0, 8004a10 <__swbuf_r+0x12>
 8004a08:	6a03      	ldr	r3, [r0, #32]
 8004a0a:	b90b      	cbnz	r3, 8004a10 <__swbuf_r+0x12>
 8004a0c:	f7ff ff0e 	bl	800482c <__sinit>
 8004a10:	69a3      	ldr	r3, [r4, #24]
 8004a12:	60a3      	str	r3, [r4, #8]
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	071a      	lsls	r2, r3, #28
 8004a18:	d501      	bpl.n	8004a1e <__swbuf_r+0x20>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	b943      	cbnz	r3, 8004a30 <__swbuf_r+0x32>
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f82b 	bl	8004a7c <__swsetup_r>
 8004a26:	b118      	cbz	r0, 8004a30 <__swbuf_r+0x32>
 8004a28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	6922      	ldr	r2, [r4, #16]
 8004a34:	1a98      	subs	r0, r3, r2
 8004a36:	6963      	ldr	r3, [r4, #20]
 8004a38:	b2f6      	uxtb	r6, r6
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	4637      	mov	r7, r6
 8004a3e:	dc05      	bgt.n	8004a4c <__swbuf_r+0x4e>
 8004a40:	4621      	mov	r1, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 fd38 	bl	80054b8 <_fflush_r>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1ed      	bne.n	8004a28 <__swbuf_r+0x2a>
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	60a3      	str	r3, [r4, #8]
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	701e      	strb	r6, [r3, #0]
 8004a5a:	6962      	ldr	r2, [r4, #20]
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d004      	beq.n	8004a6c <__swbuf_r+0x6e>
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	07db      	lsls	r3, r3, #31
 8004a66:	d5e1      	bpl.n	8004a2c <__swbuf_r+0x2e>
 8004a68:	2e0a      	cmp	r6, #10
 8004a6a:	d1df      	bne.n	8004a2c <__swbuf_r+0x2e>
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fd22 	bl	80054b8 <_fflush_r>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d0d9      	beq.n	8004a2c <__swbuf_r+0x2e>
 8004a78:	e7d6      	b.n	8004a28 <__swbuf_r+0x2a>
	...

08004a7c <__swsetup_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4b29      	ldr	r3, [pc, #164]	@ (8004b24 <__swsetup_r+0xa8>)
 8004a80:	4605      	mov	r5, r0
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	460c      	mov	r4, r1
 8004a86:	b118      	cbz	r0, 8004a90 <__swsetup_r+0x14>
 8004a88:	6a03      	ldr	r3, [r0, #32]
 8004a8a:	b90b      	cbnz	r3, 8004a90 <__swsetup_r+0x14>
 8004a8c:	f7ff fece 	bl	800482c <__sinit>
 8004a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a94:	0719      	lsls	r1, r3, #28
 8004a96:	d422      	bmi.n	8004ade <__swsetup_r+0x62>
 8004a98:	06da      	lsls	r2, r3, #27
 8004a9a:	d407      	bmi.n	8004aac <__swsetup_r+0x30>
 8004a9c:	2209      	movs	r2, #9
 8004a9e:	602a      	str	r2, [r5, #0]
 8004aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa4:	81a3      	strh	r3, [r4, #12]
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aaa:	e033      	b.n	8004b14 <__swsetup_r+0x98>
 8004aac:	0758      	lsls	r0, r3, #29
 8004aae:	d512      	bpl.n	8004ad6 <__swsetup_r+0x5a>
 8004ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ab2:	b141      	cbz	r1, 8004ac6 <__swsetup_r+0x4a>
 8004ab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d002      	beq.n	8004ac2 <__swsetup_r+0x46>
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 f8af 	bl	8004c20 <_free_r>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6063      	str	r3, [r4, #4]
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	b94b      	cbnz	r3, 8004af6 <__swsetup_r+0x7a>
 8004ae2:	89a3      	ldrh	r3, [r4, #12]
 8004ae4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aec:	d003      	beq.n	8004af6 <__swsetup_r+0x7a>
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 fd2f 	bl	8005554 <__smakebuf_r>
 8004af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afa:	f013 0201 	ands.w	r2, r3, #1
 8004afe:	d00a      	beq.n	8004b16 <__swsetup_r+0x9a>
 8004b00:	2200      	movs	r2, #0
 8004b02:	60a2      	str	r2, [r4, #8]
 8004b04:	6962      	ldr	r2, [r4, #20]
 8004b06:	4252      	negs	r2, r2
 8004b08:	61a2      	str	r2, [r4, #24]
 8004b0a:	6922      	ldr	r2, [r4, #16]
 8004b0c:	b942      	cbnz	r2, 8004b20 <__swsetup_r+0xa4>
 8004b0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b12:	d1c5      	bne.n	8004aa0 <__swsetup_r+0x24>
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	0799      	lsls	r1, r3, #30
 8004b18:	bf58      	it	pl
 8004b1a:	6962      	ldrpl	r2, [r4, #20]
 8004b1c:	60a2      	str	r2, [r4, #8]
 8004b1e:	e7f4      	b.n	8004b0a <__swsetup_r+0x8e>
 8004b20:	2000      	movs	r0, #0
 8004b22:	e7f7      	b.n	8004b14 <__swsetup_r+0x98>
 8004b24:	20000018 	.word	0x20000018

08004b28 <memset>:
 8004b28:	4402      	add	r2, r0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <memset+0xa>
 8004b30:	4770      	bx	lr
 8004b32:	f803 1b01 	strb.w	r1, [r3], #1
 8004b36:	e7f9      	b.n	8004b2c <memset+0x4>

08004b38 <_close_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4d06      	ldr	r5, [pc, #24]	@ (8004b54 <_close_r+0x1c>)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	4604      	mov	r4, r0
 8004b40:	4608      	mov	r0, r1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	f7fb ff41 	bl	80009ca <_close>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_close_r+0x1a>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_close_r+0x1a>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000510 	.word	0x20000510

08004b58 <_lseek_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d07      	ldr	r5, [pc, #28]	@ (8004b78 <_lseek_r+0x20>)
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	4608      	mov	r0, r1
 8004b60:	4611      	mov	r1, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fb ff56 	bl	8000a18 <_lseek>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_lseek_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_lseek_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000510 	.word	0x20000510

08004b7c <_read_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	@ (8004b9c <_read_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fb fee4 	bl	8000958 <_read>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_read_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_read_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000510 	.word	0x20000510

08004ba0 <_write_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	@ (8004bc0 <_write_r+0x20>)
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	4611      	mov	r1, r2
 8004baa:	2200      	movs	r2, #0
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f7fb feef 	bl	8000992 <_write>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_write_r+0x1e>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_write_r+0x1e>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	20000510 	.word	0x20000510

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	@ (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000018 	.word	0x20000018

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c08 <__libc_init_array+0x38>)
 8004bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c0c <__libc_init_array+0x3c>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c10 <__libc_init_array+0x40>)
 8004be2:	4c0c      	ldr	r4, [pc, #48]	@ (8004c14 <__libc_init_array+0x44>)
 8004be4:	f000 fd24 	bl	8005630 <_init>
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	2600      	movs	r6, #0
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	0800570c 	.word	0x0800570c
 8004c0c:	0800570c 	.word	0x0800570c
 8004c10:	0800570c 	.word	0x0800570c
 8004c14:	08005710 	.word	0x08005710

08004c18 <__retarget_lock_init_recursive>:
 8004c18:	4770      	bx	lr

08004c1a <__retarget_lock_acquire_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <__retarget_lock_release_recursive>:
 8004c1c:	4770      	bx	lr
	...

08004c20 <_free_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4605      	mov	r5, r0
 8004c24:	2900      	cmp	r1, #0
 8004c26:	d041      	beq.n	8004cac <_free_r+0x8c>
 8004c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2c:	1f0c      	subs	r4, r1, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	18e4      	addlt	r4, r4, r3
 8004c34:	f000 f8e0 	bl	8004df8 <__malloc_lock>
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <_free_r+0x90>)
 8004c3a:	6813      	ldr	r3, [r2, #0]
 8004c3c:	b933      	cbnz	r3, 8004c4c <_free_r+0x2c>
 8004c3e:	6063      	str	r3, [r4, #4]
 8004c40:	6014      	str	r4, [r2, #0]
 8004c42:	4628      	mov	r0, r5
 8004c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c48:	f000 b8dc 	b.w	8004e04 <__malloc_unlock>
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	d908      	bls.n	8004c62 <_free_r+0x42>
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	1821      	adds	r1, r4, r0
 8004c54:	428b      	cmp	r3, r1
 8004c56:	bf01      	itttt	eq
 8004c58:	6819      	ldreq	r1, [r3, #0]
 8004c5a:	685b      	ldreq	r3, [r3, #4]
 8004c5c:	1809      	addeq	r1, r1, r0
 8004c5e:	6021      	streq	r1, [r4, #0]
 8004c60:	e7ed      	b.n	8004c3e <_free_r+0x1e>
 8004c62:	461a      	mov	r2, r3
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	b10b      	cbz	r3, 8004c6c <_free_r+0x4c>
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	d9fa      	bls.n	8004c62 <_free_r+0x42>
 8004c6c:	6811      	ldr	r1, [r2, #0]
 8004c6e:	1850      	adds	r0, r2, r1
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d10b      	bne.n	8004c8c <_free_r+0x6c>
 8004c74:	6820      	ldr	r0, [r4, #0]
 8004c76:	4401      	add	r1, r0
 8004c78:	1850      	adds	r0, r2, r1
 8004c7a:	4283      	cmp	r3, r0
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	d1e0      	bne.n	8004c42 <_free_r+0x22>
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	6053      	str	r3, [r2, #4]
 8004c86:	4408      	add	r0, r1
 8004c88:	6010      	str	r0, [r2, #0]
 8004c8a:	e7da      	b.n	8004c42 <_free_r+0x22>
 8004c8c:	d902      	bls.n	8004c94 <_free_r+0x74>
 8004c8e:	230c      	movs	r3, #12
 8004c90:	602b      	str	r3, [r5, #0]
 8004c92:	e7d6      	b.n	8004c42 <_free_r+0x22>
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	1821      	adds	r1, r4, r0
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	bf04      	itt	eq
 8004c9c:	6819      	ldreq	r1, [r3, #0]
 8004c9e:	685b      	ldreq	r3, [r3, #4]
 8004ca0:	6063      	str	r3, [r4, #4]
 8004ca2:	bf04      	itt	eq
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	6054      	str	r4, [r2, #4]
 8004caa:	e7ca      	b.n	8004c42 <_free_r+0x22>
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	2000051c 	.word	0x2000051c

08004cb4 <sbrk_aligned>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004cf4 <sbrk_aligned+0x40>)
 8004cb8:	460c      	mov	r4, r1
 8004cba:	6831      	ldr	r1, [r6, #0]
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	b911      	cbnz	r1, 8004cc6 <sbrk_aligned+0x12>
 8004cc0:	f000 fca6 	bl	8005610 <_sbrk_r>
 8004cc4:	6030      	str	r0, [r6, #0]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 fca1 	bl	8005610 <_sbrk_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d103      	bne.n	8004cda <sbrk_aligned+0x26>
 8004cd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	1cc4      	adds	r4, r0, #3
 8004cdc:	f024 0403 	bic.w	r4, r4, #3
 8004ce0:	42a0      	cmp	r0, r4
 8004ce2:	d0f8      	beq.n	8004cd6 <sbrk_aligned+0x22>
 8004ce4:	1a21      	subs	r1, r4, r0
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 fc92 	bl	8005610 <_sbrk_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d1f2      	bne.n	8004cd6 <sbrk_aligned+0x22>
 8004cf0:	e7ef      	b.n	8004cd2 <sbrk_aligned+0x1e>
 8004cf2:	bf00      	nop
 8004cf4:	20000518 	.word	0x20000518

08004cf8 <_malloc_r>:
 8004cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	1ccd      	adds	r5, r1, #3
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	db01      	blt.n	8004d14 <_malloc_r+0x1c>
 8004d10:	42a9      	cmp	r1, r5
 8004d12:	d904      	bls.n	8004d1e <_malloc_r+0x26>
 8004d14:	230c      	movs	r3, #12
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004df4 <_malloc_r+0xfc>
 8004d22:	f000 f869 	bl	8004df8 <__malloc_lock>
 8004d26:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	bb44      	cbnz	r4, 8004d80 <_malloc_r+0x88>
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff ffbf 	bl	8004cb4 <sbrk_aligned>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	4604      	mov	r4, r0
 8004d3a:	d158      	bne.n	8004dee <_malloc_r+0xf6>
 8004d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d40:	4627      	mov	r7, r4
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	d143      	bne.n	8004dce <_malloc_r+0xd6>
 8004d46:	2c00      	cmp	r4, #0
 8004d48:	d04b      	beq.n	8004de2 <_malloc_r+0xea>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	eb04 0903 	add.w	r9, r4, r3
 8004d54:	f000 fc5c 	bl	8005610 <_sbrk_r>
 8004d58:	4581      	cmp	r9, r0
 8004d5a:	d142      	bne.n	8004de2 <_malloc_r+0xea>
 8004d5c:	6821      	ldr	r1, [r4, #0]
 8004d5e:	1a6d      	subs	r5, r5, r1
 8004d60:	4629      	mov	r1, r5
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ffa6 	bl	8004cb4 <sbrk_aligned>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d03a      	beq.n	8004de2 <_malloc_r+0xea>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	442b      	add	r3, r5
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	f8d8 3000 	ldr.w	r3, [r8]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	bb62      	cbnz	r2, 8004dd4 <_malloc_r+0xdc>
 8004d7a:	f8c8 7000 	str.w	r7, [r8]
 8004d7e:	e00f      	b.n	8004da0 <_malloc_r+0xa8>
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	1b52      	subs	r2, r2, r5
 8004d84:	d420      	bmi.n	8004dc8 <_malloc_r+0xd0>
 8004d86:	2a0b      	cmp	r2, #11
 8004d88:	d917      	bls.n	8004dba <_malloc_r+0xc2>
 8004d8a:	1961      	adds	r1, r4, r5
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	6025      	str	r5, [r4, #0]
 8004d90:	bf18      	it	ne
 8004d92:	6059      	strne	r1, [r3, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	bf08      	it	eq
 8004d98:	f8c8 1000 	streq.w	r1, [r8]
 8004d9c:	5162      	str	r2, [r4, r5]
 8004d9e:	604b      	str	r3, [r1, #4]
 8004da0:	4630      	mov	r0, r6
 8004da2:	f000 f82f 	bl	8004e04 <__malloc_unlock>
 8004da6:	f104 000b 	add.w	r0, r4, #11
 8004daa:	1d23      	adds	r3, r4, #4
 8004dac:	f020 0007 	bic.w	r0, r0, #7
 8004db0:	1ac2      	subs	r2, r0, r3
 8004db2:	bf1c      	itt	ne
 8004db4:	1a1b      	subne	r3, r3, r0
 8004db6:	50a3      	strne	r3, [r4, r2]
 8004db8:	e7af      	b.n	8004d1a <_malloc_r+0x22>
 8004dba:	6862      	ldr	r2, [r4, #4]
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	bf0c      	ite	eq
 8004dc0:	f8c8 2000 	streq.w	r2, [r8]
 8004dc4:	605a      	strne	r2, [r3, #4]
 8004dc6:	e7eb      	b.n	8004da0 <_malloc_r+0xa8>
 8004dc8:	4623      	mov	r3, r4
 8004dca:	6864      	ldr	r4, [r4, #4]
 8004dcc:	e7ae      	b.n	8004d2c <_malloc_r+0x34>
 8004dce:	463c      	mov	r4, r7
 8004dd0:	687f      	ldr	r7, [r7, #4]
 8004dd2:	e7b6      	b.n	8004d42 <_malloc_r+0x4a>
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d1fb      	bne.n	8004dd4 <_malloc_r+0xdc>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6053      	str	r3, [r2, #4]
 8004de0:	e7de      	b.n	8004da0 <_malloc_r+0xa8>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6033      	str	r3, [r6, #0]
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f80c 	bl	8004e04 <__malloc_unlock>
 8004dec:	e794      	b.n	8004d18 <_malloc_r+0x20>
 8004dee:	6005      	str	r5, [r0, #0]
 8004df0:	e7d6      	b.n	8004da0 <_malloc_r+0xa8>
 8004df2:	bf00      	nop
 8004df4:	2000051c 	.word	0x2000051c

08004df8 <__malloc_lock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	@ (8004e00 <__malloc_lock+0x8>)
 8004dfa:	f7ff bf0e 	b.w	8004c1a <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	20000514 	.word	0x20000514

08004e04 <__malloc_unlock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	@ (8004e0c <__malloc_unlock+0x8>)
 8004e06:	f7ff bf09 	b.w	8004c1c <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	20000514 	.word	0x20000514

08004e10 <__sfputc_r>:
 8004e10:	6893      	ldr	r3, [r2, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	b410      	push	{r4}
 8004e18:	6093      	str	r3, [r2, #8]
 8004e1a:	da08      	bge.n	8004e2e <__sfputc_r+0x1e>
 8004e1c:	6994      	ldr	r4, [r2, #24]
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	db01      	blt.n	8004e26 <__sfputc_r+0x16>
 8004e22:	290a      	cmp	r1, #10
 8004e24:	d103      	bne.n	8004e2e <__sfputc_r+0x1e>
 8004e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2a:	f7ff bde8 	b.w	80049fe <__swbuf_r>
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	1c58      	adds	r0, r3, #1
 8004e32:	6010      	str	r0, [r2, #0]
 8004e34:	7019      	strb	r1, [r3, #0]
 8004e36:	4608      	mov	r0, r1
 8004e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <__sfputs_r>:
 8004e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e40:	4606      	mov	r6, r0
 8004e42:	460f      	mov	r7, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	18d5      	adds	r5, r2, r3
 8004e48:	42ac      	cmp	r4, r5
 8004e4a:	d101      	bne.n	8004e50 <__sfputs_r+0x12>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e007      	b.n	8004e60 <__sfputs_r+0x22>
 8004e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e54:	463a      	mov	r2, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff ffda 	bl	8004e10 <__sfputc_r>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d1f3      	bne.n	8004e48 <__sfputs_r+0xa>
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e64 <_vfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	460d      	mov	r5, r1
 8004e6a:	b09d      	sub	sp, #116	@ 0x74
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	4698      	mov	r8, r3
 8004e70:	4606      	mov	r6, r0
 8004e72:	b118      	cbz	r0, 8004e7c <_vfiprintf_r+0x18>
 8004e74:	6a03      	ldr	r3, [r0, #32]
 8004e76:	b90b      	cbnz	r3, 8004e7c <_vfiprintf_r+0x18>
 8004e78:	f7ff fcd8 	bl	800482c <__sinit>
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x2a>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x2a>
 8004e88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8a:	f7ff fec6 	bl	8004c1a <__retarget_lock_acquire_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	071b      	lsls	r3, r3, #28
 8004e92:	d501      	bpl.n	8004e98 <_vfiprintf_r+0x34>
 8004e94:	692b      	ldr	r3, [r5, #16]
 8004e96:	b99b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x5c>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff fdee 	bl	8004a7c <__swsetup_r>
 8004ea0:	b170      	cbz	r0, 8004ec0 <_vfiprintf_r+0x5c>
 8004ea2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ea4:	07dc      	lsls	r4, r3, #31
 8004ea6:	d504      	bpl.n	8004eb2 <_vfiprintf_r+0x4e>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004eac:	b01d      	add	sp, #116	@ 0x74
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	0598      	lsls	r0, r3, #22
 8004eb6:	d4f7      	bmi.n	8004ea8 <_vfiprintf_r+0x44>
 8004eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eba:	f7ff feaf 	bl	8004c1c <__retarget_lock_release_recursive>
 8004ebe:	e7f3      	b.n	8004ea8 <_vfiprintf_r+0x44>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ece:	2330      	movs	r3, #48	@ 0x30
 8004ed0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005080 <_vfiprintf_r+0x21c>
 8004ed4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	4623      	mov	r3, r4
 8004ede:	469a      	mov	sl, r3
 8004ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee4:	b10a      	cbz	r2, 8004eea <_vfiprintf_r+0x86>
 8004ee6:	2a25      	cmp	r2, #37	@ 0x25
 8004ee8:	d1f9      	bne.n	8004ede <_vfiprintf_r+0x7a>
 8004eea:	ebba 0b04 	subs.w	fp, sl, r4
 8004eee:	d00b      	beq.n	8004f08 <_vfiprintf_r+0xa4>
 8004ef0:	465b      	mov	r3, fp
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ffa1 	bl	8004e3e <__sfputs_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	f000 80a7 	beq.w	8005050 <_vfiprintf_r+0x1ec>
 8004f02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f04:	445a      	add	r2, fp
 8004f06:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f08:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 809f 	beq.w	8005050 <_vfiprintf_r+0x1ec>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1c:	f10a 0a01 	add.w	sl, sl, #1
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f28:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f2a:	4654      	mov	r4, sl
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f32:	4853      	ldr	r0, [pc, #332]	@ (8005080 <_vfiprintf_r+0x21c>)
 8004f34:	f7fb f974 	bl	8000220 <memchr>
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	b9d8      	cbnz	r0, 8004f74 <_vfiprintf_r+0x110>
 8004f3c:	06d1      	lsls	r1, r2, #27
 8004f3e:	bf44      	itt	mi
 8004f40:	2320      	movmi	r3, #32
 8004f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f46:	0713      	lsls	r3, r2, #28
 8004f48:	bf44      	itt	mi
 8004f4a:	232b      	movmi	r3, #43	@ 0x2b
 8004f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f50:	f89a 3000 	ldrb.w	r3, [sl]
 8004f54:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f56:	d015      	beq.n	8004f84 <_vfiprintf_r+0x120>
 8004f58:	9a07      	ldr	r2, [sp, #28]
 8004f5a:	4654      	mov	r4, sl
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f04f 0c0a 	mov.w	ip, #10
 8004f62:	4621      	mov	r1, r4
 8004f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f68:	3b30      	subs	r3, #48	@ 0x30
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d94b      	bls.n	8005006 <_vfiprintf_r+0x1a2>
 8004f6e:	b1b0      	cbz	r0, 8004f9e <_vfiprintf_r+0x13a>
 8004f70:	9207      	str	r2, [sp, #28]
 8004f72:	e014      	b.n	8004f9e <_vfiprintf_r+0x13a>
 8004f74:	eba0 0308 	sub.w	r3, r0, r8
 8004f78:	fa09 f303 	lsl.w	r3, r9, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	46a2      	mov	sl, r4
 8004f82:	e7d2      	b.n	8004f2a <_vfiprintf_r+0xc6>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	1d19      	adds	r1, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	9103      	str	r1, [sp, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfbb      	ittet	lt
 8004f90:	425b      	neglt	r3, r3
 8004f92:	f042 0202 	orrlt.w	r2, r2, #2
 8004f96:	9307      	strge	r3, [sp, #28]
 8004f98:	9307      	strlt	r3, [sp, #28]
 8004f9a:	bfb8      	it	lt
 8004f9c:	9204      	strlt	r2, [sp, #16]
 8004f9e:	7823      	ldrb	r3, [r4, #0]
 8004fa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fa2:	d10a      	bne.n	8004fba <_vfiprintf_r+0x156>
 8004fa4:	7863      	ldrb	r3, [r4, #1]
 8004fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fa8:	d132      	bne.n	8005010 <_vfiprintf_r+0x1ac>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	1d1a      	adds	r2, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9203      	str	r2, [sp, #12]
 8004fb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fb6:	3402      	adds	r4, #2
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005090 <_vfiprintf_r+0x22c>
 8004fbe:	7821      	ldrb	r1, [r4, #0]
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	4650      	mov	r0, sl
 8004fc4:	f7fb f92c 	bl	8000220 <memchr>
 8004fc8:	b138      	cbz	r0, 8004fda <_vfiprintf_r+0x176>
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	eba0 000a 	sub.w	r0, r0, sl
 8004fd0:	2240      	movs	r2, #64	@ 0x40
 8004fd2:	4082      	lsls	r2, r0
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	3401      	adds	r4, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fde:	4829      	ldr	r0, [pc, #164]	@ (8005084 <_vfiprintf_r+0x220>)
 8004fe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fe4:	2206      	movs	r2, #6
 8004fe6:	f7fb f91b 	bl	8000220 <memchr>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d03f      	beq.n	800506e <_vfiprintf_r+0x20a>
 8004fee:	4b26      	ldr	r3, [pc, #152]	@ (8005088 <_vfiprintf_r+0x224>)
 8004ff0:	bb1b      	cbnz	r3, 800503a <_vfiprintf_r+0x1d6>
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	3307      	adds	r3, #7
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005000:	443b      	add	r3, r7
 8005002:	9309      	str	r3, [sp, #36]	@ 0x24
 8005004:	e76a      	b.n	8004edc <_vfiprintf_r+0x78>
 8005006:	fb0c 3202 	mla	r2, ip, r2, r3
 800500a:	460c      	mov	r4, r1
 800500c:	2001      	movs	r0, #1
 800500e:	e7a8      	b.n	8004f62 <_vfiprintf_r+0xfe>
 8005010:	2300      	movs	r3, #0
 8005012:	3401      	adds	r4, #1
 8005014:	9305      	str	r3, [sp, #20]
 8005016:	4619      	mov	r1, r3
 8005018:	f04f 0c0a 	mov.w	ip, #10
 800501c:	4620      	mov	r0, r4
 800501e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005022:	3a30      	subs	r2, #48	@ 0x30
 8005024:	2a09      	cmp	r2, #9
 8005026:	d903      	bls.n	8005030 <_vfiprintf_r+0x1cc>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0c6      	beq.n	8004fba <_vfiprintf_r+0x156>
 800502c:	9105      	str	r1, [sp, #20]
 800502e:	e7c4      	b.n	8004fba <_vfiprintf_r+0x156>
 8005030:	fb0c 2101 	mla	r1, ip, r1, r2
 8005034:	4604      	mov	r4, r0
 8005036:	2301      	movs	r3, #1
 8005038:	e7f0      	b.n	800501c <_vfiprintf_r+0x1b8>
 800503a:	ab03      	add	r3, sp, #12
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	462a      	mov	r2, r5
 8005040:	4b12      	ldr	r3, [pc, #72]	@ (800508c <_vfiprintf_r+0x228>)
 8005042:	a904      	add	r1, sp, #16
 8005044:	4630      	mov	r0, r6
 8005046:	f3af 8000 	nop.w
 800504a:	4607      	mov	r7, r0
 800504c:	1c78      	adds	r0, r7, #1
 800504e:	d1d6      	bne.n	8004ffe <_vfiprintf_r+0x19a>
 8005050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005052:	07d9      	lsls	r1, r3, #31
 8005054:	d405      	bmi.n	8005062 <_vfiprintf_r+0x1fe>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	059a      	lsls	r2, r3, #22
 800505a:	d402      	bmi.n	8005062 <_vfiprintf_r+0x1fe>
 800505c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505e:	f7ff fddd 	bl	8004c1c <__retarget_lock_release_recursive>
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	065b      	lsls	r3, r3, #25
 8005066:	f53f af1f 	bmi.w	8004ea8 <_vfiprintf_r+0x44>
 800506a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800506c:	e71e      	b.n	8004eac <_vfiprintf_r+0x48>
 800506e:	ab03      	add	r3, sp, #12
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	462a      	mov	r2, r5
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <_vfiprintf_r+0x228>)
 8005076:	a904      	add	r1, sp, #16
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f879 	bl	8005170 <_printf_i>
 800507e:	e7e4      	b.n	800504a <_vfiprintf_r+0x1e6>
 8005080:	080056d0 	.word	0x080056d0
 8005084:	080056da 	.word	0x080056da
 8005088:	00000000 	.word	0x00000000
 800508c:	08004e3f 	.word	0x08004e3f
 8005090:	080056d6 	.word	0x080056d6

08005094 <_printf_common>:
 8005094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	4616      	mov	r6, r2
 800509a:	4698      	mov	r8, r3
 800509c:	688a      	ldr	r2, [r1, #8]
 800509e:	690b      	ldr	r3, [r1, #16]
 80050a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bfb8      	it	lt
 80050a8:	4613      	movlt	r3, r2
 80050aa:	6033      	str	r3, [r6, #0]
 80050ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050b0:	4607      	mov	r7, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	b10a      	cbz	r2, 80050ba <_printf_common+0x26>
 80050b6:	3301      	adds	r3, #1
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	0699      	lsls	r1, r3, #26
 80050be:	bf42      	ittt	mi
 80050c0:	6833      	ldrmi	r3, [r6, #0]
 80050c2:	3302      	addmi	r3, #2
 80050c4:	6033      	strmi	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	f015 0506 	ands.w	r5, r5, #6
 80050cc:	d106      	bne.n	80050dc <_printf_common+0x48>
 80050ce:	f104 0a19 	add.w	sl, r4, #25
 80050d2:	68e3      	ldr	r3, [r4, #12]
 80050d4:	6832      	ldr	r2, [r6, #0]
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	42ab      	cmp	r3, r5
 80050da:	dc26      	bgt.n	800512a <_printf_common+0x96>
 80050dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	3b00      	subs	r3, #0
 80050e4:	bf18      	it	ne
 80050e6:	2301      	movne	r3, #1
 80050e8:	0692      	lsls	r2, r2, #26
 80050ea:	d42b      	bmi.n	8005144 <_printf_common+0xb0>
 80050ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050f0:	4641      	mov	r1, r8
 80050f2:	4638      	mov	r0, r7
 80050f4:	47c8      	blx	r9
 80050f6:	3001      	adds	r0, #1
 80050f8:	d01e      	beq.n	8005138 <_printf_common+0xa4>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	f003 0306 	and.w	r3, r3, #6
 8005102:	2b04      	cmp	r3, #4
 8005104:	bf02      	ittt	eq
 8005106:	68e5      	ldreq	r5, [r4, #12]
 8005108:	6833      	ldreq	r3, [r6, #0]
 800510a:	1aed      	subeq	r5, r5, r3
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	bf0c      	ite	eq
 8005110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005114:	2500      	movne	r5, #0
 8005116:	4293      	cmp	r3, r2
 8005118:	bfc4      	itt	gt
 800511a:	1a9b      	subgt	r3, r3, r2
 800511c:	18ed      	addgt	r5, r5, r3
 800511e:	2600      	movs	r6, #0
 8005120:	341a      	adds	r4, #26
 8005122:	42b5      	cmp	r5, r6
 8005124:	d11a      	bne.n	800515c <_printf_common+0xc8>
 8005126:	2000      	movs	r0, #0
 8005128:	e008      	b.n	800513c <_printf_common+0xa8>
 800512a:	2301      	movs	r3, #1
 800512c:	4652      	mov	r2, sl
 800512e:	4641      	mov	r1, r8
 8005130:	4638      	mov	r0, r7
 8005132:	47c8      	blx	r9
 8005134:	3001      	adds	r0, #1
 8005136:	d103      	bne.n	8005140 <_printf_common+0xac>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	3501      	adds	r5, #1
 8005142:	e7c6      	b.n	80050d2 <_printf_common+0x3e>
 8005144:	18e1      	adds	r1, r4, r3
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	2030      	movs	r0, #48	@ 0x30
 800514a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800514e:	4422      	add	r2, r4
 8005150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005158:	3302      	adds	r3, #2
 800515a:	e7c7      	b.n	80050ec <_printf_common+0x58>
 800515c:	2301      	movs	r3, #1
 800515e:	4622      	mov	r2, r4
 8005160:	4641      	mov	r1, r8
 8005162:	4638      	mov	r0, r7
 8005164:	47c8      	blx	r9
 8005166:	3001      	adds	r0, #1
 8005168:	d0e6      	beq.n	8005138 <_printf_common+0xa4>
 800516a:	3601      	adds	r6, #1
 800516c:	e7d9      	b.n	8005122 <_printf_common+0x8e>
	...

08005170 <_printf_i>:
 8005170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	7e0f      	ldrb	r7, [r1, #24]
 8005176:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005178:	2f78      	cmp	r7, #120	@ 0x78
 800517a:	4691      	mov	r9, r2
 800517c:	4680      	mov	r8, r0
 800517e:	460c      	mov	r4, r1
 8005180:	469a      	mov	sl, r3
 8005182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005186:	d807      	bhi.n	8005198 <_printf_i+0x28>
 8005188:	2f62      	cmp	r7, #98	@ 0x62
 800518a:	d80a      	bhi.n	80051a2 <_printf_i+0x32>
 800518c:	2f00      	cmp	r7, #0
 800518e:	f000 80d2 	beq.w	8005336 <_printf_i+0x1c6>
 8005192:	2f58      	cmp	r7, #88	@ 0x58
 8005194:	f000 80b9 	beq.w	800530a <_printf_i+0x19a>
 8005198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800519c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051a0:	e03a      	b.n	8005218 <_printf_i+0xa8>
 80051a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051a6:	2b15      	cmp	r3, #21
 80051a8:	d8f6      	bhi.n	8005198 <_printf_i+0x28>
 80051aa:	a101      	add	r1, pc, #4	@ (adr r1, 80051b0 <_printf_i+0x40>)
 80051ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b0:	08005209 	.word	0x08005209
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	08005199 	.word	0x08005199
 80051bc:	08005199 	.word	0x08005199
 80051c0:	08005199 	.word	0x08005199
 80051c4:	08005199 	.word	0x08005199
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	08005199 	.word	0x08005199
 80051d0:	08005199 	.word	0x08005199
 80051d4:	08005199 	.word	0x08005199
 80051d8:	08005199 	.word	0x08005199
 80051dc:	0800531d 	.word	0x0800531d
 80051e0:	08005247 	.word	0x08005247
 80051e4:	080052d7 	.word	0x080052d7
 80051e8:	08005199 	.word	0x08005199
 80051ec:	08005199 	.word	0x08005199
 80051f0:	0800533f 	.word	0x0800533f
 80051f4:	08005199 	.word	0x08005199
 80051f8:	08005247 	.word	0x08005247
 80051fc:	08005199 	.word	0x08005199
 8005200:	08005199 	.word	0x08005199
 8005204:	080052df 	.word	0x080052df
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6032      	str	r2, [r6, #0]
 8005210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005218:	2301      	movs	r3, #1
 800521a:	e09d      	b.n	8005358 <_printf_i+0x1e8>
 800521c:	6833      	ldr	r3, [r6, #0]
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	6031      	str	r1, [r6, #0]
 8005224:	0606      	lsls	r6, r0, #24
 8005226:	d501      	bpl.n	800522c <_printf_i+0xbc>
 8005228:	681d      	ldr	r5, [r3, #0]
 800522a:	e003      	b.n	8005234 <_printf_i+0xc4>
 800522c:	0645      	lsls	r5, r0, #25
 800522e:	d5fb      	bpl.n	8005228 <_printf_i+0xb8>
 8005230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005234:	2d00      	cmp	r5, #0
 8005236:	da03      	bge.n	8005240 <_printf_i+0xd0>
 8005238:	232d      	movs	r3, #45	@ 0x2d
 800523a:	426d      	negs	r5, r5
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005240:	4859      	ldr	r0, [pc, #356]	@ (80053a8 <_printf_i+0x238>)
 8005242:	230a      	movs	r3, #10
 8005244:	e011      	b.n	800526a <_printf_i+0xfa>
 8005246:	6821      	ldr	r1, [r4, #0]
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	0608      	lsls	r0, r1, #24
 800524c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005250:	d402      	bmi.n	8005258 <_printf_i+0xe8>
 8005252:	0649      	lsls	r1, r1, #25
 8005254:	bf48      	it	mi
 8005256:	b2ad      	uxthmi	r5, r5
 8005258:	2f6f      	cmp	r7, #111	@ 0x6f
 800525a:	4853      	ldr	r0, [pc, #332]	@ (80053a8 <_printf_i+0x238>)
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	bf14      	ite	ne
 8005260:	230a      	movne	r3, #10
 8005262:	2308      	moveq	r3, #8
 8005264:	2100      	movs	r1, #0
 8005266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800526a:	6866      	ldr	r6, [r4, #4]
 800526c:	60a6      	str	r6, [r4, #8]
 800526e:	2e00      	cmp	r6, #0
 8005270:	bfa2      	ittt	ge
 8005272:	6821      	ldrge	r1, [r4, #0]
 8005274:	f021 0104 	bicge.w	r1, r1, #4
 8005278:	6021      	strge	r1, [r4, #0]
 800527a:	b90d      	cbnz	r5, 8005280 <_printf_i+0x110>
 800527c:	2e00      	cmp	r6, #0
 800527e:	d04b      	beq.n	8005318 <_printf_i+0x1a8>
 8005280:	4616      	mov	r6, r2
 8005282:	fbb5 f1f3 	udiv	r1, r5, r3
 8005286:	fb03 5711 	mls	r7, r3, r1, r5
 800528a:	5dc7      	ldrb	r7, [r0, r7]
 800528c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005290:	462f      	mov	r7, r5
 8005292:	42bb      	cmp	r3, r7
 8005294:	460d      	mov	r5, r1
 8005296:	d9f4      	bls.n	8005282 <_printf_i+0x112>
 8005298:	2b08      	cmp	r3, #8
 800529a:	d10b      	bne.n	80052b4 <_printf_i+0x144>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	07df      	lsls	r7, r3, #31
 80052a0:	d508      	bpl.n	80052b4 <_printf_i+0x144>
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	6861      	ldr	r1, [r4, #4]
 80052a6:	4299      	cmp	r1, r3
 80052a8:	bfde      	ittt	le
 80052aa:	2330      	movle	r3, #48	@ 0x30
 80052ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80052b4:	1b92      	subs	r2, r2, r6
 80052b6:	6122      	str	r2, [r4, #16]
 80052b8:	f8cd a000 	str.w	sl, [sp]
 80052bc:	464b      	mov	r3, r9
 80052be:	aa03      	add	r2, sp, #12
 80052c0:	4621      	mov	r1, r4
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff fee6 	bl	8005094 <_printf_common>
 80052c8:	3001      	adds	r0, #1
 80052ca:	d14a      	bne.n	8005362 <_printf_i+0x1f2>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052d0:	b004      	add	sp, #16
 80052d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	f043 0320 	orr.w	r3, r3, #32
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	4833      	ldr	r0, [pc, #204]	@ (80053ac <_printf_i+0x23c>)
 80052e0:	2778      	movs	r7, #120	@ 0x78
 80052e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	6831      	ldr	r1, [r6, #0]
 80052ea:	061f      	lsls	r7, r3, #24
 80052ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80052f0:	d402      	bmi.n	80052f8 <_printf_i+0x188>
 80052f2:	065f      	lsls	r7, r3, #25
 80052f4:	bf48      	it	mi
 80052f6:	b2ad      	uxthmi	r5, r5
 80052f8:	6031      	str	r1, [r6, #0]
 80052fa:	07d9      	lsls	r1, r3, #31
 80052fc:	bf44      	itt	mi
 80052fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005302:	6023      	strmi	r3, [r4, #0]
 8005304:	b11d      	cbz	r5, 800530e <_printf_i+0x19e>
 8005306:	2310      	movs	r3, #16
 8005308:	e7ac      	b.n	8005264 <_printf_i+0xf4>
 800530a:	4827      	ldr	r0, [pc, #156]	@ (80053a8 <_printf_i+0x238>)
 800530c:	e7e9      	b.n	80052e2 <_printf_i+0x172>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f023 0320 	bic.w	r3, r3, #32
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	e7f6      	b.n	8005306 <_printf_i+0x196>
 8005318:	4616      	mov	r6, r2
 800531a:	e7bd      	b.n	8005298 <_printf_i+0x128>
 800531c:	6833      	ldr	r3, [r6, #0]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	6961      	ldr	r1, [r4, #20]
 8005322:	1d18      	adds	r0, r3, #4
 8005324:	6030      	str	r0, [r6, #0]
 8005326:	062e      	lsls	r6, r5, #24
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	d501      	bpl.n	8005330 <_printf_i+0x1c0>
 800532c:	6019      	str	r1, [r3, #0]
 800532e:	e002      	b.n	8005336 <_printf_i+0x1c6>
 8005330:	0668      	lsls	r0, r5, #25
 8005332:	d5fb      	bpl.n	800532c <_printf_i+0x1bc>
 8005334:	8019      	strh	r1, [r3, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	4616      	mov	r6, r2
 800533c:	e7bc      	b.n	80052b8 <_printf_i+0x148>
 800533e:	6833      	ldr	r3, [r6, #0]
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	6032      	str	r2, [r6, #0]
 8005344:	681e      	ldr	r6, [r3, #0]
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	2100      	movs	r1, #0
 800534a:	4630      	mov	r0, r6
 800534c:	f7fa ff68 	bl	8000220 <memchr>
 8005350:	b108      	cbz	r0, 8005356 <_printf_i+0x1e6>
 8005352:	1b80      	subs	r0, r0, r6
 8005354:	6060      	str	r0, [r4, #4]
 8005356:	6863      	ldr	r3, [r4, #4]
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	2300      	movs	r3, #0
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005360:	e7aa      	b.n	80052b8 <_printf_i+0x148>
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	4632      	mov	r2, r6
 8005366:	4649      	mov	r1, r9
 8005368:	4640      	mov	r0, r8
 800536a:	47d0      	blx	sl
 800536c:	3001      	adds	r0, #1
 800536e:	d0ad      	beq.n	80052cc <_printf_i+0x15c>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	079b      	lsls	r3, r3, #30
 8005374:	d413      	bmi.n	800539e <_printf_i+0x22e>
 8005376:	68e0      	ldr	r0, [r4, #12]
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	4298      	cmp	r0, r3
 800537c:	bfb8      	it	lt
 800537e:	4618      	movlt	r0, r3
 8005380:	e7a6      	b.n	80052d0 <_printf_i+0x160>
 8005382:	2301      	movs	r3, #1
 8005384:	4632      	mov	r2, r6
 8005386:	4649      	mov	r1, r9
 8005388:	4640      	mov	r0, r8
 800538a:	47d0      	blx	sl
 800538c:	3001      	adds	r0, #1
 800538e:	d09d      	beq.n	80052cc <_printf_i+0x15c>
 8005390:	3501      	adds	r5, #1
 8005392:	68e3      	ldr	r3, [r4, #12]
 8005394:	9903      	ldr	r1, [sp, #12]
 8005396:	1a5b      	subs	r3, r3, r1
 8005398:	42ab      	cmp	r3, r5
 800539a:	dcf2      	bgt.n	8005382 <_printf_i+0x212>
 800539c:	e7eb      	b.n	8005376 <_printf_i+0x206>
 800539e:	2500      	movs	r5, #0
 80053a0:	f104 0619 	add.w	r6, r4, #25
 80053a4:	e7f5      	b.n	8005392 <_printf_i+0x222>
 80053a6:	bf00      	nop
 80053a8:	080056e1 	.word	0x080056e1
 80053ac:	080056f2 	.word	0x080056f2

080053b0 <__sflush_r>:
 80053b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b8:	0716      	lsls	r6, r2, #28
 80053ba:	4605      	mov	r5, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	d454      	bmi.n	800546a <__sflush_r+0xba>
 80053c0:	684b      	ldr	r3, [r1, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dc02      	bgt.n	80053cc <__sflush_r+0x1c>
 80053c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dd48      	ble.n	800545e <__sflush_r+0xae>
 80053cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d045      	beq.n	800545e <__sflush_r+0xae>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053d8:	682f      	ldr	r7, [r5, #0]
 80053da:	6a21      	ldr	r1, [r4, #32]
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	d030      	beq.n	8005442 <__sflush_r+0x92>
 80053e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	0759      	lsls	r1, r3, #29
 80053e6:	d505      	bpl.n	80053f4 <__sflush_r+0x44>
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053ee:	b10b      	cbz	r3, 80053f4 <__sflush_r+0x44>
 80053f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053f8:	6a21      	ldr	r1, [r4, #32]
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b0      	blx	r6
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	d106      	bne.n	8005412 <__sflush_r+0x62>
 8005404:	6829      	ldr	r1, [r5, #0]
 8005406:	291d      	cmp	r1, #29
 8005408:	d82b      	bhi.n	8005462 <__sflush_r+0xb2>
 800540a:	4a2a      	ldr	r2, [pc, #168]	@ (80054b4 <__sflush_r+0x104>)
 800540c:	410a      	asrs	r2, r1
 800540e:	07d6      	lsls	r6, r2, #31
 8005410:	d427      	bmi.n	8005462 <__sflush_r+0xb2>
 8005412:	2200      	movs	r2, #0
 8005414:	6062      	str	r2, [r4, #4]
 8005416:	04d9      	lsls	r1, r3, #19
 8005418:	6922      	ldr	r2, [r4, #16]
 800541a:	6022      	str	r2, [r4, #0]
 800541c:	d504      	bpl.n	8005428 <__sflush_r+0x78>
 800541e:	1c42      	adds	r2, r0, #1
 8005420:	d101      	bne.n	8005426 <__sflush_r+0x76>
 8005422:	682b      	ldr	r3, [r5, #0]
 8005424:	b903      	cbnz	r3, 8005428 <__sflush_r+0x78>
 8005426:	6560      	str	r0, [r4, #84]	@ 0x54
 8005428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800542a:	602f      	str	r7, [r5, #0]
 800542c:	b1b9      	cbz	r1, 800545e <__sflush_r+0xae>
 800542e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005432:	4299      	cmp	r1, r3
 8005434:	d002      	beq.n	800543c <__sflush_r+0x8c>
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fbf2 	bl	8004c20 <_free_r>
 800543c:	2300      	movs	r3, #0
 800543e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005440:	e00d      	b.n	800545e <__sflush_r+0xae>
 8005442:	2301      	movs	r3, #1
 8005444:	4628      	mov	r0, r5
 8005446:	47b0      	blx	r6
 8005448:	4602      	mov	r2, r0
 800544a:	1c50      	adds	r0, r2, #1
 800544c:	d1c9      	bne.n	80053e2 <__sflush_r+0x32>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0c6      	beq.n	80053e2 <__sflush_r+0x32>
 8005454:	2b1d      	cmp	r3, #29
 8005456:	d001      	beq.n	800545c <__sflush_r+0xac>
 8005458:	2b16      	cmp	r3, #22
 800545a:	d11e      	bne.n	800549a <__sflush_r+0xea>
 800545c:	602f      	str	r7, [r5, #0]
 800545e:	2000      	movs	r0, #0
 8005460:	e022      	b.n	80054a8 <__sflush_r+0xf8>
 8005462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005466:	b21b      	sxth	r3, r3
 8005468:	e01b      	b.n	80054a2 <__sflush_r+0xf2>
 800546a:	690f      	ldr	r7, [r1, #16]
 800546c:	2f00      	cmp	r7, #0
 800546e:	d0f6      	beq.n	800545e <__sflush_r+0xae>
 8005470:	0793      	lsls	r3, r2, #30
 8005472:	680e      	ldr	r6, [r1, #0]
 8005474:	bf08      	it	eq
 8005476:	694b      	ldreq	r3, [r1, #20]
 8005478:	600f      	str	r7, [r1, #0]
 800547a:	bf18      	it	ne
 800547c:	2300      	movne	r3, #0
 800547e:	eba6 0807 	sub.w	r8, r6, r7
 8005482:	608b      	str	r3, [r1, #8]
 8005484:	f1b8 0f00 	cmp.w	r8, #0
 8005488:	dde9      	ble.n	800545e <__sflush_r+0xae>
 800548a:	6a21      	ldr	r1, [r4, #32]
 800548c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800548e:	4643      	mov	r3, r8
 8005490:	463a      	mov	r2, r7
 8005492:	4628      	mov	r0, r5
 8005494:	47b0      	blx	r6
 8005496:	2800      	cmp	r0, #0
 8005498:	dc08      	bgt.n	80054ac <__sflush_r+0xfc>
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ac:	4407      	add	r7, r0
 80054ae:	eba8 0800 	sub.w	r8, r8, r0
 80054b2:	e7e7      	b.n	8005484 <__sflush_r+0xd4>
 80054b4:	dfbffffe 	.word	0xdfbffffe

080054b8 <_fflush_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	690b      	ldr	r3, [r1, #16]
 80054bc:	4605      	mov	r5, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	b913      	cbnz	r3, 80054c8 <_fflush_r+0x10>
 80054c2:	2500      	movs	r5, #0
 80054c4:	4628      	mov	r0, r5
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	b118      	cbz	r0, 80054d2 <_fflush_r+0x1a>
 80054ca:	6a03      	ldr	r3, [r0, #32]
 80054cc:	b90b      	cbnz	r3, 80054d2 <_fflush_r+0x1a>
 80054ce:	f7ff f9ad 	bl	800482c <__sinit>
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f3      	beq.n	80054c2 <_fflush_r+0xa>
 80054da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054dc:	07d0      	lsls	r0, r2, #31
 80054de:	d404      	bmi.n	80054ea <_fflush_r+0x32>
 80054e0:	0599      	lsls	r1, r3, #22
 80054e2:	d402      	bmi.n	80054ea <_fflush_r+0x32>
 80054e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054e6:	f7ff fb98 	bl	8004c1a <__retarget_lock_acquire_recursive>
 80054ea:	4628      	mov	r0, r5
 80054ec:	4621      	mov	r1, r4
 80054ee:	f7ff ff5f 	bl	80053b0 <__sflush_r>
 80054f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054f4:	07da      	lsls	r2, r3, #31
 80054f6:	4605      	mov	r5, r0
 80054f8:	d4e4      	bmi.n	80054c4 <_fflush_r+0xc>
 80054fa:	89a3      	ldrh	r3, [r4, #12]
 80054fc:	059b      	lsls	r3, r3, #22
 80054fe:	d4e1      	bmi.n	80054c4 <_fflush_r+0xc>
 8005500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005502:	f7ff fb8b 	bl	8004c1c <__retarget_lock_release_recursive>
 8005506:	e7dd      	b.n	80054c4 <_fflush_r+0xc>

08005508 <__swhatbuf_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	460c      	mov	r4, r1
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	2900      	cmp	r1, #0
 8005512:	b096      	sub	sp, #88	@ 0x58
 8005514:	4615      	mov	r5, r2
 8005516:	461e      	mov	r6, r3
 8005518:	da0d      	bge.n	8005536 <__swhatbuf_r+0x2e>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	bf14      	ite	ne
 8005526:	2340      	movne	r3, #64	@ 0x40
 8005528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800552c:	2000      	movs	r0, #0
 800552e:	6031      	str	r1, [r6, #0]
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	b016      	add	sp, #88	@ 0x58
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	466a      	mov	r2, sp
 8005538:	f000 f848 	bl	80055cc <_fstat_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	dbec      	blt.n	800551a <__swhatbuf_r+0x12>
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800554a:	4259      	negs	r1, r3
 800554c:	4159      	adcs	r1, r3
 800554e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005552:	e7eb      	b.n	800552c <__swhatbuf_r+0x24>

08005554 <__smakebuf_r>:
 8005554:	898b      	ldrh	r3, [r1, #12]
 8005556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005558:	079d      	lsls	r5, r3, #30
 800555a:	4606      	mov	r6, r0
 800555c:	460c      	mov	r4, r1
 800555e:	d507      	bpl.n	8005570 <__smakebuf_r+0x1c>
 8005560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	2301      	movs	r3, #1
 800556a:	6163      	str	r3, [r4, #20]
 800556c:	b003      	add	sp, #12
 800556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005570:	ab01      	add	r3, sp, #4
 8005572:	466a      	mov	r2, sp
 8005574:	f7ff ffc8 	bl	8005508 <__swhatbuf_r>
 8005578:	9f00      	ldr	r7, [sp, #0]
 800557a:	4605      	mov	r5, r0
 800557c:	4639      	mov	r1, r7
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff fbba 	bl	8004cf8 <_malloc_r>
 8005584:	b948      	cbnz	r0, 800559a <__smakebuf_r+0x46>
 8005586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558a:	059a      	lsls	r2, r3, #22
 800558c:	d4ee      	bmi.n	800556c <__smakebuf_r+0x18>
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	e7e2      	b.n	8005560 <__smakebuf_r+0xc>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	6020      	str	r0, [r4, #0]
 800559e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055aa:	b15b      	cbz	r3, 80055c4 <__smakebuf_r+0x70>
 80055ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b0:	4630      	mov	r0, r6
 80055b2:	f000 f81d 	bl	80055f0 <_isatty_r>
 80055b6:	b128      	cbz	r0, 80055c4 <__smakebuf_r+0x70>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	89a3      	ldrh	r3, [r4, #12]
 80055c6:	431d      	orrs	r5, r3
 80055c8:	81a5      	strh	r5, [r4, #12]
 80055ca:	e7cf      	b.n	800556c <__smakebuf_r+0x18>

080055cc <_fstat_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d07      	ldr	r5, [pc, #28]	@ (80055ec <_fstat_r+0x20>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f7fb fa02 	bl	80009e2 <_fstat>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	d102      	bne.n	80055e8 <_fstat_r+0x1c>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	b103      	cbz	r3, 80055e8 <_fstat_r+0x1c>
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	20000510 	.word	0x20000510

080055f0 <_isatty_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d06      	ldr	r5, [pc, #24]	@ (800560c <_isatty_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fb fa01 	bl	8000a02 <_isatty>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_isatty_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_isatty_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	20000510 	.word	0x20000510

08005610 <_sbrk_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d06      	ldr	r5, [pc, #24]	@ (800562c <_sbrk_r+0x1c>)
 8005614:	2300      	movs	r3, #0
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	f7fb fa0a 	bl	8000a34 <_sbrk>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_sbrk_r+0x1a>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_sbrk_r+0x1a>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	20000510 	.word	0x20000510

08005630 <_init>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	bf00      	nop
 8005634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005636:	bc08      	pop	{r3}
 8005638:	469e      	mov	lr, r3
 800563a:	4770      	bx	lr

0800563c <_fini>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr
