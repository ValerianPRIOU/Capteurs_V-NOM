
Lidar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800418c  0800418c  0000518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800421c  0800421c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800421c  0800421c  0000521c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004220  08004220  00005220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004224  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000068  0800428c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800428c  00006300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d925  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002219  00000000  00000000  000139bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00015bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000863  00000000  00000000  000166e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b64  00000000  00000000  00016f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddde  00000000  00000000  00019aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b882c  00000000  00000000  00027885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e00b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  000e00f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e32a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004174 	.word	0x08004174

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08004174 	.word	0x08004174

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a2a      	ldr	r2, [pc, #168]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b28      	ldr	r3, [pc, #160]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a24      	ldr	r2, [pc, #144]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fed5 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000590:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0xc8>)
 80005a2:	f000 fd45 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a6:	2320      	movs	r3, #32
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fd36 	bl	8001030 <HAL_GPIO_Init>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800

080005d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <__io_putchar+0x20>)
 80005e6:	f001 fedf 	bl	80023a8 <HAL_UART_Transmit>
	return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000011c 	.word	0x2000011c

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fad7 	bl	8000bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f80e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f7ff ff80 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000608:	f000 f9bc 	bl	8000984 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800060c:	f000 f96e 	bl	80008ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("=====Lidar=====\r\n");
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <main+0x24>)
 8000612:	f003 fa1b 	bl	8003a4c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x1e>
 800061a:	bf00      	nop
 800061c:	080041c0 	.word	0x080041c0

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2238      	movs	r2, #56	@ 0x38
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 faec 	bl	8003c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fe8e 	bl	8001364 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2340      	movs	r3, #64	@ 0x40
 8000654:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000662:	2355      	movs	r3, #85	@ 0x55
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	4618      	mov	r0, r3
 8000678:	f000 ff28 	bl	80014cc <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000682:	f000 f818 	bl	80006b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2104      	movs	r1, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa26 	bl	8001af0 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006aa:	f000 f804 	bl	80006b6 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ba:	b672      	cpsid	i
}
 80006bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006fa:	f000 fed7 	bl	80014ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <NMI_Handler+0x4>

08000714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <MemManage_Handler+0x4>

08000724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <UsageFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000762:	f000 fa77 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <USART1_IRQHandler+0x10>)
 8000772:	f001 fea7 	bl	80024c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000088 	.word	0x20000088

08000780 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00a      	b.n	80007a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000792:	f3af 8000 	nop.w
 8000796:	4601      	mov	r1, r0
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbf0      	blt.n	8000792 <_read+0x12>
  }

  return len;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e009      	b.n	80007e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	60ba      	str	r2, [r7, #8]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fefd 	bl	80005d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf1      	blt.n	80007cc <_write+0x12>
  }
  return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800081a:	605a      	str	r2, [r3, #4]
  return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 fa0c 	bl	8003ca8 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20008000 	.word	0x20008000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000084 	.word	0x20000084
 80008c4:	20000300 	.word	0x20000300

080008c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <MX_USART1_UART_Init+0x90>)
 80008f2:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <MX_USART1_UART_Init+0x94>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b21      	ldr	r3, [pc, #132]	@ (800097c <MX_USART1_UART_Init+0x90>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_USART1_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_USART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000936:	f001 fce7 	bl	8002308 <HAL_UART_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000940:	f7ff feb9 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_USART1_UART_Init+0x90>)
 8000948:	f002 fe9d 	bl	8003686 <HAL_UARTEx_SetTxFifoThreshold>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000952:	f7ff feb0 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <MX_USART1_UART_Init+0x90>)
 800095a:	f002 fed2 	bl	8003702 <HAL_UARTEx_SetRxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000964:	f7ff fea7 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_USART1_UART_Init+0x90>)
 800096a:	f002 fe53 	bl	8003614 <HAL_UARTEx_DisableFifoMode>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000974:	f7ff fe9f 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000088 	.word	0x20000088
 8000980:	40013800 	.word	0x40013800

08000984 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 800098a:	4a23      	ldr	r2, [pc, #140]	@ (8000a18 <MX_USART2_UART_Init+0x94>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009ce:	f001 fc9b 	bl	8002308 <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f7ff fe6d 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009e0:	f002 fe51 	bl	8003686 <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f7ff fe64 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 80009f2:	f002 fe86 	bl	8003702 <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f7ff fe5b 	bl	80006b6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_USART2_UART_Init+0x90>)
 8000a02:	f002 fe07 	bl	8003614 <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f7ff fe53 	bl	80006b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000011c 	.word	0x2000011c
 8000a18:	40004400 	.word	0x40004400

08000a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	@ 0x70
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	2244      	movs	r2, #68	@ 0x44
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 f8e5 	bl	8003c0c <memset>
  if(uartHandle->Instance==USART1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a42      	ldr	r2, [pc, #264]	@ (8000b50 <HAL_UART_MspInit+0x134>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d140      	bne.n	8000ace <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fa65 	bl	8001f28 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a64:	f7ff fe27 	bl	80006b6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6c:	4a39      	ldr	r2, [pc, #228]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a72:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a74:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f000 faba 	bl	8001030 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2025      	movs	r0, #37	@ 0x25
 8000ac2:	f000 f9c0 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ac6:	2025      	movs	r0, #37	@ 0x25
 8000ac8:	f000 f9d7 	bl	8000e7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000acc:	e03b      	b.n	8000b46 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <HAL_UART_MspInit+0x13c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d136      	bne.n	8000b46 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fa1f 	bl	8001f28 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000af0:	f7ff fde1 	bl	80006b6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0x138>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b24:	230c      	movs	r3, #12
 8000b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b34:	2307      	movs	r3, #7
 8000b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fa75 	bl	8001030 <HAL_GPIO_Init>
}
 8000b46:	bf00      	nop
 8000b48:	3770      	adds	r7, #112	@ 0x70
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40004400 	.word	0x40004400

08000b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b60:	f7ff feb2 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f003 f893 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8e:	f7ff fd33 	bl	80005f8 <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   r0, =_estack
 8000b94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba0:	08004224 	.word	0x08004224
  ldr r2, =_sbss
 8000ba4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba8:	20000300 	.word	0x20000300

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>

08000bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f939 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f80e 	bl	8000be0 <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	e001      	b.n	8000bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd0:	f7ff fd78 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]

}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_InitTick+0x68>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d022      	beq.n	8000c3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <HAL_InitTick+0x6c>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <HAL_InitTick+0x68>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f944 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10f      	bne.n	8000c34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d809      	bhi.n	8000c2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c22:	f000 f910 	bl	8000e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_InitTick+0x70>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e007      	b.n	8000c3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e004      	b.n	8000c3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x1c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_IncTick+0x20>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a03      	ldr	r2, [pc, #12]	@ (8000c70 <HAL_IncTick+0x1c>)
 8000c64:	6013      	str	r3, [r2, #0]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	200001b0 	.word	0x200001b0
 8000c74:	20000008 	.word	0x20000008

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200001b0 	.word	0x200001b0

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	@ (8000d2c <__NVIC_EnableIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e10:	f7ff ff8e 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff29 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff40 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff33 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa4 	bl	8000dec <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d005      	beq.n	8000ed2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2204      	movs	r2, #4
 8000eca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e037      	b.n	8000f42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 020e 	bic.w	r2, r2, #14
 8000ee0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ef0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f003 021f 	and.w	r2, r3, #31
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00c      	beq.n	8000f42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d00d      	beq.n	8000f94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e047      	b.n	8001024 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020e 	bic.w	r2, r2, #14
 8000fa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fe0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00c      	beq.n	8001004 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ff8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001002:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	4798      	blx	r3
    }
  }
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800103e:	e15a      	b.n	80012f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 814c 	beq.w	80012f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d005      	beq.n	8001070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800106c:	2b02      	cmp	r3, #2
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d017      	beq.n	800110e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d123      	bne.n	8001162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	6939      	ldr	r1, [r7, #16]
 800115e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0203 	and.w	r2, r3, #3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80a6 	beq.w	80012f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001314 <HAL_GPIO_Init+0x2e4>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001314 <HAL_GPIO_Init+0x2e4>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b0:	4b58      	ldr	r3, [pc, #352]	@ (8001314 <HAL_GPIO_Init+0x2e4>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011bc:	4a56      	ldr	r2, [pc, #344]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e6:	d01f      	beq.n	8001228 <HAL_GPIO_Init+0x1f8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4c      	ldr	r2, [pc, #304]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d019      	beq.n	8001224 <HAL_GPIO_Init+0x1f4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1f0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001324 <HAL_GPIO_Init+0x2f4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1ec>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a49      	ldr	r2, [pc, #292]	@ (8001328 <HAL_GPIO_Init+0x2f8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a48      	ldr	r2, [pc, #288]	@ (800132c <HAL_GPIO_Init+0x2fc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e4>
 8001210:	2305      	movs	r3, #5
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 8001214:	2306      	movs	r3, #6
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 8001218:	2304      	movs	r3, #4
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x1fa>
 8001228:	2300      	movs	r3, #0
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123a:	4937      	ldr	r1, [pc, #220]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001248:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <HAL_GPIO_Init+0x300>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800126c:	4a30      	ldr	r2, [pc, #192]	@ (8001330 <HAL_GPIO_Init+0x300>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001272:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <HAL_GPIO_Init+0x300>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001296:	4a26      	ldr	r2, [pc, #152]	@ (8001330 <HAL_GPIO_Init+0x300>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <HAL_GPIO_Init+0x300>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ea:	4a11      	ldr	r2, [pc, #68]	@ (8001330 <HAL_GPIO_Init+0x300>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	f47f ae9d 	bne.w	8001040 <HAL_GPIO_Init+0x10>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	48000c00 	.word	0x48000c00
 8001328:	48001000 	.word	0x48001000
 800132c:	48001400 	.word	0x48001400
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001350:	e002      	b.n	8001358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d141      	bne.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b4b      	ldr	r3, [pc, #300]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137e:	d131      	bne.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001380:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001386:	4a46      	ldr	r2, [pc, #280]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800138c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001398:	4a41      	ldr	r2, [pc, #260]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a0:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2232      	movs	r2, #50	@ 0x32
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a3f      	ldr	r2, [pc, #252]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	3301      	adds	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b6:	e002      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013be:	4b38      	ldr	r3, [pc, #224]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ca:	d102      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f2      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d2:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013de:	d158      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e057      	b.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e4:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ea:	4a2d      	ldr	r2, [pc, #180]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013f4:	e04d      	b.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013fc:	d141      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fe:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140a:	d131      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001412:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001426:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2232      	movs	r2, #50	@ 0x32
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	0c9b      	lsrs	r3, r3, #18
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001442:	e002      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3b01      	subs	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001456:	d102      	bne.n	800145e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f2      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146a:	d112      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e011      	b.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001480:	e007      	b.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001490:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40007000 	.word	0x40007000
 80014a4:	20000000 	.word	0x20000000
 80014a8:	431bde83 	.word	0x431bde83

080014ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ba:	6093      	str	r3, [r2, #8]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e2fe      	b.n	8001adc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ea:	4b97      	ldr	r3, [pc, #604]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f4:	4b94      	ldr	r3, [pc, #592]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x3e>
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d002      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b08      	cmp	r3, #8
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b8d      	ldr	r3, [pc, #564]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e2d9      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b85      	ldr	r3, [pc, #532]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a84      	ldr	r2, [pc, #528]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b7f      	ldr	r3, [pc, #508]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7e      	ldr	r2, [pc, #504]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b7c      	ldr	r3, [pc, #496]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7b      	ldr	r2, [pc, #492]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b78      	ldr	r3, [pc, #480]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a77      	ldr	r2, [pc, #476]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b75      	ldr	r3, [pc, #468]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a74      	ldr	r2, [pc, #464]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff fb78 	bl	8000c78 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fb74 	bl	8000c78 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	@ 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e29e      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb64 	bl	8000c78 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb60 	bl	8000c78 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e28a      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4b60      	ldr	r3, [pc, #384]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b59      	ldr	r3, [pc, #356]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ec:	4b56      	ldr	r3, [pc, #344]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0x136>
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d002      	beq.n	8001608 <HAL_RCC_OscConfig+0x13c>
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b04      	cmp	r3, #4
 8001606:	d11f      	bne.n	8001648 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	4b4f      	ldr	r3, [pc, #316]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x154>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e25d      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	4946      	ldr	r1, [pc, #280]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001634:	4b45      	ldr	r3, [pc, #276]	@ (800174c <HAL_RCC_OscConfig+0x280>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fad1 	bl	8000be0 <HAL_InitTick>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d043      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e249      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d023      	beq.n	8001698 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a3c      	ldr	r2, [pc, #240]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb0c 	bl	8000c78 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fb08 	bl	8000c78 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e232      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	492d      	ldr	r1, [pc, #180]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e01a      	b.n	80016ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001698:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800169e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fae8 	bl	8000c78 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fae4 	bl	8000c78 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e20e      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1e0>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d041      	beq.n	800175e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01c      	beq.n	800171c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fac1 	bl	8000c78 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fabd 	bl	8000c78 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1e7      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170c:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ef      	beq.n	80016fa <HAL_RCC_OscConfig+0x22e>
 800171a:	e020      	b.n	800175e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <HAL_RCC_OscConfig+0x27c>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff faa4 	bl	8000c78 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001732:	e00d      	b.n	8001750 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff faa0 	bl	8000c78 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d906      	bls.n	8001750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1ca      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001750:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ea      	bne.n	8001734 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80a6 	beq.w	80018b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001770:	4b84      	ldr	r3, [pc, #528]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x2b4>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x2b6>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	4a7e      	ldr	r2, [pc, #504]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6593      	str	r3, [r2, #88]	@ 0x58
 8001792:	4b7c      	ldr	r3, [pc, #496]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <HAL_RCC_OscConfig+0x4bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ae:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x4bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a75      	ldr	r2, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x4bc>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa5d 	bl	8000c78 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff fa59 	bl	8000c78 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e183      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001988 <HAL_RCC_OscConfig+0x4bc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_RCC_OscConfig+0x32e>
 80017e8:	4b66      	ldr	r3, [pc, #408]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ee:	4a65      	ldr	r2, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f8:	e024      	b.n	8001844 <HAL_RCC_OscConfig+0x378>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d110      	bne.n	8001824 <HAL_RCC_OscConfig+0x358>
 8001802:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001808:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001812:	4b5c      	ldr	r3, [pc, #368]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001818:	4a5a      	ldr	r2, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001822:	e00f      	b.n	8001844 <HAL_RCC_OscConfig+0x378>
 8001824:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183a:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d016      	beq.n	800187a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fa14 	bl	8000c78 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001852:	e00a      	b.n	800186a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7ff fa10 	bl	8000c78 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e138      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0ed      	beq.n	8001854 <HAL_RCC_OscConfig+0x388>
 8001878:	e015      	b.n	80018a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff f9fd 	bl	8000c78 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff f9f9 	bl	8000c78 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e121      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ed      	bne.n	8001882 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	4a34      	ldr	r2, [pc, #208]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03c      	beq.n	800193e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01c      	beq.n	8001906 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80018ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff f9cc 	bl	8000c78 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e4:	f7ff f9c8 	bl	8000c78 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0f2      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018f6:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ef      	beq.n	80018e4 <HAL_RCC_OscConfig+0x418>
 8001904:	e01b      	b.n	800193e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800190c:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff f9af 	bl	8000c78 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191e:	f7ff f9ab 	bl	8000c78 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0d5      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ef      	bne.n	800191e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80c9 	beq.w	8001ada <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b0c      	cmp	r3, #12
 8001952:	f000 8083 	beq.w	8001a5c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d15e      	bne.n	8001a1c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_RCC_OscConfig+0x4b8>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f985 	bl	8000c78 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	e00c      	b.n	800198c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f981 	bl	8000c78 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d905      	bls.n	800198c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0ab      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
 8001984:	40021000 	.word	0x40021000
 8001988:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	4b55      	ldr	r3, [pc, #340]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ec      	bne.n	8001972 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b52      	ldr	r3, [pc, #328]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b52      	ldr	r3, [pc, #328]	@ (8001ae8 <HAL_RCC_OscConfig+0x61c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a11      	ldr	r1, [r2, #32]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019a8:	3a01      	subs	r2, #1
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0552      	lsls	r2, r2, #21
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019c6:	0852      	lsrs	r2, r2, #1
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0652      	lsls	r2, r2, #25
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019d2:	06d2      	lsls	r2, r2, #27
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4943      	ldr	r1, [pc, #268]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b41      	ldr	r3, [pc, #260]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a40      	ldr	r2, [pc, #256]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f940 	bl	8000c78 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f93c 	bl	8000c78 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e066      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x530>
 8001a1a:	e05e      	b.n	8001ada <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a30      	ldr	r2, [pc, #192]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f926 	bl	8000c78 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f922 	bl	8000c78 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e04c      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a42:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4924      	ldr	r1, [pc, #144]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a54:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <HAL_RCC_OscConfig+0x620>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	60cb      	str	r3, [r1, #12]
 8001a5a:	e03e      	b.n	8001ada <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e039      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_RCC_OscConfig+0x618>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d12c      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	3b01      	subs	r3, #1
 8001a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d123      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d113      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	019f800c 	.word	0x019f800c
 8001aec:	feeefffc 	.word	0xfeeefffc

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e11e      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b91      	ldr	r3, [pc, #580]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b8e      	ldr	r3, [pc, #568]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	498c      	ldr	r1, [pc, #560]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b8a      	ldr	r3, [pc, #552]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e106      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d073      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d129      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4c:	4b81      	ldr	r3, [pc, #516]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0f4      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b5c:	f000 f99e 	bl	8001e9c <RCC_GetSysClockFreqFromPLLSource>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4a7c      	ldr	r2, [pc, #496]	@ (8001d58 <HAL_RCC_ClockConfig+0x268>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d93f      	bls.n	8001bea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d033      	beq.n	8001bea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d12f      	bne.n	8001bea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b92:	4a70      	ldr	r2, [pc, #448]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e024      	b.n	8001bea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0c6      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0be      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bc8:	f000 f8ce 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4a61      	ldr	r2, [pc, #388]	@ (8001d58 <HAL_RCC_ClockConfig+0x268>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d909      	bls.n	8001bea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4957      	ldr	r1, [pc, #348]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f83c 	bl	8000c78 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f838 	bl	8000c78 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e095      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d023      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c44:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c64:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4936      	ldr	r1, [pc, #216]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b80      	cmp	r3, #128	@ 0x80
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c86:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c92:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d21d      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 020f 	bic.w	r2, r3, #15
 8001ca8:	4929      	ldr	r1, [pc, #164]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb0:	f7fe ffe2 	bl	8000c78 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7fe ffde 	bl	8000c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e03b      	b.n	8001d46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1ed      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4917      	ldr	r1, [pc, #92]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	490f      	ldr	r1, [pc, #60]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1a:	f000 f825 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_RCC_ClockConfig+0x264>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <HAL_RCC_ClockConfig+0x26c>)
 8001d2c:	5ccb      	ldrb	r3, [r1, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x270>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_RCC_ClockConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe ff4e 	bl	8000be0 <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	04c4b400 	.word	0x04c4b400
 8001d5c:	080041d4 	.word	0x080041d4
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d102      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e047      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d80:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e03e      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d136      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3301      	adds	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4a16      	ldr	r2, [pc, #88]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc6:	68d2      	ldr	r2, [r2, #12]
 8001dc8:	0a12      	lsrs	r2, r2, #8
 8001dca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
      break;
 8001dd4:	e00c      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd6:	4a13      	ldr	r2, [pc, #76]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4a10      	ldr	r2, [pc, #64]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	0a12      	lsrs	r2, r2, #8
 8001de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
      break;
 8001dee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0e5b      	lsrs	r3, r3, #25
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	e001      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e10:	693b      	ldr	r3, [r7, #16]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	016e3600 	.word	0x016e3600

08001e2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e48:	f7ff fff0 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080041e4 	.word	0x080041e4

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e74:	f7ff ffda 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	080041e4 	.word	0x080041e4

08001e9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d10c      	bne.n	8001eda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eca:	68d2      	ldr	r2, [r2, #12]
 8001ecc:	0a12      	lsrs	r2, r2, #8
 8001ece:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
    break;
 8001ed8:	e00c      	b.n	8001ef4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee4:	68d2      	ldr	r2, [r2, #12]
 8001ee6:	0a12      	lsrs	r2, r2, #8
 8001ee8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    break;
 8001ef2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0e5b      	lsrs	r3, r3, #25
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	016e3600 	.word	0x016e3600
 8001f24:	00f42400 	.word	0x00f42400

08001f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f30:	2300      	movs	r3, #0
 8001f32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f34:	2300      	movs	r3, #0
 8001f36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8098 	beq.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4a:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b40      	ldr	r3, [pc, #256]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f62:	4b3d      	ldr	r3, [pc, #244]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f72:	4b3a      	ldr	r3, [pc, #232]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a39      	ldr	r2, [pc, #228]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f7e:	f7fe fe7b 	bl	8000c78 <HAL_GetTick>
 8001f82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f84:	e009      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fe77 	bl	8000c78 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d902      	bls.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	74fb      	strb	r3, [r7, #19]
        break;
 8001f98:	e005      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9a:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ef      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fa6:	7cfb      	ldrb	r3, [r7, #19]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d159      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fac:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01e      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d019      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc8:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fd4:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fea:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ff4:	4a18      	ldr	r2, [pc, #96]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7fe fe37 	bl	8000c78 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200c:	e00b      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fe33 	bl	8000c78 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d902      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	74fb      	strb	r3, [r7, #19]
            break;
 8002024:	e006      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ec      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002050:	e008      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	74bb      	strb	r3, [r7, #18]
 8002056:	e005      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002064:	7c7b      	ldrb	r3, [r7, #17]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4ba6      	ldr	r3, [pc, #664]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	4aa5      	ldr	r2, [pc, #660]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002074:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002082:	4ba0      	ldr	r3, [pc, #640]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002088:	f023 0203 	bic.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	499c      	ldr	r1, [pc, #624]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a4:	4b97      	ldr	r3, [pc, #604]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	f023 020c 	bic.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4994      	ldr	r1, [pc, #592]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	498b      	ldr	r1, [pc, #556]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020e8:	4b86      	ldr	r3, [pc, #536]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4983      	ldr	r1, [pc, #524]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800210a:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002110:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	497a      	ldr	r1, [pc, #488]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4972      	ldr	r1, [pc, #456]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800214e:	4b6d      	ldr	r3, [pc, #436]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	4969      	ldr	r1, [pc, #420]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002170:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4961      	ldr	r1, [pc, #388]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002192:	4b5c      	ldr	r3, [pc, #368]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	4958      	ldr	r1, [pc, #352]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b4:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	4950      	ldr	r1, [pc, #320]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021de:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021ec:	4b45      	ldr	r3, [pc, #276]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4942      	ldr	r1, [pc, #264]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800220a:	d105      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a3c      	ldr	r2, [pc, #240]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002224:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4934      	ldr	r1, [pc, #208]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002242:	d105      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002244:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800224e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800226a:	4926      	ldr	r1, [pc, #152]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	4918      	ldr	r1, [pc, #96]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b2:	d105      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	490a      	ldr	r1, [pc, #40]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e042      	b.n	80023a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe fb75 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2224      	movs	r2, #36	@ 0x24
 8002336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fee4 	bl	8003120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fc15 	bl	8002b88 <UART_SetConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e01b      	b.n	80023a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 ff63 	bl	8003264 <UART_CheckIdleState>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	@ 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d17b      	bne.n	80024ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_Transmit+0x26>
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e074      	b.n	80024bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2221      	movs	r2, #33	@ 0x21
 80023de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fc49 	bl	8000c78 <HAL_GetTick>
 80023e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88fa      	ldrh	r2, [r7, #6]
 80023f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002400:	d108      	bne.n	8002414 <HAL_UART_Transmit+0x6c>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e003      	b.n	800241c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800241c:	e030      	b.n	8002480 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	2180      	movs	r1, #128	@ 0x80
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 ffc5 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e03d      	b.n	80024bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3302      	adds	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e007      	b.n	800246e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1c8      	bne.n	800241e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2200      	movs	r2, #0
 8002494:	2140      	movs	r1, #64	@ 0x40
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 ff8e 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e006      	b.n	80024bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0ba      	sub	sp, #232	@ 0xe8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80024f2:	4013      	ands	r3, r2
 80024f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d11b      	bne.n	8002538 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d015      	beq.n	8002538 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800250c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8300 	beq.w	8002b2e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
      }
      return;
 8002536:	e2fa      	b.n	8002b2e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8123 	beq.w	8002788 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002542:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002546:	4b8d      	ldr	r3, [pc, #564]	@ (800277c <HAL_UART_IRQHandler+0x2b8>)
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800254e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002552:	4b8b      	ldr	r3, [pc, #556]	@ (8002780 <HAL_UART_IRQHandler+0x2bc>)
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 8116 	beq.w	8002788 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800255c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <HAL_UART_IRQHandler+0xc8>
 8002568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00b      	beq.n	800258c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800258c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d011      	beq.n	80025bc <HAL_UART_IRQHandler+0xf8>
 8002598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d011      	beq.n	80025ec <HAL_UART_IRQHandler+0x128>
 80025c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2204      	movs	r2, #4
 80025da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002604:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002608:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <HAL_UART_IRQHandler+0x2b8>)
 800260a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f043 0208 	orr.w	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_UART_IRQHandler+0x196>
 8002634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002638:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8266 	beq.w	8002b32 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d013      	beq.n	800269a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800267e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	2b40      	cmp	r3, #64	@ 0x40
 80026b0:	d005      	beq.n	80026be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d054      	beq.n	8002768 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fee7 	bl	8003492 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ce:	2b40      	cmp	r3, #64	@ 0x40
 80026d0:	d146      	bne.n	8002760 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3308      	adds	r3, #8
 80026d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3308      	adds	r3, #8
 80026fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800270a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800270e:	e841 2300 	strex	r3, r2, [r1]
 8002712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1d9      	bne.n	80026d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800272e:	4a15      	ldr	r2, [pc, #84]	@ (8002784 <HAL_UART_IRQHandler+0x2c0>)
 8002730:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fc11 	bl	8000f60 <HAL_DMA_Abort_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d019      	beq.n	8002778 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002752:	4610      	mov	r0, r2
 8002754:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002756:	e00f      	b.n	8002778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f9ff 	bl	8002b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275e:	e00b      	b.n	8002778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f9fb 	bl	8002b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002766:	e007      	b.n	8002778 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f9f7 	bl	8002b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002776:	e1dc      	b.n	8002b32 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	bf00      	nop
    return;
 800277a:	e1da      	b.n	8002b32 <HAL_UART_IRQHandler+0x66e>
 800277c:	10000001 	.word	0x10000001
 8002780:	04000120 	.word	0x04000120
 8002784:	0800355f 	.word	0x0800355f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 8170 	bne.w	8002a72 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8169 	beq.w	8002a72 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8162 	beq.w	8002a72 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	f040 80d8 	bne.w	8002976 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80af 	beq.w	800293c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f080 80a7 	bcs.w	800293c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8087 	bne.w	800291a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002818:	e853 3f00 	ldrex	r3, [r3]
 800281c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800283a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002842:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002846:	e841 2300 	strex	r3, r2, [r1]
 800284a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800284e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1da      	bne.n	800280c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3308      	adds	r3, #8
 800285c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002866:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3308      	adds	r3, #8
 8002876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800287a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800287e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002882:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800288c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e1      	bne.n	8002856 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3308      	adds	r3, #8
 8002898:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3308      	adds	r3, #8
 80028b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e3      	bne.n	8002892 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e8:	f023 0310 	bic.w	r3, r3, #16
 80028ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002900:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e4      	bne.n	80028d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe faca 	bl	8000eae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800292c:	b29b      	uxth	r3, r3
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f91b 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800293a:	e0fc      	b.n	8002b36 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002946:	429a      	cmp	r2, r3
 8002948:	f040 80f5 	bne.w	8002b36 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 80eb 	bne.w	8002b36 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8fe 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
      return;
 8002974:	e0df      	b.n	8002b36 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002982:	b29b      	uxth	r3, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80d1 	beq.w	8002b3a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80cc 	beq.w	8002b3a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e4      	bne.n	80029a2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	623b      	str	r3, [r7, #32]
   return(result);
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3308      	adds	r3, #8
 80029fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a00:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e1      	bne.n	80029d8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f023 0310 	bic.w	r3, r3, #16
 8002a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	617b      	str	r3, [r7, #20]
   return(result);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e4      	bne.n	8002a28 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f880 	bl	8002b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a70:	e063      	b.n	8002b3a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00e      	beq.n	8002a9c <HAL_UART_IRQHandler+0x5d8>
 8002a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fd9f 	bl	80035d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a9a:	e051      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d014      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03a      	beq.n	8002b3e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
    }
    return;
 8002ad0:	e035      	b.n	8002b3e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_UART_IRQHandler+0x62e>
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fd49 	bl	8003582 <UART_EndTransmit_IT>
    return;
 8002af0:	e026      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_UART_IRQHandler+0x64e>
 8002afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fd78 	bl	8003600 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b10:	e016      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d010      	beq.n	8002b40 <HAL_UART_IRQHandler+0x67c>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	da0c      	bge.n	8002b40 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fd60 	bl	80035ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b2c:	e008      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b2e:	bf00      	nop
 8002b30:	e006      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
    return;
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_UART_IRQHandler+0x67c>
    return;
 8002b3e:	bf00      	nop
  }
}
 8002b40:	37e8      	adds	r7, #232	@ 0xe8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b08c      	sub	sp, #48	@ 0x30
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4bab      	ldr	r3, [pc, #684]	@ (8002e64 <UART_SetConfig+0x2dc>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aa0      	ldr	r2, [pc, #640]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bfe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	f023 010f 	bic.w	r1, r3, #15
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a91      	ldr	r2, [pc, #580]	@ (8002e6c <UART_SetConfig+0x2e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d125      	bne.n	8002c78 <UART_SetConfig+0xf0>
 8002c2c:	4b90      	ldr	r3, [pc, #576]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d81a      	bhi.n	8002c70 <UART_SetConfig+0xe8>
 8002c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <UART_SetConfig+0xb8>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c61 	.word	0x08002c61
 8002c48:	08002c59 	.word	0x08002c59
 8002c4c:	08002c69 	.word	0x08002c69
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c56:	e0d6      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5e:	e0d2      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c60:	2304      	movs	r3, #4
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c66:	e0ce      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c68:	2308      	movs	r3, #8
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6e:	e0ca      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c70:	2310      	movs	r3, #16
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c76:	e0c6      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e74 <UART_SetConfig+0x2ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d138      	bne.n	8002cf4 <UART_SetConfig+0x16c>
 8002c82:	4b7b      	ldr	r3, [pc, #492]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d82d      	bhi.n	8002cec <UART_SetConfig+0x164>
 8002c90:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <UART_SetConfig+0x110>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	08002ced 	.word	0x08002ced
 8002ca0:	08002ced 	.word	0x08002ced
 8002ca4:	08002ced 	.word	0x08002ced
 8002ca8:	08002cdd 	.word	0x08002cdd
 8002cac:	08002ced 	.word	0x08002ced
 8002cb0:	08002ced 	.word	0x08002ced
 8002cb4:	08002ced 	.word	0x08002ced
 8002cb8:	08002cd5 	.word	0x08002cd5
 8002cbc:	08002ced 	.word	0x08002ced
 8002cc0:	08002ced 	.word	0x08002ced
 8002cc4:	08002ced 	.word	0x08002ced
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd2:	e098      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cda:	e094      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	e090      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e08c      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cec:	2310      	movs	r3, #16
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e088      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e78 <UART_SetConfig+0x2f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d125      	bne.n	8002d4a <UART_SetConfig+0x1c2>
 8002cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d08:	2b30      	cmp	r3, #48	@ 0x30
 8002d0a:	d016      	beq.n	8002d3a <UART_SetConfig+0x1b2>
 8002d0c:	2b30      	cmp	r3, #48	@ 0x30
 8002d0e:	d818      	bhi.n	8002d42 <UART_SetConfig+0x1ba>
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	d00a      	beq.n	8002d2a <UART_SetConfig+0x1a2>
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d814      	bhi.n	8002d42 <UART_SetConfig+0x1ba>
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <UART_SetConfig+0x19a>
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d008      	beq.n	8002d32 <UART_SetConfig+0x1aa>
 8002d20:	e00f      	b.n	8002d42 <UART_SetConfig+0x1ba>
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d28:	e06d      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d30:	e069      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d32:	2304      	movs	r3, #4
 8002d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d38:	e065      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d40:	e061      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d42:	2310      	movs	r3, #16
 8002d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d48:	e05d      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <UART_SetConfig+0x2f4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d125      	bne.n	8002da0 <UART_SetConfig+0x218>
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d60:	d016      	beq.n	8002d90 <UART_SetConfig+0x208>
 8002d62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d64:	d818      	bhi.n	8002d98 <UART_SetConfig+0x210>
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d00a      	beq.n	8002d80 <UART_SetConfig+0x1f8>
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d814      	bhi.n	8002d98 <UART_SetConfig+0x210>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <UART_SetConfig+0x1f0>
 8002d72:	2b40      	cmp	r3, #64	@ 0x40
 8002d74:	d008      	beq.n	8002d88 <UART_SetConfig+0x200>
 8002d76:	e00f      	b.n	8002d98 <UART_SetConfig+0x210>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d7e:	e042      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d80:	2302      	movs	r3, #2
 8002d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d86:	e03e      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d8e:	e03a      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d90:	2308      	movs	r3, #8
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e036      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9e:	e032      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a30      	ldr	r2, [pc, #192]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12a      	bne.n	8002e00 <UART_SetConfig+0x278>
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <UART_SetConfig+0x2e8>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002db4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002db8:	d01a      	beq.n	8002df0 <UART_SetConfig+0x268>
 8002dba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dbe:	d81b      	bhi.n	8002df8 <UART_SetConfig+0x270>
 8002dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dc4:	d00c      	beq.n	8002de0 <UART_SetConfig+0x258>
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dca:	d815      	bhi.n	8002df8 <UART_SetConfig+0x270>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <UART_SetConfig+0x250>
 8002dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd4:	d008      	beq.n	8002de8 <UART_SetConfig+0x260>
 8002dd6:	e00f      	b.n	8002df8 <UART_SetConfig+0x270>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dde:	e012      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002de6:	e00e      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002de8:	2304      	movs	r3, #4
 8002dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dee:	e00a      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002df0:	2308      	movs	r3, #8
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df6:	e006      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfe:	e002      	b.n	8002e06 <UART_SetConfig+0x27e>
 8002e00:	2310      	movs	r3, #16
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <UART_SetConfig+0x2e0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	f040 80a8 	bne.w	8002f62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d834      	bhi.n	8002e84 <UART_SetConfig+0x2fc>
 8002e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <UART_SetConfig+0x298>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e45 	.word	0x08002e45
 8002e24:	08002e85 	.word	0x08002e85
 8002e28:	08002e4d 	.word	0x08002e4d
 8002e2c:	08002e85 	.word	0x08002e85
 8002e30:	08002e53 	.word	0x08002e53
 8002e34:	08002e85 	.word	0x08002e85
 8002e38:	08002e85 	.word	0x08002e85
 8002e3c:	08002e85 	.word	0x08002e85
 8002e40:	08002e5b 	.word	0x08002e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e44:	f7fe fffe 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8002e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e4a:	e021      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <UART_SetConfig+0x2f8>)
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e50:	e01e      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e52:	f7fe ff89 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002e56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e58:	e01a      	b.n	8002e90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e60:	e016      	b.n	8002e90 <UART_SetConfig+0x308>
 8002e62:	bf00      	nop
 8002e64:	cfff69f3 	.word	0xcfff69f3
 8002e68:	40008000 	.word	0x40008000
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40004400 	.word	0x40004400
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40004c00 	.word	0x40004c00
 8002e80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 812a 	beq.w	80030ec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	4a9e      	ldr	r2, [pc, #632]	@ (8003118 <UART_SetConfig+0x590>)
 8002e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d305      	bcc.n	8002ec8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d903      	bls.n	8002ed0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ece:	e10d      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	60fa      	str	r2, [r7, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	4a8e      	ldr	r2, [pc, #568]	@ (8003118 <UART_SetConfig+0x590>)
 8002ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ef2:	f7fd f991 	bl	8000218 <__aeabi_uldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	020b      	lsls	r3, r1, #8
 8002f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f0c:	0202      	lsls	r2, r0, #8
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	6849      	ldr	r1, [r1, #4]
 8002f12:	0849      	lsrs	r1, r1, #1
 8002f14:	2000      	movs	r0, #0
 8002f16:	460c      	mov	r4, r1
 8002f18:	4605      	mov	r5, r0
 8002f1a:	eb12 0804 	adds.w	r8, r2, r4
 8002f1e:	eb43 0905 	adc.w	r9, r3, r5
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	469a      	mov	sl, r3
 8002f2a:	4693      	mov	fp, r2
 8002f2c:	4652      	mov	r2, sl
 8002f2e:	465b      	mov	r3, fp
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd f970 	bl	8000218 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f46:	d308      	bcc.n	8002f5a <UART_SetConfig+0x3d2>
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f4e:	d204      	bcs.n	8002f5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e0c8      	b.n	80030ec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f60:	e0c4      	b.n	80030ec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f6a:	d167      	bne.n	800303c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d828      	bhi.n	8002fc6 <UART_SetConfig+0x43e>
 8002f74:	a201      	add	r2, pc, #4	@ (adr r2, 8002f7c <UART_SetConfig+0x3f4>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fc7 	.word	0x08002fc7
 8002f94:	08002fc7 	.word	0x08002fc7
 8002f98:	08002fc7 	.word	0x08002fc7
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe ff50 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fa6:	e014      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7fe ff62 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 8002fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fae:	e010      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <UART_SetConfig+0x594>)
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fb4:	e00d      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7fe fed7 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fbc:	e009      	b.n	8002fd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fc4:	e005      	b.n	8002fd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8089 	beq.w	80030ec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	4a4e      	ldr	r2, [pc, #312]	@ (8003118 <UART_SetConfig+0x590>)
 8002fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fec:	005a      	lsls	r2, r3, #1
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	441a      	add	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d916      	bls.n	8003034 <UART_SetConfig+0x4ac>
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d212      	bcs.n	8003034 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f023 030f 	bic.w	r3, r3, #15
 8003016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	b29b      	uxth	r3, r3
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	b29a      	uxth	r2, r3
 8003024:	8bfb      	ldrh	r3, [r7, #30]
 8003026:	4313      	orrs	r3, r2
 8003028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	8bfa      	ldrh	r2, [r7, #30]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	e05b      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800303a:	e057      	b.n	80030ec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003040:	2b08      	cmp	r3, #8
 8003042:	d828      	bhi.n	8003096 <UART_SetConfig+0x50e>
 8003044:	a201      	add	r2, pc, #4	@ (adr r2, 800304c <UART_SetConfig+0x4c4>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	08003097 	.word	0x08003097
 800305c:	08003087 	.word	0x08003087
 8003060:	08003097 	.word	0x08003097
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7fe fee8 	bl	8001e44 <HAL_RCC_GetPCLK1Freq>
 8003074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003076:	e014      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7fe fefa 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 800307c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800307e:	e010      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b26      	ldr	r3, [pc, #152]	@ (800311c <UART_SetConfig+0x594>)
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003084:	e00d      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7fe fe6f 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 800308a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800308c:	e009      	b.n	80030a2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003094:	e005      	b.n	80030a2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030a0:	bf00      	nop
    }

    if (pclk != 0U)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <UART_SetConfig+0x590>)
 80030ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	441a      	add	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	d909      	bls.n	80030e6 <UART_SetConfig+0x55e>
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d8:	d205      	bcs.n	80030e6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	e002      	b.n	80030ec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003108:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800310c:	4618      	mov	r0, r3
 800310e:	3730      	adds	r7, #48	@ 0x30
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	080041ec 	.word	0x080041ec
 800311c:	00f42400 	.word	0x00f42400

08003120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01a      	beq.n	8003236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321e:	d10a      	bne.n	8003236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b098      	sub	sp, #96	@ 0x60
 8003268:	af02      	add	r7, sp, #8
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003274:	f7fd fd00 	bl	8000c78 <HAL_GetTick>
 8003278:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d12f      	bne.n	80032e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003290:	2200      	movs	r2, #0
 8003292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f88e 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d022      	beq.n	80032e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e6      	bne.n	80032a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e063      	b.n	80033b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d149      	bne.n	800338a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fe:	2200      	movs	r2, #0
 8003300:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f857 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d03c      	beq.n	800338a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	623b      	str	r3, [r7, #32]
   return(result);
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e6      	bne.n	8003310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	60fb      	str	r3, [r7, #12]
   return(result);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003362:	61fa      	str	r2, [r7, #28]
 8003364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	617b      	str	r3, [r7, #20]
   return(result);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e5      	bne.n	8003342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e012      	b.n	80033b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3758      	adds	r7, #88	@ 0x58
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	e04f      	b.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033d0:	d04b      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fd fc51 	bl	8000c78 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e04e      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d037      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b80      	cmp	r3, #128	@ 0x80
 80033fe:	d034      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d031      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d110      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f838 	bl	8003492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2208      	movs	r2, #8
 8003426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e029      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003444:	d111      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800344e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f81e 	bl	8003492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e00f      	b.n	800348a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	429a      	cmp	r2, r3
 8003486:	d0a0      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003492:	b480      	push	{r7}
 8003494:	b095      	sub	sp, #84	@ 0x54
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e6      	bne.n	800349a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3308      	adds	r3, #8
 80034d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	61fb      	str	r3, [r7, #28]
   return(result);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e3      	bne.n	80034cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d118      	bne.n	800353e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60bb      	str	r3, [r7, #8]
   return(result);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	647b      	str	r3, [r7, #68]	@ 0x44
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6979      	ldr	r1, [r7, #20]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003552:	bf00      	nop
 8003554:	3754      	adds	r7, #84	@ 0x54
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7ff faf1 	bl	8002b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60bb      	str	r3, [r7, #8]
   return(result);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	613b      	str	r3, [r7, #16]
   return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fabc 	bl	8002b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035d0:	bf00      	nop
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_UARTEx_DisableFifoMode+0x16>
 8003626:	2302      	movs	r3, #2
 8003628:	e027      	b.n	800367a <HAL_UARTEx_DisableFifoMode+0x66>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2224      	movs	r2, #36	@ 0x24
 8003636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800369a:	2302      	movs	r3, #2
 800369c:	e02d      	b.n	80036fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2224      	movs	r2, #36	@ 0x24
 80036aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f850 	bl	8003780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003716:	2302      	movs	r3, #2
 8003718:	e02d      	b.n	8003776 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2224      	movs	r2, #36	@ 0x24
 8003726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f812 	bl	8003780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378c:	2b00      	cmp	r3, #0
 800378e:	d108      	bne.n	80037a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80037a0:	e031      	b.n	8003806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80037a2:	2308      	movs	r3, #8
 80037a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80037a6:	2308      	movs	r3, #8
 80037a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	0e5b      	lsrs	r3, r3, #25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	0f5b      	lsrs	r3, r3, #29
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037ca:	7bbb      	ldrb	r3, [r7, #14]
 80037cc:	7b3a      	ldrb	r2, [r7, #12]
 80037ce:	4911      	ldr	r1, [pc, #68]	@ (8003814 <UARTEx_SetNbDataToProcess+0x94>)
 80037d0:	5c8a      	ldrb	r2, [r1, r2]
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037d6:	7b3a      	ldrb	r2, [r7, #12]
 80037d8:	490f      	ldr	r1, [pc, #60]	@ (8003818 <UARTEx_SetNbDataToProcess+0x98>)
 80037da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	7b7a      	ldrb	r2, [r7, #13]
 80037ec:	4909      	ldr	r1, [pc, #36]	@ (8003814 <UARTEx_SetNbDataToProcess+0x94>)
 80037ee:	5c8a      	ldrb	r2, [r1, r2]
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037f4:	7b7a      	ldrb	r2, [r7, #13]
 80037f6:	4908      	ldr	r1, [pc, #32]	@ (8003818 <UARTEx_SetNbDataToProcess+0x98>)
 80037f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	08004204 	.word	0x08004204
 8003818:	0800420c 	.word	0x0800420c

0800381c <std>:
 800381c:	2300      	movs	r3, #0
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
 8003822:	e9c0 3300 	strd	r3, r3, [r0]
 8003826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800382a:	6083      	str	r3, [r0, #8]
 800382c:	8181      	strh	r1, [r0, #12]
 800382e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003830:	81c2      	strh	r2, [r0, #14]
 8003832:	6183      	str	r3, [r0, #24]
 8003834:	4619      	mov	r1, r3
 8003836:	2208      	movs	r2, #8
 8003838:	305c      	adds	r0, #92	@ 0x5c
 800383a:	f000 f9e7 	bl	8003c0c <memset>
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <std+0x58>)
 8003840:	6263      	str	r3, [r4, #36]	@ 0x24
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <std+0x5c>)
 8003844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <std+0x60>)
 8003848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800384a:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <std+0x64>)
 800384c:	6323      	str	r3, [r4, #48]	@ 0x30
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <std+0x68>)
 8003850:	6224      	str	r4, [r4, #32]
 8003852:	429c      	cmp	r4, r3
 8003854:	d006      	beq.n	8003864 <std+0x48>
 8003856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800385a:	4294      	cmp	r4, r2
 800385c:	d002      	beq.n	8003864 <std+0x48>
 800385e:	33d0      	adds	r3, #208	@ 0xd0
 8003860:	429c      	cmp	r4, r3
 8003862:	d105      	bne.n	8003870 <std+0x54>
 8003864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386c:	f000 ba46 	b.w	8003cfc <__retarget_lock_init_recursive>
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	08003a5d 	.word	0x08003a5d
 8003878:	08003a7f 	.word	0x08003a7f
 800387c:	08003ab7 	.word	0x08003ab7
 8003880:	08003adb 	.word	0x08003adb
 8003884:	200001b4 	.word	0x200001b4

08003888 <stdio_exit_handler>:
 8003888:	4a02      	ldr	r2, [pc, #8]	@ (8003894 <stdio_exit_handler+0xc>)
 800388a:	4903      	ldr	r1, [pc, #12]	@ (8003898 <stdio_exit_handler+0x10>)
 800388c:	4803      	ldr	r0, [pc, #12]	@ (800389c <stdio_exit_handler+0x14>)
 800388e:	f000 b869 	b.w	8003964 <_fwalk_sglue>
 8003892:	bf00      	nop
 8003894:	2000000c 	.word	0x2000000c
 8003898:	08003ffd 	.word	0x08003ffd
 800389c:	2000001c 	.word	0x2000001c

080038a0 <cleanup_stdio>:
 80038a0:	6841      	ldr	r1, [r0, #4]
 80038a2:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <cleanup_stdio+0x34>)
 80038a4:	4299      	cmp	r1, r3
 80038a6:	b510      	push	{r4, lr}
 80038a8:	4604      	mov	r4, r0
 80038aa:	d001      	beq.n	80038b0 <cleanup_stdio+0x10>
 80038ac:	f000 fba6 	bl	8003ffc <_fflush_r>
 80038b0:	68a1      	ldr	r1, [r4, #8]
 80038b2:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <cleanup_stdio+0x38>)
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d002      	beq.n	80038be <cleanup_stdio+0x1e>
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 fb9f 	bl	8003ffc <_fflush_r>
 80038be:	68e1      	ldr	r1, [r4, #12]
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <cleanup_stdio+0x3c>)
 80038c2:	4299      	cmp	r1, r3
 80038c4:	d004      	beq.n	80038d0 <cleanup_stdio+0x30>
 80038c6:	4620      	mov	r0, r4
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	f000 bb96 	b.w	8003ffc <_fflush_r>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	bf00      	nop
 80038d4:	200001b4 	.word	0x200001b4
 80038d8:	2000021c 	.word	0x2000021c
 80038dc:	20000284 	.word	0x20000284

080038e0 <global_stdio_init.part.0>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <global_stdio_init.part.0+0x30>)
 80038e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003914 <global_stdio_init.part.0+0x34>)
 80038e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003918 <global_stdio_init.part.0+0x38>)
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	4620      	mov	r0, r4
 80038ec:	2200      	movs	r2, #0
 80038ee:	2104      	movs	r1, #4
 80038f0:	f7ff ff94 	bl	800381c <std>
 80038f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038f8:	2201      	movs	r2, #1
 80038fa:	2109      	movs	r1, #9
 80038fc:	f7ff ff8e 	bl	800381c <std>
 8003900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003904:	2202      	movs	r2, #2
 8003906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800390a:	2112      	movs	r1, #18
 800390c:	f7ff bf86 	b.w	800381c <std>
 8003910:	200002ec 	.word	0x200002ec
 8003914:	200001b4 	.word	0x200001b4
 8003918:	08003889 	.word	0x08003889

0800391c <__sfp_lock_acquire>:
 800391c:	4801      	ldr	r0, [pc, #4]	@ (8003924 <__sfp_lock_acquire+0x8>)
 800391e:	f000 b9ee 	b.w	8003cfe <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	200002f5 	.word	0x200002f5

08003928 <__sfp_lock_release>:
 8003928:	4801      	ldr	r0, [pc, #4]	@ (8003930 <__sfp_lock_release+0x8>)
 800392a:	f000 b9e9 	b.w	8003d00 <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	200002f5 	.word	0x200002f5

08003934 <__sinit>:
 8003934:	b510      	push	{r4, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	f7ff fff0 	bl	800391c <__sfp_lock_acquire>
 800393c:	6a23      	ldr	r3, [r4, #32]
 800393e:	b11b      	cbz	r3, 8003948 <__sinit+0x14>
 8003940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003944:	f7ff bff0 	b.w	8003928 <__sfp_lock_release>
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__sinit+0x28>)
 800394a:	6223      	str	r3, [r4, #32]
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <__sinit+0x2c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f5      	bne.n	8003940 <__sinit+0xc>
 8003954:	f7ff ffc4 	bl	80038e0 <global_stdio_init.part.0>
 8003958:	e7f2      	b.n	8003940 <__sinit+0xc>
 800395a:	bf00      	nop
 800395c:	080038a1 	.word	0x080038a1
 8003960:	200002ec 	.word	0x200002ec

08003964 <_fwalk_sglue>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	4607      	mov	r7, r0
 800396a:	4688      	mov	r8, r1
 800396c:	4614      	mov	r4, r2
 800396e:	2600      	movs	r6, #0
 8003970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003974:	f1b9 0901 	subs.w	r9, r9, #1
 8003978:	d505      	bpl.n	8003986 <_fwalk_sglue+0x22>
 800397a:	6824      	ldr	r4, [r4, #0]
 800397c:	2c00      	cmp	r4, #0
 800397e:	d1f7      	bne.n	8003970 <_fwalk_sglue+0xc>
 8003980:	4630      	mov	r0, r6
 8003982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003986:	89ab      	ldrh	r3, [r5, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d907      	bls.n	800399c <_fwalk_sglue+0x38>
 800398c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003990:	3301      	adds	r3, #1
 8003992:	d003      	beq.n	800399c <_fwalk_sglue+0x38>
 8003994:	4629      	mov	r1, r5
 8003996:	4638      	mov	r0, r7
 8003998:	47c0      	blx	r8
 800399a:	4306      	orrs	r6, r0
 800399c:	3568      	adds	r5, #104	@ 0x68
 800399e:	e7e9      	b.n	8003974 <_fwalk_sglue+0x10>

080039a0 <_puts_r>:
 80039a0:	6a03      	ldr	r3, [r0, #32]
 80039a2:	b570      	push	{r4, r5, r6, lr}
 80039a4:	6884      	ldr	r4, [r0, #8]
 80039a6:	4605      	mov	r5, r0
 80039a8:	460e      	mov	r6, r1
 80039aa:	b90b      	cbnz	r3, 80039b0 <_puts_r+0x10>
 80039ac:	f7ff ffc2 	bl	8003934 <__sinit>
 80039b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039b2:	07db      	lsls	r3, r3, #31
 80039b4:	d405      	bmi.n	80039c2 <_puts_r+0x22>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	0598      	lsls	r0, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_puts_r+0x22>
 80039bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039be:	f000 f99e 	bl	8003cfe <__retarget_lock_acquire_recursive>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	0719      	lsls	r1, r3, #28
 80039c6:	d502      	bpl.n	80039ce <_puts_r+0x2e>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d135      	bne.n	8003a3a <_puts_r+0x9a>
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 f8c5 	bl	8003b60 <__swsetup_r>
 80039d6:	b380      	cbz	r0, 8003a3a <_puts_r+0x9a>
 80039d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80039dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039de:	07da      	lsls	r2, r3, #31
 80039e0:	d405      	bmi.n	80039ee <_puts_r+0x4e>
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	059b      	lsls	r3, r3, #22
 80039e6:	d402      	bmi.n	80039ee <_puts_r+0x4e>
 80039e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ea:	f000 f989 	bl	8003d00 <__retarget_lock_release_recursive>
 80039ee:	4628      	mov	r0, r5
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da04      	bge.n	8003a00 <_puts_r+0x60>
 80039f6:	69a2      	ldr	r2, [r4, #24]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	dc17      	bgt.n	8003a2c <_puts_r+0x8c>
 80039fc:	290a      	cmp	r1, #10
 80039fe:	d015      	beq.n	8003a2c <_puts_r+0x8c>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	6022      	str	r2, [r4, #0]
 8003a06:	7019      	strb	r1, [r3, #0]
 8003a08:	68a3      	ldr	r3, [r4, #8]
 8003a0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60a3      	str	r3, [r4, #8]
 8003a12:	2900      	cmp	r1, #0
 8003a14:	d1ed      	bne.n	80039f2 <_puts_r+0x52>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da11      	bge.n	8003a3e <_puts_r+0x9e>
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	210a      	movs	r1, #10
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 f85f 	bl	8003ae2 <__swbuf_r>
 8003a24:	3001      	adds	r0, #1
 8003a26:	d0d7      	beq.n	80039d8 <_puts_r+0x38>
 8003a28:	250a      	movs	r5, #10
 8003a2a:	e7d7      	b.n	80039dc <_puts_r+0x3c>
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f857 	bl	8003ae2 <__swbuf_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1e7      	bne.n	8003a08 <_puts_r+0x68>
 8003a38:	e7ce      	b.n	80039d8 <_puts_r+0x38>
 8003a3a:	3e01      	subs	r6, #1
 8003a3c:	e7e4      	b.n	8003a08 <_puts_r+0x68>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	6022      	str	r2, [r4, #0]
 8003a44:	220a      	movs	r2, #10
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e7ee      	b.n	8003a28 <_puts_r+0x88>
	...

08003a4c <puts>:
 8003a4c:	4b02      	ldr	r3, [pc, #8]	@ (8003a58 <puts+0xc>)
 8003a4e:	4601      	mov	r1, r0
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f7ff bfa5 	b.w	80039a0 <_puts_r>
 8003a56:	bf00      	nop
 8003a58:	20000018 	.word	0x20000018

08003a5c <__sread>:
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	460c      	mov	r4, r1
 8003a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a64:	f000 f8fc 	bl	8003c60 <_read_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	bfab      	itete	ge
 8003a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a70:	181b      	addge	r3, r3, r0
 8003a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a76:	bfac      	ite	ge
 8003a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a7a:	81a3      	strhlt	r3, [r4, #12]
 8003a7c:	bd10      	pop	{r4, pc}

08003a7e <__swrite>:
 8003a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a82:	461f      	mov	r7, r3
 8003a84:	898b      	ldrh	r3, [r1, #12]
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	4605      	mov	r5, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	d505      	bpl.n	8003a9c <__swrite+0x1e>
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	2302      	movs	r3, #2
 8003a96:	2200      	movs	r2, #0
 8003a98:	f000 f8d0 	bl	8003c3c <_lseek_r>
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	4632      	mov	r2, r6
 8003aaa:	463b      	mov	r3, r7
 8003aac:	4628      	mov	r0, r5
 8003aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab2:	f000 b8e7 	b.w	8003c84 <_write_r>

08003ab6 <__sseek>:
 8003ab6:	b510      	push	{r4, lr}
 8003ab8:	460c      	mov	r4, r1
 8003aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003abe:	f000 f8bd 	bl	8003c3c <_lseek_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	bf15      	itete	ne
 8003ac8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003aca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ace:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ad2:	81a3      	strheq	r3, [r4, #12]
 8003ad4:	bf18      	it	ne
 8003ad6:	81a3      	strhne	r3, [r4, #12]
 8003ad8:	bd10      	pop	{r4, pc}

08003ada <__sclose>:
 8003ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ade:	f000 b89d 	b.w	8003c1c <_close_r>

08003ae2 <__swbuf_r>:
 8003ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	4614      	mov	r4, r2
 8003ae8:	4605      	mov	r5, r0
 8003aea:	b118      	cbz	r0, 8003af4 <__swbuf_r+0x12>
 8003aec:	6a03      	ldr	r3, [r0, #32]
 8003aee:	b90b      	cbnz	r3, 8003af4 <__swbuf_r+0x12>
 8003af0:	f7ff ff20 	bl	8003934 <__sinit>
 8003af4:	69a3      	ldr	r3, [r4, #24]
 8003af6:	60a3      	str	r3, [r4, #8]
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	071a      	lsls	r2, r3, #28
 8003afc:	d501      	bpl.n	8003b02 <__swbuf_r+0x20>
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	b943      	cbnz	r3, 8003b14 <__swbuf_r+0x32>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f82b 	bl	8003b60 <__swsetup_r>
 8003b0a:	b118      	cbz	r0, 8003b14 <__swbuf_r+0x32>
 8003b0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003b10:	4638      	mov	r0, r7
 8003b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	6922      	ldr	r2, [r4, #16]
 8003b18:	1a98      	subs	r0, r3, r2
 8003b1a:	6963      	ldr	r3, [r4, #20]
 8003b1c:	b2f6      	uxtb	r6, r6
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	4637      	mov	r7, r6
 8003b22:	dc05      	bgt.n	8003b30 <__swbuf_r+0x4e>
 8003b24:	4621      	mov	r1, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 fa68 	bl	8003ffc <_fflush_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d1ed      	bne.n	8003b0c <__swbuf_r+0x2a>
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60a3      	str	r3, [r4, #8]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	6022      	str	r2, [r4, #0]
 8003b3c:	701e      	strb	r6, [r3, #0]
 8003b3e:	6962      	ldr	r2, [r4, #20]
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d004      	beq.n	8003b50 <__swbuf_r+0x6e>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	07db      	lsls	r3, r3, #31
 8003b4a:	d5e1      	bpl.n	8003b10 <__swbuf_r+0x2e>
 8003b4c:	2e0a      	cmp	r6, #10
 8003b4e:	d1df      	bne.n	8003b10 <__swbuf_r+0x2e>
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 fa52 	bl	8003ffc <_fflush_r>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	d0d9      	beq.n	8003b10 <__swbuf_r+0x2e>
 8003b5c:	e7d6      	b.n	8003b0c <__swbuf_r+0x2a>
	...

08003b60 <__swsetup_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <__swsetup_r+0xa8>)
 8003b64:	4605      	mov	r5, r0
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	460c      	mov	r4, r1
 8003b6a:	b118      	cbz	r0, 8003b74 <__swsetup_r+0x14>
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	b90b      	cbnz	r3, 8003b74 <__swsetup_r+0x14>
 8003b70:	f7ff fee0 	bl	8003934 <__sinit>
 8003b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b78:	0719      	lsls	r1, r3, #28
 8003b7a:	d422      	bmi.n	8003bc2 <__swsetup_r+0x62>
 8003b7c:	06da      	lsls	r2, r3, #27
 8003b7e:	d407      	bmi.n	8003b90 <__swsetup_r+0x30>
 8003b80:	2209      	movs	r2, #9
 8003b82:	602a      	str	r2, [r5, #0]
 8003b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b8e:	e033      	b.n	8003bf8 <__swsetup_r+0x98>
 8003b90:	0758      	lsls	r0, r3, #29
 8003b92:	d512      	bpl.n	8003bba <__swsetup_r+0x5a>
 8003b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b96:	b141      	cbz	r1, 8003baa <__swsetup_r+0x4a>
 8003b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	d002      	beq.n	8003ba6 <__swsetup_r+0x46>
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f000 f8af 	bl	8003d04 <_free_r>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6063      	str	r3, [r4, #4]
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	81a3      	strh	r3, [r4, #12]
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	b94b      	cbnz	r3, 8003bda <__swsetup_r+0x7a>
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd0:	d003      	beq.n	8003bda <__swsetup_r+0x7a>
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 fa5f 	bl	8004098 <__smakebuf_r>
 8003bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bde:	f013 0201 	ands.w	r2, r3, #1
 8003be2:	d00a      	beq.n	8003bfa <__swsetup_r+0x9a>
 8003be4:	2200      	movs	r2, #0
 8003be6:	60a2      	str	r2, [r4, #8]
 8003be8:	6962      	ldr	r2, [r4, #20]
 8003bea:	4252      	negs	r2, r2
 8003bec:	61a2      	str	r2, [r4, #24]
 8003bee:	6922      	ldr	r2, [r4, #16]
 8003bf0:	b942      	cbnz	r2, 8003c04 <__swsetup_r+0xa4>
 8003bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bf6:	d1c5      	bne.n	8003b84 <__swsetup_r+0x24>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	0799      	lsls	r1, r3, #30
 8003bfc:	bf58      	it	pl
 8003bfe:	6962      	ldrpl	r2, [r4, #20]
 8003c00:	60a2      	str	r2, [r4, #8]
 8003c02:	e7f4      	b.n	8003bee <__swsetup_r+0x8e>
 8003c04:	2000      	movs	r0, #0
 8003c06:	e7f7      	b.n	8003bf8 <__swsetup_r+0x98>
 8003c08:	20000018 	.word	0x20000018

08003c0c <memset>:
 8003c0c:	4402      	add	r2, r0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d100      	bne.n	8003c16 <memset+0xa>
 8003c14:	4770      	bx	lr
 8003c16:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1a:	e7f9      	b.n	8003c10 <memset+0x4>

08003c1c <_close_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d06      	ldr	r5, [pc, #24]	@ (8003c38 <_close_r+0x1c>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc fde3 	bl	80007f2 <_close>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_close_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_close_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	200002f0 	.word	0x200002f0

08003c3c <_lseek_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d07      	ldr	r5, [pc, #28]	@ (8003c5c <_lseek_r+0x20>)
 8003c40:	4604      	mov	r4, r0
 8003c42:	4608      	mov	r0, r1
 8003c44:	4611      	mov	r1, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7fc fdf8 	bl	8000840 <_lseek>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_lseek_r+0x1e>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_lseek_r+0x1e>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	200002f0 	.word	0x200002f0

08003c60 <_read_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d07      	ldr	r5, [pc, #28]	@ (8003c80 <_read_r+0x20>)
 8003c64:	4604      	mov	r4, r0
 8003c66:	4608      	mov	r0, r1
 8003c68:	4611      	mov	r1, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7fc fd86 	bl	8000780 <_read>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_read_r+0x1e>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_read_r+0x1e>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	200002f0 	.word	0x200002f0

08003c84 <_write_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4d07      	ldr	r5, [pc, #28]	@ (8003ca4 <_write_r+0x20>)
 8003c88:	4604      	mov	r4, r0
 8003c8a:	4608      	mov	r0, r1
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	602a      	str	r2, [r5, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f7fc fd91 	bl	80007ba <_write>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_write_r+0x1e>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_write_r+0x1e>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	200002f0 	.word	0x200002f0

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	@ (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000018 	.word	0x20000018

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003cec <__libc_init_array+0x38>)
 8003cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf0 <__libc_init_array+0x3c>)
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003cf4 <__libc_init_array+0x40>)
 8003cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003cf8 <__libc_init_array+0x44>)
 8003cc8:	f000 fa54 	bl	8004174 <_init>
 8003ccc:	1b64      	subs	r4, r4, r5
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	2600      	movs	r6, #0
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	0800421c 	.word	0x0800421c
 8003cf0:	0800421c 	.word	0x0800421c
 8003cf4:	0800421c 	.word	0x0800421c
 8003cf8:	08004220 	.word	0x08004220

08003cfc <__retarget_lock_init_recursive>:
 8003cfc:	4770      	bx	lr

08003cfe <__retarget_lock_acquire_recursive>:
 8003cfe:	4770      	bx	lr

08003d00 <__retarget_lock_release_recursive>:
 8003d00:	4770      	bx	lr
	...

08003d04 <_free_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4605      	mov	r5, r0
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	d041      	beq.n	8003d90 <_free_r+0x8c>
 8003d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d10:	1f0c      	subs	r4, r1, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfb8      	it	lt
 8003d16:	18e4      	addlt	r4, r4, r3
 8003d18:	f000 f8e0 	bl	8003edc <__malloc_lock>
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d94 <_free_r+0x90>)
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	b933      	cbnz	r3, 8003d30 <_free_r+0x2c>
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	6014      	str	r4, [r2, #0]
 8003d26:	4628      	mov	r0, r5
 8003d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2c:	f000 b8dc 	b.w	8003ee8 <__malloc_unlock>
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	d908      	bls.n	8003d46 <_free_r+0x42>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	1821      	adds	r1, r4, r0
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	bf01      	itttt	eq
 8003d3c:	6819      	ldreq	r1, [r3, #0]
 8003d3e:	685b      	ldreq	r3, [r3, #4]
 8003d40:	1809      	addeq	r1, r1, r0
 8003d42:	6021      	streq	r1, [r4, #0]
 8003d44:	e7ed      	b.n	8003d22 <_free_r+0x1e>
 8003d46:	461a      	mov	r2, r3
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b10b      	cbz	r3, 8003d50 <_free_r+0x4c>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d9fa      	bls.n	8003d46 <_free_r+0x42>
 8003d50:	6811      	ldr	r1, [r2, #0]
 8003d52:	1850      	adds	r0, r2, r1
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d10b      	bne.n	8003d70 <_free_r+0x6c>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	4401      	add	r1, r0
 8003d5c:	1850      	adds	r0, r2, r1
 8003d5e:	4283      	cmp	r3, r0
 8003d60:	6011      	str	r1, [r2, #0]
 8003d62:	d1e0      	bne.n	8003d26 <_free_r+0x22>
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	6053      	str	r3, [r2, #4]
 8003d6a:	4408      	add	r0, r1
 8003d6c:	6010      	str	r0, [r2, #0]
 8003d6e:	e7da      	b.n	8003d26 <_free_r+0x22>
 8003d70:	d902      	bls.n	8003d78 <_free_r+0x74>
 8003d72:	230c      	movs	r3, #12
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	e7d6      	b.n	8003d26 <_free_r+0x22>
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	1821      	adds	r1, r4, r0
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	bf04      	itt	eq
 8003d80:	6819      	ldreq	r1, [r3, #0]
 8003d82:	685b      	ldreq	r3, [r3, #4]
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	bf04      	itt	eq
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	6054      	str	r4, [r2, #4]
 8003d8e:	e7ca      	b.n	8003d26 <_free_r+0x22>
 8003d90:	bd38      	pop	{r3, r4, r5, pc}
 8003d92:	bf00      	nop
 8003d94:	200002fc 	.word	0x200002fc

08003d98 <sbrk_aligned>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003dd8 <sbrk_aligned+0x40>)
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	6831      	ldr	r1, [r6, #0]
 8003da0:	4605      	mov	r5, r0
 8003da2:	b911      	cbnz	r1, 8003daa <sbrk_aligned+0x12>
 8003da4:	f000 f9d6 	bl	8004154 <_sbrk_r>
 8003da8:	6030      	str	r0, [r6, #0]
 8003daa:	4621      	mov	r1, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	f000 f9d1 	bl	8004154 <_sbrk_r>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	d103      	bne.n	8003dbe <sbrk_aligned+0x26>
 8003db6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003dba:	4620      	mov	r0, r4
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	1cc4      	adds	r4, r0, #3
 8003dc0:	f024 0403 	bic.w	r4, r4, #3
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d0f8      	beq.n	8003dba <sbrk_aligned+0x22>
 8003dc8:	1a21      	subs	r1, r4, r0
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f000 f9c2 	bl	8004154 <_sbrk_r>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d1f2      	bne.n	8003dba <sbrk_aligned+0x22>
 8003dd4:	e7ef      	b.n	8003db6 <sbrk_aligned+0x1e>
 8003dd6:	bf00      	nop
 8003dd8:	200002f8 	.word	0x200002f8

08003ddc <_malloc_r>:
 8003ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de0:	1ccd      	adds	r5, r1, #3
 8003de2:	f025 0503 	bic.w	r5, r5, #3
 8003de6:	3508      	adds	r5, #8
 8003de8:	2d0c      	cmp	r5, #12
 8003dea:	bf38      	it	cc
 8003dec:	250c      	movcc	r5, #12
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	4606      	mov	r6, r0
 8003df2:	db01      	blt.n	8003df8 <_malloc_r+0x1c>
 8003df4:	42a9      	cmp	r1, r5
 8003df6:	d904      	bls.n	8003e02 <_malloc_r+0x26>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	6033      	str	r3, [r6, #0]
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ed8 <_malloc_r+0xfc>
 8003e06:	f000 f869 	bl	8003edc <__malloc_lock>
 8003e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0e:	461c      	mov	r4, r3
 8003e10:	bb44      	cbnz	r4, 8003e64 <_malloc_r+0x88>
 8003e12:	4629      	mov	r1, r5
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff ffbf 	bl	8003d98 <sbrk_aligned>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	d158      	bne.n	8003ed2 <_malloc_r+0xf6>
 8003e20:	f8d8 4000 	ldr.w	r4, [r8]
 8003e24:	4627      	mov	r7, r4
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	d143      	bne.n	8003eb2 <_malloc_r+0xd6>
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	d04b      	beq.n	8003ec6 <_malloc_r+0xea>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	4639      	mov	r1, r7
 8003e32:	4630      	mov	r0, r6
 8003e34:	eb04 0903 	add.w	r9, r4, r3
 8003e38:	f000 f98c 	bl	8004154 <_sbrk_r>
 8003e3c:	4581      	cmp	r9, r0
 8003e3e:	d142      	bne.n	8003ec6 <_malloc_r+0xea>
 8003e40:	6821      	ldr	r1, [r4, #0]
 8003e42:	1a6d      	subs	r5, r5, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ffa6 	bl	8003d98 <sbrk_aligned>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d03a      	beq.n	8003ec6 <_malloc_r+0xea>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	442b      	add	r3, r5
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	bb62      	cbnz	r2, 8003eb8 <_malloc_r+0xdc>
 8003e5e:	f8c8 7000 	str.w	r7, [r8]
 8003e62:	e00f      	b.n	8003e84 <_malloc_r+0xa8>
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	1b52      	subs	r2, r2, r5
 8003e68:	d420      	bmi.n	8003eac <_malloc_r+0xd0>
 8003e6a:	2a0b      	cmp	r2, #11
 8003e6c:	d917      	bls.n	8003e9e <_malloc_r+0xc2>
 8003e6e:	1961      	adds	r1, r4, r5
 8003e70:	42a3      	cmp	r3, r4
 8003e72:	6025      	str	r5, [r4, #0]
 8003e74:	bf18      	it	ne
 8003e76:	6059      	strne	r1, [r3, #4]
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	bf08      	it	eq
 8003e7c:	f8c8 1000 	streq.w	r1, [r8]
 8003e80:	5162      	str	r2, [r4, r5]
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	4630      	mov	r0, r6
 8003e86:	f000 f82f 	bl	8003ee8 <__malloc_unlock>
 8003e8a:	f104 000b 	add.w	r0, r4, #11
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	f020 0007 	bic.w	r0, r0, #7
 8003e94:	1ac2      	subs	r2, r0, r3
 8003e96:	bf1c      	itt	ne
 8003e98:	1a1b      	subne	r3, r3, r0
 8003e9a:	50a3      	strne	r3, [r4, r2]
 8003e9c:	e7af      	b.n	8003dfe <_malloc_r+0x22>
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	bf0c      	ite	eq
 8003ea4:	f8c8 2000 	streq.w	r2, [r8]
 8003ea8:	605a      	strne	r2, [r3, #4]
 8003eaa:	e7eb      	b.n	8003e84 <_malloc_r+0xa8>
 8003eac:	4623      	mov	r3, r4
 8003eae:	6864      	ldr	r4, [r4, #4]
 8003eb0:	e7ae      	b.n	8003e10 <_malloc_r+0x34>
 8003eb2:	463c      	mov	r4, r7
 8003eb4:	687f      	ldr	r7, [r7, #4]
 8003eb6:	e7b6      	b.n	8003e26 <_malloc_r+0x4a>
 8003eb8:	461a      	mov	r2, r3
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	42a3      	cmp	r3, r4
 8003ebe:	d1fb      	bne.n	8003eb8 <_malloc_r+0xdc>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6053      	str	r3, [r2, #4]
 8003ec4:	e7de      	b.n	8003e84 <_malloc_r+0xa8>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f000 f80c 	bl	8003ee8 <__malloc_unlock>
 8003ed0:	e794      	b.n	8003dfc <_malloc_r+0x20>
 8003ed2:	6005      	str	r5, [r0, #0]
 8003ed4:	e7d6      	b.n	8003e84 <_malloc_r+0xa8>
 8003ed6:	bf00      	nop
 8003ed8:	200002fc 	.word	0x200002fc

08003edc <__malloc_lock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	@ (8003ee4 <__malloc_lock+0x8>)
 8003ede:	f7ff bf0e 	b.w	8003cfe <__retarget_lock_acquire_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200002f4 	.word	0x200002f4

08003ee8 <__malloc_unlock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	@ (8003ef0 <__malloc_unlock+0x8>)
 8003eea:	f7ff bf09 	b.w	8003d00 <__retarget_lock_release_recursive>
 8003eee:	bf00      	nop
 8003ef0:	200002f4 	.word	0x200002f4

08003ef4 <__sflush_r>:
 8003ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efc:	0716      	lsls	r6, r2, #28
 8003efe:	4605      	mov	r5, r0
 8003f00:	460c      	mov	r4, r1
 8003f02:	d454      	bmi.n	8003fae <__sflush_r+0xba>
 8003f04:	684b      	ldr	r3, [r1, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dc02      	bgt.n	8003f10 <__sflush_r+0x1c>
 8003f0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dd48      	ble.n	8003fa2 <__sflush_r+0xae>
 8003f10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	d045      	beq.n	8003fa2 <__sflush_r+0xae>
 8003f16:	2300      	movs	r3, #0
 8003f18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f1c:	682f      	ldr	r7, [r5, #0]
 8003f1e:	6a21      	ldr	r1, [r4, #32]
 8003f20:	602b      	str	r3, [r5, #0]
 8003f22:	d030      	beq.n	8003f86 <__sflush_r+0x92>
 8003f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	0759      	lsls	r1, r3, #29
 8003f2a:	d505      	bpl.n	8003f38 <__sflush_r+0x44>
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f32:	b10b      	cbz	r3, 8003f38 <__sflush_r+0x44>
 8003f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f36:	1ad2      	subs	r2, r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f3c:	6a21      	ldr	r1, [r4, #32]
 8003f3e:	4628      	mov	r0, r5
 8003f40:	47b0      	blx	r6
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	d106      	bne.n	8003f56 <__sflush_r+0x62>
 8003f48:	6829      	ldr	r1, [r5, #0]
 8003f4a:	291d      	cmp	r1, #29
 8003f4c:	d82b      	bhi.n	8003fa6 <__sflush_r+0xb2>
 8003f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ff8 <__sflush_r+0x104>)
 8003f50:	410a      	asrs	r2, r1
 8003f52:	07d6      	lsls	r6, r2, #31
 8003f54:	d427      	bmi.n	8003fa6 <__sflush_r+0xb2>
 8003f56:	2200      	movs	r2, #0
 8003f58:	6062      	str	r2, [r4, #4]
 8003f5a:	04d9      	lsls	r1, r3, #19
 8003f5c:	6922      	ldr	r2, [r4, #16]
 8003f5e:	6022      	str	r2, [r4, #0]
 8003f60:	d504      	bpl.n	8003f6c <__sflush_r+0x78>
 8003f62:	1c42      	adds	r2, r0, #1
 8003f64:	d101      	bne.n	8003f6a <__sflush_r+0x76>
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	b903      	cbnz	r3, 8003f6c <__sflush_r+0x78>
 8003f6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f6e:	602f      	str	r7, [r5, #0]
 8003f70:	b1b9      	cbz	r1, 8003fa2 <__sflush_r+0xae>
 8003f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f76:	4299      	cmp	r1, r3
 8003f78:	d002      	beq.n	8003f80 <__sflush_r+0x8c>
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7ff fec2 	bl	8003d04 <_free_r>
 8003f80:	2300      	movs	r3, #0
 8003f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f84:	e00d      	b.n	8003fa2 <__sflush_r+0xae>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b0      	blx	r6
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	1c50      	adds	r0, r2, #1
 8003f90:	d1c9      	bne.n	8003f26 <__sflush_r+0x32>
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0c6      	beq.n	8003f26 <__sflush_r+0x32>
 8003f98:	2b1d      	cmp	r3, #29
 8003f9a:	d001      	beq.n	8003fa0 <__sflush_r+0xac>
 8003f9c:	2b16      	cmp	r3, #22
 8003f9e:	d11e      	bne.n	8003fde <__sflush_r+0xea>
 8003fa0:	602f      	str	r7, [r5, #0]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e022      	b.n	8003fec <__sflush_r+0xf8>
 8003fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	e01b      	b.n	8003fe6 <__sflush_r+0xf2>
 8003fae:	690f      	ldr	r7, [r1, #16]
 8003fb0:	2f00      	cmp	r7, #0
 8003fb2:	d0f6      	beq.n	8003fa2 <__sflush_r+0xae>
 8003fb4:	0793      	lsls	r3, r2, #30
 8003fb6:	680e      	ldr	r6, [r1, #0]
 8003fb8:	bf08      	it	eq
 8003fba:	694b      	ldreq	r3, [r1, #20]
 8003fbc:	600f      	str	r7, [r1, #0]
 8003fbe:	bf18      	it	ne
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	eba6 0807 	sub.w	r8, r6, r7
 8003fc6:	608b      	str	r3, [r1, #8]
 8003fc8:	f1b8 0f00 	cmp.w	r8, #0
 8003fcc:	dde9      	ble.n	8003fa2 <__sflush_r+0xae>
 8003fce:	6a21      	ldr	r1, [r4, #32]
 8003fd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003fd2:	4643      	mov	r3, r8
 8003fd4:	463a      	mov	r2, r7
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	47b0      	blx	r6
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	dc08      	bgt.n	8003ff0 <__sflush_r+0xfc>
 8003fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	4407      	add	r7, r0
 8003ff2:	eba8 0800 	sub.w	r8, r8, r0
 8003ff6:	e7e7      	b.n	8003fc8 <__sflush_r+0xd4>
 8003ff8:	dfbffffe 	.word	0xdfbffffe

08003ffc <_fflush_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4605      	mov	r5, r0
 8004002:	460c      	mov	r4, r1
 8004004:	b913      	cbnz	r3, 800400c <_fflush_r+0x10>
 8004006:	2500      	movs	r5, #0
 8004008:	4628      	mov	r0, r5
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	b118      	cbz	r0, 8004016 <_fflush_r+0x1a>
 800400e:	6a03      	ldr	r3, [r0, #32]
 8004010:	b90b      	cbnz	r3, 8004016 <_fflush_r+0x1a>
 8004012:	f7ff fc8f 	bl	8003934 <__sinit>
 8004016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f3      	beq.n	8004006 <_fflush_r+0xa>
 800401e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004020:	07d0      	lsls	r0, r2, #31
 8004022:	d404      	bmi.n	800402e <_fflush_r+0x32>
 8004024:	0599      	lsls	r1, r3, #22
 8004026:	d402      	bmi.n	800402e <_fflush_r+0x32>
 8004028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800402a:	f7ff fe68 	bl	8003cfe <__retarget_lock_acquire_recursive>
 800402e:	4628      	mov	r0, r5
 8004030:	4621      	mov	r1, r4
 8004032:	f7ff ff5f 	bl	8003ef4 <__sflush_r>
 8004036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004038:	07da      	lsls	r2, r3, #31
 800403a:	4605      	mov	r5, r0
 800403c:	d4e4      	bmi.n	8004008 <_fflush_r+0xc>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	059b      	lsls	r3, r3, #22
 8004042:	d4e1      	bmi.n	8004008 <_fflush_r+0xc>
 8004044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004046:	f7ff fe5b 	bl	8003d00 <__retarget_lock_release_recursive>
 800404a:	e7dd      	b.n	8004008 <_fflush_r+0xc>

0800404c <__swhatbuf_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	460c      	mov	r4, r1
 8004050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004054:	2900      	cmp	r1, #0
 8004056:	b096      	sub	sp, #88	@ 0x58
 8004058:	4615      	mov	r5, r2
 800405a:	461e      	mov	r6, r3
 800405c:	da0d      	bge.n	800407a <__swhatbuf_r+0x2e>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	bf14      	ite	ne
 800406a:	2340      	movne	r3, #64	@ 0x40
 800406c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004070:	2000      	movs	r0, #0
 8004072:	6031      	str	r1, [r6, #0]
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	b016      	add	sp, #88	@ 0x58
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	466a      	mov	r2, sp
 800407c:	f000 f848 	bl	8004110 <_fstat_r>
 8004080:	2800      	cmp	r0, #0
 8004082:	dbec      	blt.n	800405e <__swhatbuf_r+0x12>
 8004084:	9901      	ldr	r1, [sp, #4]
 8004086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800408a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800408e:	4259      	negs	r1, r3
 8004090:	4159      	adcs	r1, r3
 8004092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004096:	e7eb      	b.n	8004070 <__swhatbuf_r+0x24>

08004098 <__smakebuf_r>:
 8004098:	898b      	ldrh	r3, [r1, #12]
 800409a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409c:	079d      	lsls	r5, r3, #30
 800409e:	4606      	mov	r6, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	d507      	bpl.n	80040b4 <__smakebuf_r+0x1c>
 80040a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	2301      	movs	r3, #1
 80040ae:	6163      	str	r3, [r4, #20]
 80040b0:	b003      	add	sp, #12
 80040b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b4:	ab01      	add	r3, sp, #4
 80040b6:	466a      	mov	r2, sp
 80040b8:	f7ff ffc8 	bl	800404c <__swhatbuf_r>
 80040bc:	9f00      	ldr	r7, [sp, #0]
 80040be:	4605      	mov	r5, r0
 80040c0:	4639      	mov	r1, r7
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff fe8a 	bl	8003ddc <_malloc_r>
 80040c8:	b948      	cbnz	r0, 80040de <__smakebuf_r+0x46>
 80040ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ce:	059a      	lsls	r2, r3, #22
 80040d0:	d4ee      	bmi.n	80040b0 <__smakebuf_r+0x18>
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	81a3      	strh	r3, [r4, #12]
 80040dc:	e7e2      	b.n	80040a4 <__smakebuf_r+0xc>
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	6020      	str	r0, [r4, #0]
 80040e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	9b01      	ldr	r3, [sp, #4]
 80040ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80040ee:	b15b      	cbz	r3, 8004108 <__smakebuf_r+0x70>
 80040f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f81d 	bl	8004134 <_isatty_r>
 80040fa:	b128      	cbz	r0, 8004108 <__smakebuf_r+0x70>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	431d      	orrs	r5, r3
 800410c:	81a5      	strh	r5, [r4, #12]
 800410e:	e7cf      	b.n	80040b0 <__smakebuf_r+0x18>

08004110 <_fstat_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4d07      	ldr	r5, [pc, #28]	@ (8004130 <_fstat_r+0x20>)
 8004114:	2300      	movs	r3, #0
 8004116:	4604      	mov	r4, r0
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	602b      	str	r3, [r5, #0]
 800411e:	f7fc fb74 	bl	800080a <_fstat>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d102      	bne.n	800412c <_fstat_r+0x1c>
 8004126:	682b      	ldr	r3, [r5, #0]
 8004128:	b103      	cbz	r3, 800412c <_fstat_r+0x1c>
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	bd38      	pop	{r3, r4, r5, pc}
 800412e:	bf00      	nop
 8004130:	200002f0 	.word	0x200002f0

08004134 <_isatty_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4d06      	ldr	r5, [pc, #24]	@ (8004150 <_isatty_r+0x1c>)
 8004138:	2300      	movs	r3, #0
 800413a:	4604      	mov	r4, r0
 800413c:	4608      	mov	r0, r1
 800413e:	602b      	str	r3, [r5, #0]
 8004140:	f7fc fb73 	bl	800082a <_isatty>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d102      	bne.n	800414e <_isatty_r+0x1a>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	b103      	cbz	r3, 800414e <_isatty_r+0x1a>
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	200002f0 	.word	0x200002f0

08004154 <_sbrk_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4d06      	ldr	r5, [pc, #24]	@ (8004170 <_sbrk_r+0x1c>)
 8004158:	2300      	movs	r3, #0
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fc fb7c 	bl	800085c <_sbrk>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_sbrk_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_sbrk_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	200002f0 	.word	0x200002f0

08004174 <_init>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr

08004180 <_fini>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr
